
#include <Python.h>

#include <npy_common.h>
#include <npy_defs.h>
#include <npy_loops.h>
#include <npy_ufunc_object.h>


void
NpyUFunc_O_O(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_O_O_method(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_OO_O(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_OO_O_method(char **args, npy_intp *dimensions, npy_intp *steps, void *func);



/*
 * API Functions.  These are only here for the automatic API generator and 
 * backwards compatibility.
 */

/*UFUNC_API*/
void
PyUFunc_O_O(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    NpyUFunc_O_O(args, dimensions, steps, func);
}
 
 /*UFUNC_API*/
void
PyUFunc_OO_O(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    NpyUFunc_OO_O(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_O_O_method(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    NpyUFunc_O_O_method(args, dimensions, steps, func);
}


/*UFUNC_API*/
void
PyUFunc_OO_O_method(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    NpyUFunc_OO_O_method(args, dimensions, steps, func);
}


/*UFUNC_API*/
void
PyUFunc_f_f(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_f_f(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_f_f_As_d_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_f_f_As_d_d(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_ff_f(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_ff_f(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_ff_f_As_dd_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_ff_f_As_dd_d(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_d_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_d_d(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_dd_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_dd_d(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_g_g(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_g_g(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_gg_g(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_gg_g(args, dimensions, steps, func);
}


/*UFUNC_API*/
void
PyUFunc_F_F(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_F_F(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_F_F_As_D_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_F_F_As_D_D(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_FF_F(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_FF_F(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_FF_F_As_DD_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_FF_F_As_DD_D(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_D_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_D_D(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_DD_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_DD_D(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_G_G(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_D_D(args, dimensions, steps, func);
}

/*UFUNC_API*/
void
PyUFunc_GG_G(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    PyUFunc_GG_G(args, dimensions, steps, func);
}



/*
 *****************************************************************************
 **                            OBJECT LOOPS                                 **
 *****************************************************************************
 */

/**begin repeat
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal#
 * #OP = EQ, NE, GT, GE, LT, LE#
 */
void
OBJECT_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func)) {
    BINARY_LOOP {
        PyObject *in1 = *(PyObject **)ip1;
        PyObject *in2 = *(PyObject **)ip2;
        int ret = PyObject_RichCompareBool(in1, in2, Py_@OP@);
        if (ret == -1) {
            return;
        }
        *((npy_bool *)op1) = (npy_bool)ret;
    }
}
/**end repeat**/

void
OBJECT_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
#if defined(NPY_PY3K)
    PyObject *zero = PyLong_FromLong(0);
    UNARY_LOOP {
        PyObject *in1 = *(PyObject **)ip1;
        PyObject **out = (PyObject **)op1;
        int v;
        PyObject *ret;
        PyObject_Cmp(in1, zero, &v);
        ret = PyLong_FromLong(v);
        if (PyErr_Occurred()) {
            return;
        }
        Py_XDECREF(*out);
        *out = ret;
    }
    Py_DECREF(zero);
#else
    PyObject *zero = PyInt_FromLong(0);
    UNARY_LOOP {
        PyObject *in1 = *(PyObject **)ip1;
        PyObject **out = (PyObject **)op1;
        PyObject *ret = PyInt_FromLong(PyObject_Compare(in1, zero));
        if (PyErr_Occurred()) {
            return;
        }
        Py_XDECREF(*out);
        *out = ret;
    }
    Py_DECREF(zero);
#endif
}



/*UFUNC_API*/
void
PyUFunc_On_Om(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    npy_intp n =  dimensions[0];
    NpyUFunc_FuncData *data = (NpyUFunc_FuncData *)func;
    int nin = data->nin;
    int nout = data->nout;
    PyObject *tocall = data->callable;
    char *ptrs[NPY_MAXARGS];
    PyObject *arglist, *result;
    PyObject *in, **op;
    npy_intp i, j, ntot;
    
    ntot = nin+nout;
    
    for(j = 0; j < ntot; j++) {
        ptrs[j] = args[j];
    }
    for(i = 0; i < n; i++) {
        arglist = PyTuple_New(nin);
        if (arglist == NULL) {
            return;
        }
        for(j = 0; j < nin; j++) {
            in = *((PyObject **)ptrs[j]);
            if (in == NULL) {
                Py_DECREF(arglist);
                return;
            }
            PyTuple_SET_ITEM(arglist, j, in);
            Py_INCREF(in);
        }
        result = PyEval_CallObject(tocall, arglist);
        Py_DECREF(arglist);
        if (result == NULL) {
            return;
        }
        if (PyTuple_Check(result)) {
            if (nout != PyTuple_Size(result)) {
                Py_DECREF(result);
                return;
            }
            for(j = 0; j < nout; j++) {
                op = (PyObject **)ptrs[j+nin];
                Py_XDECREF(*op);
                *op = PyTuple_GET_ITEM(result, j);
                Py_INCREF(*op);
            }
            Py_DECREF(result);
        }
        else {
            op = (PyObject **)ptrs[nin];
            Py_XDECREF(*op);
            *op = result;
        }
        for(j = 0; j < ntot; j++) {
            ptrs[j] += steps[j];
        }
    }
}



/*
 *****************************************************************************
 **                              END LOOPS                                  **
 *****************************************************************************
 */

