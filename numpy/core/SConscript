import os
import sys
from os.path import join as pjoin

from numscons import get_pythonlib_dir
from numscons import GetNumpyEnvironment
from numscons import CheckCBLAS
from numscons import write_info

from code_generators.numpy_api import \
    multiarray_api as multiarray_api_dict, \
    ufunc_api as ufunc_api_dict

from setup_common import C_ABI_VERSION, C_API_VERSION
from scons_support import (CheckBrokenMathlib, define_no_smp,
                           is_npy_no_signal, CheckInline,
                           array_api_gen_bld, ufunc_api_gen_bld, template_bld,
                           umath_bld, CheckGCC4, check_api_version)

import SCons


ndarray_inc_dir = os.environ['NDARRAY_INC_DIR']
ndarray_lib_dir = os.environ['NDARRAY_LIB_DIR']
print 'ndarray_inc_dir = %r' % ndarray_inc_dir
print 'ndarray_lib_dir = %r' % ndarray_lib_dir



env = GetNumpyEnvironment(ARGUMENTS)
env.Append(CPPPATH = env["PYEXTCPPPATH"])
if os.name == 'nt':
    # NT needs the pythonlib to run any code importing Python.h, including
    # simple code using only typedef and so on, so we need it for configuration
    # checks
    env.AppendUnique(LIBPATH = [get_pythonlib_dir()])

# Check whether we have a mismatch between the set C API VERSION and the
# actual C API VERSION
check_api_version(C_API_VERSION)

#=======================
# Starting Configuration
#=======================
config = env.NumpyConfigure(custom_tests = {
    'CheckBrokenMathlib' : CheckBrokenMathlib,
    'CheckCBLAS' : CheckCBLAS,
    'CheckInline': CheckInline,
    'CheckGCC4' : CheckGCC4,
}, config_h = pjoin('config.h'))

# numpyconfig_sym will keep the values of some configuration variables, the one
# needed for the public numpy API.

# Convention: list of tuples (definition, value). value:
# - 0: #undef definition
# - 1: #define definition
# - string: #define definition value
numpyconfig_sym = []


#----------------------
# Checking signal stuff
#----------------------
if is_npy_no_signal():
    numpyconfig_sym.append(('DEFINE_NPY_NO_SIGNAL', '#define NPY_NO_SIGNAL\n'))
    config.Define('__NPY_PRIVATE_NO_SIGNAL',
                  comment = "define to 1 to disable SMP support ")
else:
    numpyconfig_sym.append(('DEFINE_NPY_NO_SIGNAL', ''))

#---------------------
# Checking SMP option
#---------------------
if define_no_smp():
    nosmp = 1
else:
    nosmp = 0
numpyconfig_sym.append(('NPY_NO_SMP', nosmp))

#----------------------------------------------
# Check whether we can use C99 printing formats
#----------------------------------------------
if config.CheckDeclaration(('PRIdPTR'), includes  = '#include <inttypes.h>'):
    numpyconfig_sym.append(('DEFINE_NPY_USE_C99_FORMATS',
                            '#define NPY_USE_C99_FORMATS 1'))
else:
    numpyconfig_sym.append(('DEFINE_NPY_USE_C99_FORMATS', ''))


inline = config.CheckInline()
config.Define('inline', inline)


def visibility_define():
    if config.CheckGCC4():
        return '__attribute__((visibility("hidden")))'
    else:
        return ''

numpyconfig_sym.append(('VISIBILITY_HIDDEN', visibility_define()))

# Add the C API/ABI versions
numpyconfig_sym.append(('NPY_ABI_VERSION', '0x%.8X' % C_ABI_VERSION))
numpyconfig_sym.append(('NPY_API_VERSION', '0x%.8X' % C_API_VERSION))

# Check whether we need our own wide character support
if not config.CheckDeclaration('Py_UNICODE_WIDE',
                               includes='#include <Python.h>'):
    PYTHON_HAS_UNICODE_WIDE = True
else:
    PYTHON_HAS_UNICODE_WIDE = False

#------------------------------------
# DISTUTILS Hack on AMD64 on windows
#------------------------------------
# XXX: this is ugly
if sys.platform=='win32' or os.name=='nt':
    from distutils.msvccompiler import get_build_architecture
    a = get_build_architecture()
    print 'BUILD_ARCHITECTURE: %r, os.name=%r, sys.platform=%r' % \
          (a, os.name, sys.platform)
    if a == 'AMD64':
        distutils_use_sdk = 1
        config.Define('DISTUTILS_USE_SDK', distutils_use_sdk,
                      "define to 1 to disable SMP support ")

#--------------
# Checking Blas
#--------------
if config.CheckCBLAS():
    build_blasdot = 1
else:
    build_blasdot = 0

config.config_h_text += """
#ifndef _NUMPY_CONFIG_H_
#error config.h should never be included directly, include numpy_config.h instead
#endif
"""

config.Finish()
write_info(env)

#==========
#  Build
#==========

# List of headers which need to be "installed " into the build directory for
# proper in-place build support
generated_headers = []

#---------------------------------------
# Generate the public configuration file
#---------------------------------------
config_dict = {}
# XXX: this is ugly, make the API for config.h and numpyconfig.h similar
for key, value in numpyconfig_sym:
    config_dict['@%s@' % key] = str(value)
env['SUBST_DICT'] = config_dict

include_dir = 'include/numpy'
target = env.SubstInFile(pjoin(include_dir, '_numpyconfig.h'),
        pjoin(include_dir, '_numpyconfig.h.in'))
generated_headers.append(target[0])

env['CONFIG_H_GEN'] = numpyconfig_sym

#---------------------------
# Builder for generated code
#---------------------------
env.Append(BUILDERS = {'GenerateMultiarrayApi' : array_api_gen_bld,
                       'GenerateUfuncApi' : ufunc_api_gen_bld,
                       'GenerateFromTemplate' : template_bld,
                       'GenerateUmath' : umath_bld})

#------------------------
# Generate generated code
#------------------------
scalartypes_src = env.GenerateFromTemplate(
    pjoin('src', 'multiarray', 'scalartypes.c.src'))
umath_loops_src = env.GenerateFromTemplate(pjoin('src', 'umath', 'loops.c.src'))
arraytypes_src = env.GenerateFromTemplate(
    pjoin('src', 'multiarray', 'arraytypes.c.src'))

# TODO:
# npy_arraytypes_src = env.GenerateFromTemplate(
#     pjoin('src', 'libnumpy', 'npy_arraytypes.c.src'))

sortmodule_src = env.GenerateFromTemplate(pjoin('src', '_sortmodule.c.src'))
umathmodule_src = env.GenerateFromTemplate(pjoin('src', 'umath',
    'umathmodule.c.src'))
umath_tests_src = env.GenerateFromTemplate(pjoin('src', 'umath',
    'umath_tests.c.src'))
multiarray_tests_src = env.GenerateFromTemplate(pjoin('src', 'multiarray',
    'multiarray_tests.c.src'))
scalarmathmodule_src = env.GenerateFromTemplate(
                            pjoin('src', 'scalarmathmodule.c.src'))

umath = env.GenerateUmath('__umath_generated',
                          pjoin('code_generators', 'generate_umath.py'))

multiarray_api = env.GenerateMultiarrayApi('include/numpy/multiarray_api',
                     [SCons.Node.Python.Value(d) for d in multiarray_api_dict])
generated_headers.append(multiarray_api[0])

ufunc_api = env.GenerateUfuncApi('include/numpy/ufunc_api',
                        [SCons.Node.Python.Value(d) for d in ufunc_api_dict])
generated_headers.append(ufunc_api[0])

# include/numpy is added for compatibility reasons with distutils: this is
# needed for __multiarray_api.c and __ufunc_api.c included from multiarray and
# ufunc.
env.Prepend(CPPPATH = ['src/private', 'include', '.', 'include/numpy',
                       ndarray_inc_dir])

env.Prepend(LIBPATH=[".", ndarray_lib_dir])

subst_dict = {'@prefix@': '$distutils_install_prefix',
              '@pkgname@': 'numpy.core', '@sep@': os.path.sep}


#-----------------
# Build multiarray
#-----------------
multiarray_src = [
        pjoin('src', 'multiarray', 'multiarraymodule.c'),
        pjoin('src', 'multiarray', 'hashdescr.c'),
        pjoin('src', 'multiarray', 'arrayobject.c'),
        pjoin('src', 'multiarray', 'datetime.c'),
        pjoin('src', 'multiarray', 'flagsobject.c'),
        pjoin('src', 'multiarray', 'descriptor.c'),
        pjoin('src', 'multiarray', 'iterators.c'),
        pjoin('src', 'multiarray', 'mapping.c'),
        pjoin('src', 'multiarray', 'number.c'),
        pjoin('src', 'multiarray', 'getset.c'),
        pjoin('src', 'multiarray', 'sequence.c'),
        pjoin('src', 'multiarray', 'methods.c'),
        pjoin('src', 'multiarray', 'ctors.c'),
        pjoin('src', 'multiarray', 'convert_datatype.c'),
        pjoin('src', 'multiarray', 'convert.c'),
        pjoin('src', 'multiarray', 'shape.c'),
        pjoin('src', 'multiarray', 'item_selection.c'),
        pjoin('src', 'multiarray', 'calculation.c'),
        pjoin('src', 'multiarray', 'common.c'),
        pjoin('src', 'multiarray', 'refcount.c'),
        pjoin('src', 'multiarray', 'conversion_utils.c'),
        pjoin('src', 'multiarray', 'usertypes.c'),
        pjoin('src', 'multiarray', 'buffer.c'),
        pjoin('src', 'multiarray', 'numpymemoryview.c'),
        pjoin('src', 'multiarray', 'scalarapi.c'),
]
multiarray_src.extend(arraytypes_src)
multiarray_src.extend(scalartypes_src)
if PYTHON_HAS_UNICODE_WIDE:
    multiarray_src.extend([pjoin("src", "multiarray", "ucsnarrow.c")])

multiarray = env.DistutilsPythonExtension(
         'multiarray',
         LIBS=['ndarray'],
         LIBPATH=[ndarray_lib_dir],
         source = multiarray_src)
env.DistutilsPythonExtension('multiarray_tests', source=multiarray_tests_src)

#------------------
# Build sort module
#------------------
sort = env.DistutilsPythonExtension(
         '_sort',
         LIBS=['ndarray'],
         LIBPATH=[ndarray_lib_dir],
         source = sortmodule_src)

#-------------------
# Build umath module
#-------------------
umathmodule_src.extend([pjoin('src', 'umath', 'ufunc_object.c')])
umathmodule_src.extend(umath_loops_src)
umathmodule = env.DistutilsPythonExtension(
         'umath',
         LIBS=['ndarray'],
         source = umathmodule_src)

#------------------------
# Build scalarmath module
#------------------------
scalarmathmodule = env.DistutilsPythonExtension('scalarmath',
                                            source = scalarmathmodule_src)

#------------------------
# Build scalarmath module
#------------------------
umath_tests = env.DistutilsPythonExtension('umath_tests',
        source=umath_tests_src)

#----------------------
# Build _dotblas module
#----------------------
if build_blasdot:
    dotblas_src = [pjoin('blasdot', i) for i in ['_dotblas.c']]
    # because _dotblas does #include CBLAS_HEADER instead of #include
    # "cblas.h", scons does not detect the dependency
    # XXX: PythonExtension builder does not take the Depends on extension into
    # account for some reason, so we first build the object, with forced
    # dependency, and then builds the extension. This is more likely a bug in
    # our PythonExtension builder, but I cannot see how to solve it.
    dotblas_o = env.PythonObject('_dotblas', source = dotblas_src)
    if sys.platform == 'win32':
        env.Prepend(LIBS=['ndarray'])
    env.Depends(dotblas_o, pjoin("blasdot", "cblas.h"))
    dotblas = env.DistutilsPythonExtension('_dotblas', dotblas_o)

# "Install" the header in the build directory, so that in-place build works
for h in generated_headers:
    env.Install(pjoin('$distutils_installdir', include_dir), h)
