/* -*- c -*- */
/*
 * vim:syntax=c
 */

#ifndef _NPY_LOOPS_H_
#define _NPY_LOOPS_H_

#include "npy_os.h"
#include "npy_utils.h"
#include "npy_ufunc_object.h"

#define npy_BOOL_invert npy_BOOL_logical_not
#define npy_BOOL_negative npy_BOOL_logical_not
#define npy_BOOL_add npy_BOOL_logical_or
#define npy_BOOL_bitwise_and npy_BOOL_logical_and
#define npy_BOOL_bitwise_or npy_BOOL_logical_or
#define npy_BOOL_bitwise_xor npy_BOOL_logical_xor
#define npy_BOOL_multiply npy_BOOL_logical_and
#define npy_BOOL_subtract npy_BOOL_logical_xor
#define npy_BOOL_fmax npy_BOOL_maximum
#define npy_BOOL_fmin npy_BOOL_minimum


#define OUTPUT_LOOP\
    char *op1 = args[1];\
    npy_intp os1 = steps[1];\
    npy_intp n = dimensions[0];\
    npy_intp i;\
    for(i = 0; i < n; i++, op1 += os1)

#define UNARY_LOOP\
    char *ip1 = args[0], *op1 = args[1];\
    npy_intp is1 = steps[0], os1 = steps[1];\
    npy_intp n = dimensions[0];\
    npy_intp i;\
    for(i = 0; i < n; i++, ip1 += is1, op1 += os1)

#define UNARY_LOOP_TWO_OUT\
    char *ip1 = args[0], *op1 = args[1], *op2 = args[2];\
    npy_intp is1 = steps[0], os1 = steps[1], os2 = steps[2];\
    npy_intp n = dimensions[0];\
    npy_intp i;\
    for(i = 0; i < n; i++, ip1 += is1, op1 += os1, op2 += os2)

#define BINARY_LOOP\
    char *ip1 = args[0], *ip2 = args[1], *op1 = args[2];\
    npy_intp is1 = steps[0], is2 = steps[1], os1 = steps[2];\
    npy_intp n = dimensions[0];\
    npy_intp i;\
    for(i = 0; i < n; i++, ip1 += is1, ip2 += is2, op1 += os1)

#define BINARY_REDUCE_LOOP(TYPE)\
    char *iop1 = args[0], *ip2 = args[1]; \
    npy_intp is2 = steps[1]; \
    npy_intp n = dimensions[0]; \
    npy_intp i; \
    TYPE io1 = *(TYPE *)iop1; \
    for(i = 0; i < n; i++, ip2 += is2)

#define BINARY_LOOP_TWO_OUT\
    char *ip1 = args[0], *ip2 = args[1], *op1 = args[2], *op2 = args[3];\
    npy_intp is1 = steps[0], is2 = steps[1], os1 = steps[2], os2 = steps[3];\
    npy_intp n = dimensions[0];\
    npy_intp i;\
    for(i = 0; i < n; i++, ip1 += is1, ip2 += is2, op1 += os1, op2 += os2)


void
NpyUFunc_F_F(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_F_F_As_D_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_FF_F(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_FF_F_As_DD_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_D_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_DD_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_G_G(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_GG_G(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_f_f(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_f_f_As_d_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_ff_f(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_ff_f_As_dd_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_d_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_dd_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_g_g(char **args, npy_intp *dimensions, npy_intp *steps, void *func);
void
NpyUFunc_gg_g(char **args, npy_intp *dimensions, npy_intp *steps, void *func);


/*
 *****************************************************************************
 **                             BOOLEAN LOOPS                               **
 *****************************************************************************
 */

/**begin repeat
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal,
 *         logical_and, logical_or, logical_xor, add, bitwise_or,
 *         bitwise_xor, bitwise_and, fmax, fmin, invert, multiply, negative,
 *         subtract#
 **/

void
npy_BOOL_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat**/

/**begin repeat
 * #kind = maximum, minimum#
 * #OP =  >, <#
 **/
void
npy_BOOL_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat**/

/**begin repeat
 * #kind = absolute, logical_not#
 * #OP =  !=, ==#
 **/
void
npy_BOOL_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat**/

void
npy_BOOL_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

/*
 *****************************************************************************
 **                           INTEGER LOOPS
 *****************************************************************************
 */

/**begin repeat
 * #type = byte, short, int, long, longlong#
 * #TYPE = BYTE, SHORT, INT, LONG, LONGLONG#
 * #ftype = float, float, double, double, double#
 */

/**begin repeat1
 * both signed and unsigned integer types
 * #s = , u#
 * #S = , U#
 */

#define npy_@S@@TYPE@_floor_divide npy_@S@@TYPE@_divide
#define npy_@S@@TYPE@_fmax npy_@S@@TYPE@_maximum
#define npy_@S@@TYPE@_fmin npy_@S@@TYPE@_minimum

void
npy_@S@@TYPE@_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

void
npy_@S@@TYPE@_square(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

void
npy_@S@@TYPE@_reciprocal(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

void
npy_@S@@TYPE@_conjugate(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@S@@TYPE@_negative(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@S@@TYPE@_logical_not(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@S@@TYPE@_invert(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/**begin repeat2
 * Arithmetic
 * #kind = add, subtract, multiply, bitwise_and, bitwise_or, bitwise_xor,
 *          left_shift, right_shift#
 * #OP = +, -,*, &, |, ^, <<, >>#
 */
void
npy_@S@@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/**end repeat2**/

/**begin repeat2
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal,
 *         logical_and, logical_or#
 * #OP =  ==, !=, >, >=, <, <=, &&, ||#
 */
void
npy_@S@@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat2**/

void
npy_@S@@TYPE@_logical_xor(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/**begin repeat2
 * #kind = maximum, minimum#
 * #OP =  >, <#
 **/
void
npy_@S@@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat2**/

void
npy_@S@@TYPE@_true_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@S@@TYPE@_power(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@S@@TYPE@_fmod(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/**end repeat1**/

void
npy_U@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_U@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_U@TYPE@_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_remainder(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_U@TYPE@_remainder(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat**/

/*
 *****************************************************************************
 **                             FLOAT LOOPS                                 **
 *****************************************************************************
 */


/**begin repeat
 * Float types
 *  #type = float, double, longdouble#
 *  #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 *  #c = f, , l#
 *  #C = F, , L#
 */


/**begin repeat1
 * Arithmetic
 * # kind = add, subtract, multiply, divide#
 * # OP = +, -, *, /#
 */
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

/**begin repeat1
 * #kind = equal, not_equal, less, less_equal, greater, greater_equal,
 *        logical_and, logical_or#
 * #OP = ==, !=, <, <=, >, >=, &&, ||#
 */
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

void
npy_@TYPE@_logical_xor(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_logical_not(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/**begin repeat1
 * #kind = isnan, isinf, isfinite, signbit, copysign, nextafter, spacing#
 * #func = npy_isnan, npy_isinf, npy_isfinite, npy_signbit, npy_copysign, nextafter, spacing#
 **/
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

/**begin repeat1
 * #kind = maximum, minimum#
 * #OP =  >=, <=#
 **/
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

/**begin repeat1
 * #kind = fmax, fmin#
 * #OP =  >=, <=#
 **/
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

void
npy_@TYPE@_floor_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_remainder(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_square(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

void
npy_@TYPE@_reciprocal(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));


void
npy_@TYPE@_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

void
npy_@TYPE@_conjugate(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_@TYPE@_negative(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));


void
npy_@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));


void
npy_@TYPE@_modf(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

#if NPY_HAVE_DECL_FREXP@C@
void
npy_@TYPE@_frexp(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
#endif

#if NPY_HAVE_DECL_LDEXP@C@
void
npy_@TYPE@_ldexp(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
#endif

#define npy_@TYPE@_true_divide npy_@TYPE@_divide

/**end repeat**/


/*
 *****************************************************************************
 **                           COMPLEX LOOPS                                 **
 *****************************************************************************
 */

#define CGE(xr,xi,yr,yi) (xr > yr || (xr == yr && xi >= yi));
#define CLE(xr,xi,yr,yi) (xr < yr || (xr == yr && xi <= yi));
#define CGT(xr,xi,yr,yi) (xr > yr || (xr == yr && xi > yi));
#define CLT(xr,xi,yr,yi) (xr < yr || (xr == yr && xi < yi));
#define CEQ(xr,xi,yr,yi) (xr == yr && xi == yi);
#define CNE(xr,xi,yr,yi) (xr != yr || xi != yi);

/**begin repeat
 * complex types
 * #type = float, double, longdouble#
 * #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 * #c = f, , l#
 * #C = F, , L#
 */

/**begin repeat1
 * arithmetic
 * #kind = add, subtract#
 * #OP = +, -#
 */
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/**end repeat1**/

void
npy_C@TYPE@_multiply(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_C@TYPE@_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_C@TYPE@_floor_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/**begin repeat1
 * #kind= greater, greater_equal, less, less_equal, equal, not_equal#
 * #OP = CGT, CGE, CLT, CLE, CEQ, CNE#
 */
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

/**begin repeat1
   #kind = logical_and, logical_or#
   #OP1 = ||, ||#
   #OP2 = &&, ||#
*/
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

void
npy_C@TYPE@_logical_xor(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_C@TYPE@_logical_not(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**begin repeat1
 * #kind = isnan, isinf, isfinite#
 * #func = npy_isnan, npy_isinf, npy_isfinite#
 * #OP = ||, ||, &&#
 **/
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

void
npy_C@TYPE@_square(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

void
npy_C@TYPE@_reciprocal(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

void
npy_C@TYPE@_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data));

void
npy_C@TYPE@_conjugate(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_C@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_C@TYPE@__arg(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_C@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/**begin repeat1
 * #kind = maximum, minimum#
 * #OP = CGE, CLE#
 */
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

/**begin repeat1
 * #kind = fmax, fmin#
 * #OP = CGE, CLE#
 */
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat1**/

#define npy_C@TYPE@_true_divide npy_C@TYPE@_divide

/**end repeat**/

#undef CGE
#undef CLE
#undef CGT
#undef CLT
#undef CEQ
#undef CNE

/*
 *****************************************************************************
 **                            DATETIME LOOPS                               **
 *****************************************************************************
 */

/**begin repeat
 * #TYPE = DATETIME, TIMEDELTA#
 */
#define npy_@TYPE@_fmax npy_@TYPE@_maximum
#define npy_@TYPE@_fmin npy_@TYPE@_minimum
/**end repeat**/

/**begin repeat
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal,
 *      absolute, logical_and, logical_not, logical_or, logical_xor, maximum,
 *      minimum, negative, ones_like, sign#
 */
void
npy_DATETIME_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_TIMEDELTA_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));
/**end repeat**/

void
npy_DATETIME_Mm_M_add(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_DATETIME_mM_M_add(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_DATETIME_Mm_M_subtract(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_DATETIME_MM_m_subtract(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_TIMEDELTA_mm_m_add(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

void
npy_TIMEDELTA_mm_m_subtract(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func));

/*
 *****************************************************************************
 **                              END LOOPS                                  **
 *****************************************************************************
 */


NDARRAY_API extern NpyUFuncGenericFunction npy__arg_functions[];
NDARRAY_API extern void *npy__arg_data[];
NDARRAY_API extern char npy_npy__arg_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_absolute_functions[];
NDARRAY_API extern void *npy_absolute_data[];
NDARRAY_API extern char npy_absolute_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_add_functions[];
NDARRAY_API extern void *npy_add_data[];
NDARRAY_API extern char npy_add_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_arccos_functions[];
NDARRAY_API extern void *npy_arccos_data[];
NDARRAY_API extern char npy_arccos_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_arccosh_functions[];
NDARRAY_API extern void *npy_arccosh_data[];
NDARRAY_API extern char npy_arccosh_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_arcsin_functions[];
NDARRAY_API extern void *npy_arcsin_data[];
NDARRAY_API extern char npy_arcsin_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_arcsinh_functions[];
NDARRAY_API extern void *npy_arcsinh_data[];
NDARRAY_API extern char npy_arcsinh_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_arctan_functions[];
NDARRAY_API extern void *npy_arctan_data[];
NDARRAY_API extern char npy_arctan_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_arctan2_functions[];
NDARRAY_API extern void *npy_arctan2_data[];
NDARRAY_API extern char npy_arctan2_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_arctanh_functions[];
NDARRAY_API extern void *npy_arctanh_data[];
NDARRAY_API extern char npy_arctanh_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_bitwise_and_functions[];
NDARRAY_API extern void *npy_bitwise_and_data[];
NDARRAY_API extern char npy_bitwise_and_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_bitwise_or_functions[];
NDARRAY_API extern void *npy_bitwise_or_data[];
NDARRAY_API extern char npy_bitwise_or_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_bitwise_xor_functions[];
NDARRAY_API extern void *npy_bitwise_xor_data[];
NDARRAY_API extern char npy_bitwise_xor_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_ceil_functions[];
NDARRAY_API extern void *npy_ceil_data[];
NDARRAY_API extern char npy_ceil_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_conjugate_functions[];
NDARRAY_API extern void *npy_conjugate_data[];
NDARRAY_API extern char npy_conjugate_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_copysign_functions[];
NDARRAY_API extern void *npy_copysign_data[];
NDARRAY_API extern char npy_copysign_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_cos_functions[];
NDARRAY_API extern void *npy_cos_data[];
NDARRAY_API extern char npy_cos_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_cosh_functions[];
NDARRAY_API extern void *npy_cosh_data[];
NDARRAY_API extern char npy_cosh_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_deg2rad_functions[];
NDARRAY_API extern void *npy_deg2rad_data[];
NDARRAY_API extern char npy_deg2rad_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_degrees_functions[];
NDARRAY_API extern void *npy_degrees_data[];
NDARRAY_API extern char npy_degrees_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_divide_functions[];
NDARRAY_API extern void *npy_divide_data[];
NDARRAY_API extern char npy_divide_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_equal_functions[];
NDARRAY_API extern void *npy_equal_data[];
NDARRAY_API extern char npy_equal_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_exp_functions[];
NDARRAY_API extern void *npy_exp_data[];
NDARRAY_API extern char npy_exp_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_exp2_functions[];
NDARRAY_API extern void *npy_exp2_data[];
NDARRAY_API extern char npy_exp2_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_expm1_functions[];
NDARRAY_API extern void *npy_expm1_data[];
NDARRAY_API extern char npy_expm1_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_fabs_functions[];
NDARRAY_API extern void *npy_fabs_data[];
NDARRAY_API extern char npy_fabs_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_floor_functions[];
NDARRAY_API extern void *npy_floor_data[];
NDARRAY_API extern char npy_floor_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_floor_divide_functions[];
NDARRAY_API extern void *npy_floor_divide_data[];
NDARRAY_API extern char npy_floor_divide_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_fmax_functions[];
NDARRAY_API extern void *npy_fmax_data[];
NDARRAY_API extern char npy_fmax_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_fmin_functions[];
NDARRAY_API extern void *npy_fmin_data[];
NDARRAY_API extern char npy_fmin_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_fmod_functions[];
NDARRAY_API extern void *npy_fmod_data[];
NDARRAY_API extern char npy_fmod_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_greater_functions[];
NDARRAY_API extern void *npy_greater_data[];
NDARRAY_API extern char npy_greater_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_greater_equal_functions[];
NDARRAY_API extern void *npy_greater_equal_data[];
NDARRAY_API extern char npy_greater_equal_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_hypot_functions[];
NDARRAY_API extern void *npy_hypot_data[];
NDARRAY_API extern char npy_hypot_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_invert_functions[];
NDARRAY_API extern void *npy_invert_data[];
NDARRAY_API extern char npy_invert_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_isfinite_functions[];
NDARRAY_API extern void *npy_isfinite_data[];
NDARRAY_API extern char npy_isfinite_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_isinf_functions[];
NDARRAY_API extern void *npy_isinf_data[];
NDARRAY_API extern char npy_isinf_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_isnan_functions[];
NDARRAY_API extern void *npy_isnan_data[];
NDARRAY_API extern char npy_isnan_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_left_shift_functions[];
NDARRAY_API extern void *npy_left_shift_data[];
NDARRAY_API extern char npy_left_shift_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_less_functions[];
NDARRAY_API extern void *npy_less_data[];
NDARRAY_API extern char npy_less_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_less_equal_functions[];
NDARRAY_API extern void *npy_less_equal_data[];
NDARRAY_API extern char npy_less_equal_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_log_functions[];
NDARRAY_API extern void *npy_log_data[];
NDARRAY_API extern char npy_log_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_log10_functions[];
NDARRAY_API extern void *npy_log10_data[];
NDARRAY_API extern char npy_log10_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_log1p_functions[];
NDARRAY_API extern void *npy_log1p_data[];
NDARRAY_API extern char npy_log1p_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_log2_functions[];
NDARRAY_API extern void *npy_log2_data[];
NDARRAY_API extern char npy_log2_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_logaddexp_functions[];
NDARRAY_API extern void *npy_logaddexp_data[];
NDARRAY_API extern char npy_logaddexp_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_logaddexp2_functions[];
NDARRAY_API extern void *npy_logaddexp2_data[];
NDARRAY_API extern char npy_logaddexp2_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_logical_and_functions[];
NDARRAY_API extern void *npy_logical_and_data[];
NDARRAY_API extern char npy_logical_and_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_logical_not_functions[];
NDARRAY_API extern void *npy_logical_not_data[];
NDARRAY_API extern char npy_logical_not_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_logical_or_functions[];
NDARRAY_API extern void *npy_logical_or_data[];
NDARRAY_API extern char npy_logical_or_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_logical_xor_functions[];
NDARRAY_API extern void *npy_logical_xor_data[];
NDARRAY_API extern char npy_logical_xor_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_maximum_functions[];
NDARRAY_API extern void *npy_maximum_data[];
NDARRAY_API extern char npy_maximum_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_minimum_functions[];
NDARRAY_API extern void *npy_minimum_data[];
NDARRAY_API extern char npy_minimum_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_modf_functions[];
NDARRAY_API extern void *npy_modf_data[];
NDARRAY_API extern char npy_modf_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_multiply_functions[];
NDARRAY_API extern void *npy_multiply_data[];
NDARRAY_API extern char npy_multiply_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_negative_functions[];
NDARRAY_API extern void *npy_negative_data[];
NDARRAY_API extern char npy_negative_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_nextafter_functions[];
NDARRAY_API extern void *npy_nextafter_data[];
NDARRAY_API extern char npy_nextafter_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_not_equal_functions[];
NDARRAY_API extern void *npy_not_equal_data[];
NDARRAY_API extern char npy_not_equal_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_ones_like_functions[];
NDARRAY_API extern void *npy_ones_like_data[];
NDARRAY_API extern char npy_ones_like_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_power_functions[];
NDARRAY_API extern void *npy_power_data[];
NDARRAY_API extern char npy_power_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_rad2deg_functions[];
NDARRAY_API extern void *npy_rad2deg_data[];
NDARRAY_API extern char npy_rad2deg_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_radians_functions[];
NDARRAY_API extern void *npy_radians_data[];
NDARRAY_API extern char npy_radians_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_reciprocal_functions[];
NDARRAY_API extern void *npy_reciprocal_data[];
NDARRAY_API extern char npy_reciprocal_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_remainder_functions[];
NDARRAY_API extern void *npy_remainder_data[];
NDARRAY_API extern char npy_remainder_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_right_shift_functions[];
NDARRAY_API extern void *npy_right_shift_data[];
NDARRAY_API extern char npy_right_shift_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_rint_functions[];
NDARRAY_API extern void *npy_rint_data[];
NDARRAY_API extern char npy_rint_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_sign_functions[];
NDARRAY_API extern void *npy_sign_data[];
NDARRAY_API extern char npy_sign_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_signbit_functions[];
NDARRAY_API extern void *npy_signbit_data[];
NDARRAY_API extern char npy_signbit_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_sin_functions[];
NDARRAY_API extern void *npy_sin_data[];
NDARRAY_API extern char npy_sin_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_sinh_functions[];
NDARRAY_API extern void *npy_sinh_data[];
NDARRAY_API extern char npy_sinh_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_spacing_functions[];
NDARRAY_API extern void *npy_spacing_data[];
NDARRAY_API extern char npy_spacing_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_sqrt_functions[];
NDARRAY_API extern void *npy_sqrt_data[];
NDARRAY_API extern char npy_sqrt_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_square_functions[];
NDARRAY_API extern void *npy_square_data[];
NDARRAY_API extern char npy_square_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_subtract_functions[];
NDARRAY_API extern void *npy_subtract_data[];
NDARRAY_API extern char npy_subtract_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_tan_functions[];
NDARRAY_API extern void *npy_tan_data[];
NDARRAY_API extern char npy_tan_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_tanh_functions[];
NDARRAY_API extern void *npy_tanh_data[];
NDARRAY_API extern char npy_tanh_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_true_divide_functions[];
NDARRAY_API extern void *npy_true_divide_data[];
NDARRAY_API extern char npy_true_divide_signatures[];
NDARRAY_API extern NpyUFuncGenericFunction npy_trunc_functions[];
NDARRAY_API extern void *npy_trunc_data[];
NDARRAY_API extern char npy_trunc_signatures[];


#endif
