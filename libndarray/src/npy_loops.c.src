/* -*- c -*- */

#include "npy_config.h"
#include "npy_defs.h"
#include "npy_ufunc_object.h"
#include "npy_math.h"
#include "npy_os.h"
#include "npy_loops.h"


/*
 *****************************************************************************
 **                             UFUNC LOOPS                                 **
 *****************************************************************************
 */

#define IS_BINARY_REDUCE ((args[0] == args[2])\
        && (steps[0] == steps[2])\
        && (steps[0] == 0))


/******************************************************************************
 **                          GENERIC FLOAT LOOPS                             **
 *****************************************************************************/


typedef float floatUnaryFunc(float x);
typedef double doubleUnaryFunc(double x);
typedef npy_longdouble longdoubleUnaryFunc(npy_longdouble x);
typedef float floatBinaryFunc(float x, float y);
typedef double doubleBinaryFunc(double x, double y);
typedef npy_longdouble longdoubleBinaryFunc(npy_longdouble x, npy_longdouble y);


/*UFUNC_API*/
void
NpyUFunc_f_f(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    floatUnaryFunc *f = (floatUnaryFunc *)func;
    UNARY_LOOP {
        const float in1 = *(float *)ip1;
        *(float *)op1 = f(in1);
    }
}

/*UFUNC_API*/
void
NpyUFunc_f_f_As_d_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    doubleUnaryFunc *f = (doubleUnaryFunc *)func;
    UNARY_LOOP {
        const float in1 = *(float *)ip1;
        *(float *)op1 = (float)f((double)in1);
    }
}

/*UFUNC_API*/
void
NpyUFunc_ff_f(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    floatBinaryFunc *f = (floatBinaryFunc *)func;
    BINARY_LOOP {
        float in1 = *(float *)ip1;
        float in2 = *(float *)ip2;
        *(float *)op1 = f(in1, in2);
    }
}

/*UFUNC_API*/
void
NpyUFunc_ff_f_As_dd_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    doubleBinaryFunc *f = (doubleBinaryFunc *)func;
    BINARY_LOOP {
        float in1 = *(float *)ip1;
        float in2 = *(float *)ip2;
        *(float *)op1 = (double)f((double)in1, (double)in2);
    }
}

/*UFUNC_API*/
void
NpyUFunc_d_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    doubleUnaryFunc *f = (doubleUnaryFunc *)func;
    UNARY_LOOP {
        double in1 = *(double *)ip1;
        *(double *)op1 = f(in1);
    }
}

/*UFUNC_API*/
void
NpyUFunc_dd_d(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    doubleBinaryFunc *f = (doubleBinaryFunc *)func;
    BINARY_LOOP {
        double in1 = *(double *)ip1;
        double in2 = *(double *)ip2;
        *(double *)op1 = f(in1, in2);
    }
}

/*UFUNC_API*/
void
NpyUFunc_g_g(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    longdoubleUnaryFunc *f = (longdoubleUnaryFunc *)func;
    UNARY_LOOP {
        npy_longdouble in1 = *(npy_longdouble *)ip1;
        *(npy_longdouble *)op1 = f(in1);
    }
}

/*UFUNC_API*/
void
NpyUFunc_gg_g(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    longdoubleBinaryFunc *f = (longdoubleBinaryFunc *)func;
    BINARY_LOOP {
        npy_longdouble in1 = *(npy_longdouble *)ip1;
        npy_longdouble in2 = *(npy_longdouble *)ip2;
        *(npy_longdouble *)op1 = f(in1, in2);
    }
}



/******************************************************************************
 **                          GENERIC COMPLEX LOOPS                           **
 *****************************************************************************/


typedef void cdoubleUnaryFunc(npy_cdouble *x, npy_cdouble *r);
typedef void cfloatUnaryFunc(npy_cfloat *x, npy_cfloat *r);
typedef void clongdoubleUnaryFunc(npy_clongdouble *x, npy_clongdouble *r);
typedef void cdoubleBinaryFunc(npy_cdouble *x, npy_cdouble *y, npy_cdouble *r);
typedef void cfloatBinaryFunc(npy_cfloat *x, npy_cfloat *y, npy_cfloat *r);
typedef void clongdoubleBinaryFunc(npy_clongdouble *x, npy_clongdouble *y,
                                   npy_clongdouble *r);

/*UFUNC_API*/
void
NpyUFunc_F_F(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    cfloatUnaryFunc *f = (cfloatUnaryFunc *)func;
    UNARY_LOOP {
        npy_cfloat in1 = *(npy_cfloat *)ip1;
        npy_cfloat *out = (npy_cfloat *)op1;
        f(&in1, out);
    }
}

/*UFUNC_API*/
void
NpyUFunc_F_F_As_D_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    cdoubleUnaryFunc *f = (cdoubleUnaryFunc *)func;
    UNARY_LOOP {
        npy_cdouble tmp, out;
        tmp.real = (double)((float *)ip1)[0];
        tmp.imag = (double)((float *)ip1)[1];
        f(&tmp, &out);
        ((float *)op1)[0] = (float)out.real;
        ((float *)op1)[1] = (float)out.imag;
    }
}

/*UFUNC_API*/
void
NpyUFunc_FF_F(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    cfloatBinaryFunc *f = (cfloatBinaryFunc *)func;
    BINARY_LOOP {
        npy_cfloat in1 = *(npy_cfloat *)ip1;
        npy_cfloat in2 = *(npy_cfloat *)ip2;
        npy_cfloat *out = (npy_cfloat *)op1;
        f(&in1, &in2, out);
    }
}

/*UFUNC_API*/
void
NpyUFunc_FF_F_As_DD_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    cdoubleBinaryFunc *f = (cdoubleBinaryFunc *)func;
    BINARY_LOOP {
        npy_cdouble tmp1, tmp2, out;
        tmp1.real = (double)((float *)ip1)[0];
        tmp1.imag = (double)((float *)ip1)[1];
        tmp2.real = (double)((float *)ip2)[0];
        tmp2.imag = (double)((float *)ip2)[1];
        f(&tmp1, &tmp2, &out);
        ((float *)op1)[0] = (float)out.real;
        ((float *)op1)[1] = (float)out.imag;
    }
}

/*UFUNC_API*/
void
NpyUFunc_D_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    cdoubleUnaryFunc *f = (cdoubleUnaryFunc *)func;
    UNARY_LOOP {
        npy_cdouble in1 = *(npy_cdouble *)ip1;
        npy_cdouble *out = (npy_cdouble *)op1;
        f(&in1, out);
    }
}

/*UFUNC_API*/
void
NpyUFunc_DD_D(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    cdoubleBinaryFunc *f = (cdoubleBinaryFunc *)func;
    BINARY_LOOP {
        npy_cdouble in1 = *(npy_cdouble *)ip1;
        npy_cdouble in2 = *(npy_cdouble *)ip2;
        npy_cdouble *out = (npy_cdouble *)op1;
        f(&in1, &in2, out);
    }
}

/*UFUNC_API*/
void
NpyUFunc_G_G(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    clongdoubleUnaryFunc *f = (clongdoubleUnaryFunc *)func;
    UNARY_LOOP {
        npy_clongdouble in1 = *(npy_clongdouble *)ip1;
        npy_clongdouble *out = (npy_clongdouble *)op1;
        f(&in1, out);
    }
}

/*UFUNC_API*/
void
NpyUFunc_GG_G(char **args, npy_intp *dimensions, npy_intp *steps, void *func)
{
    clongdoubleBinaryFunc *f = (clongdoubleBinaryFunc *)func;
    BINARY_LOOP {
        npy_clongdouble in1 = *(npy_clongdouble *)ip1;
        npy_clongdouble in2 = *(npy_clongdouble *)ip2;
        npy_clongdouble *out = (npy_clongdouble *)op1;
        f(&in1, &in2, out);
    }
}



/*
 *****************************************************************************
 **                             BOOLEAN LOOPS                               **
 *****************************************************************************
 */

/**begin repeat
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal#
 * #OP =  ==, !=, >, >=, <, <=#
 **/

void
npy_BOOL_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        npy_bool in1 = *((npy_bool *)ip1) != 0;
        npy_bool in2 = *((npy_bool *)ip2) != 0;
        *((npy_bool *)op1)= in1 @OP@ in2;
    }
}
/**end repeat**/


/**begin repeat
 * #kind = logical_and, logical_or#
 * #OP =  &&, ||#
 * #SC =  ==, !=#
 **/

void
npy_BOOL_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    if(IS_BINARY_REDUCE) {
        BINARY_REDUCE_LOOP(npy_bool) {
            const npy_bool in2 = *(npy_bool *)ip2;
            io1 = io1 @OP@ in2;
            if (io1 @SC@ 0) {
                break;
            }
        }
        *((npy_bool *)iop1) = io1;
    }
    else {
        BINARY_LOOP {
            const npy_bool in1 = *(npy_bool *)ip1;
            const npy_bool in2 = *(npy_bool *)ip2;
            *((npy_bool *)op1) = in1 @OP@ in2;
        }
    }
}
/**end repeat**/


void
npy_BOOL_logical_xor(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        npy_bool in1 = *((npy_bool *)ip1) != 0;
        npy_bool in2 = *((npy_bool *)ip2) != 0;
        *((npy_bool *)op1)= (in1 && !in2) || (!in1 && in2);
    }
}

/**begin repeat
 * #kind = maximum, minimum#
 * #OP =  >, <#
 **/
void
npy_BOOL_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        npy_bool in1 = *((npy_bool *)ip1) != 0;
        npy_bool in2 = *((npy_bool *)ip2) != 0;
        *((npy_bool *)op1) = (in1 @OP@ in2) ? in1 : in2;
    }
}
/**end repeat**/

/**begin repeat
 * #kind = absolute, logical_not#
 * #OP =  !=, ==#
 **/
void
npy_BOOL_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        npy_bool in1 = *(npy_bool *)ip1;
        *((npy_bool *)op1) = in1 @OP@ 0;
    }
}
/**end repeat**/

void
npy_BOOL_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    OUTPUT_LOOP {
        *((npy_bool *)op1) = 1;
    }
}


/*
 *****************************************************************************
 **                           INTEGER LOOPS
 *****************************************************************************
 */

#define byte npy_byte
#define ubyte npy_ubyte
#define short npy_short
#define ushort npy_ushort
#define uint npy_uint
#define ulong npy_ulong
#define longlong npy_longlong
#define ulonglong npy_ulonglong


/**begin repeat
 * #type = byte, short, int, long, longlong#
 * #TYPE = BYTE, SHORT, INT, LONG, LONGLONG#
 * #ftype = float, float, double, double, double#
 */

/**begin repeat1
 * both signed and unsigned integer types
 * #s = , u#
 * #S = , U#
 */

#define npy_@S@@TYPE@_floor_divide npy_@S@@TYPE@_divide
#define npy_@S@@TYPE@_fmax npy_@S@@TYPE@_maximum
#define npy_@S@@TYPE@_fmin npy_@S@@TYPE@_minimum

void
npy_@S@@TYPE@_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    OUTPUT_LOOP {
        *((@s@@type@ *)op1) = 1;
    }
}

void
npy_@S@@TYPE@_square(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    UNARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        *((@s@@type@ *)op1) = in1*in1;
    }
}

void
npy_@S@@TYPE@_reciprocal(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    UNARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        *((@s@@type@ *)op1) = (@s@@type@)(1.0/in1);
    }
}

void
npy_@S@@TYPE@_conjugate(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        *((@s@@type@ *)op1) = in1;
    }
}

void
npy_@S@@TYPE@_negative(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        *((@s@@type@ *)op1) = (@s@@type@)(-(@type@)in1);
    }
}

void
npy_@S@@TYPE@_logical_not(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        *((npy_bool *)op1) = !in1;
    }
}

void
npy_@S@@TYPE@_invert(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        *((@s@@type@ *)op1) = ~in1;
    }
}

/**begin repeat2
 * Arithmetic
 * #kind = add, subtract, multiply, bitwise_and, bitwise_or, bitwise_xor,
 *          left_shift, right_shift#
 * #OP = +, -,*, &, |, ^, <<, >>#
 */
void
npy_@S@@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    if(IS_BINARY_REDUCE) {
        BINARY_REDUCE_LOOP(@s@@type@) {
            io1 @OP@= *(@s@@type@ *)ip2;
        }
        *((@s@@type@ *)iop1) = io1;
    }
    else {
        BINARY_LOOP {
            const @s@@type@ in1 = *(@s@@type@ *)ip1;
            const @s@@type@ in2 = *(@s@@type@ *)ip2;
            *((@s@@type@ *)op1) = in1 @OP@ in2;
        }
    }
}
/**end repeat2**/

/**begin repeat2
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal,
 *         logical_and, logical_or#
 * #OP =  ==, !=, >, >=, <, <=, &&, ||#
 */
void
npy_@S@@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        const @s@@type@ in2 = *(@s@@type@ *)ip2;
        *((npy_bool *)op1) = in1 @OP@ in2;
    }
}
/**end repeat2**/

void
npy_@S@@TYPE@_logical_xor(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        const @s@@type@ in2 = *(@s@@type@ *)ip2;
        *((npy_bool *)op1)= (in1 && !in2) || (!in1 && in2);
    }
}

/**begin repeat2
 * #kind = maximum, minimum#
 * #OP =  >, <#
 **/
void
npy_@S@@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        const @s@@type@ in2 = *(@s@@type@ *)ip2;
        *((@s@@type@ *)op1) = (in1 @OP@ in2) ? in1 : in2;
    }
}
/**end repeat2**/

void
npy_@S@@TYPE@_true_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const double in1 = (double)(*(@s@@type@ *)ip1);
        const double in2 = (double)(*(@s@@type@ *)ip2);
        *((double *)op1) = in1 / in2;
    }
}

void
npy_@S@@TYPE@_power(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @ftype@ in1 = (@ftype@)*(@s@@type@ *)ip1;
        const @ftype@ in2 = (@ftype@)*(@s@@type@ *)ip2;
        *((@s@@type@ *)op1) = (@s@@type@) pow(in1, in2);
    }
}

void
npy_@S@@TYPE@_fmod(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @s@@type@ in1 = *(@s@@type@ *)ip1;
        const @s@@type@ in2 = *(@s@@type@ *)ip2;
        if (in2 == 0) {
            generate_divbyzero_error();
            *((@s@@type@ *)op1) = 0;
        }
        else {
            *((@s@@type@ *)op1)= in1 % in2;
        }

    }
}

/**end repeat1**/

void
npy_U@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const u@type@ in1 = *(u@type@ *)ip1;
        *((u@type@ *)op1) = in1;
    }
}

void
npy_@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = (in1 >= 0) ? in1 : -in1;
    }
}

void
npy_U@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const u@type@ in1 = *(u@type@ *)ip1;
        *((u@type@ *)op1) = in1 > 0 ? 1 : 0;
    }
}

void
npy_@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = in1 > 0 ? 1 : (in1 < 0 ? -1 : 0);
    }
}

void
npy_@TYPE@_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        /*
         * FIXME: On x86 at least, dividing the smallest representable integer
         * by -1 causes a SIFGPE (division overflow). We treat this case here
         * (to avoid a SIGFPE crash at python level), but a good solution would
         * be to treat integer division problems separately from FPU exceptions
         * (i.e. fixing generate_divbyzero_error()).
         */
        if (in2 == 0 || (in1 == NPY_MIN_@TYPE@ && in2 == -1)) {
            generate_divbyzero_error();
            *((@type@ *)op1) = 0;
        }
        else if (((in1 > 0) != (in2 > 0)) && (in1 % in2 != 0)) {
            *((@type@ *)op1) = in1/in2 - 1;
        }
        else {
            *((@type@ *)op1) = in1/in2;
        }
    }
}

void
npy_U@TYPE@_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const u@type@ in1 = *(u@type@ *)ip1;
        const u@type@ in2 = *(u@type@ *)ip2;
        if (in2 == 0) {
            generate_divbyzero_error();
            *((u@type@ *)op1) = 0;
        }
        else {
            *((u@type@ *)op1)= in1/in2;
        }
    }
}

void
npy_@TYPE@_remainder(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        if (in2 == 0) {
            generate_divbyzero_error();
            *((@type@ *)op1) = 0;
        }
        else {
            /* handle mixed case the way Python does */
            const @type@ rem = in1 % in2;
            if ((in1 > 0) == (in2 > 0) || rem == 0) {
                *((@type@ *)op1) = rem;
            }
            else {
                *((@type@ *)op1) = rem + in2;
            }
        }
    }
}

void
npy_U@TYPE@_remainder(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const u@type@ in1 = *(u@type@ *)ip1;
        const u@type@ in2 = *(u@type@ *)ip2;
        if (in2 == 0) {
            generate_divbyzero_error();
            *((@type@ *)op1) = 0;
        }
        else {
            *((@type@ *)op1) = in1 % in2;
        }
    }
}

/**end repeat**/

#undef byte
#undef ubyte


/*
 *****************************************************************************
 **                           DATETIME LOOPS                                **
 *****************************************************************************
 */

/**begin repeat
 * #type = npy_datetime, npy_timedelta#
 * #TYPE = DATETIME, TIMEDELTA#
 * #ftype = double, double#
 */

void
npy_@TYPE@_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    OUTPUT_LOOP {
        *((@type@ *)op1) = 1;
    }
}

void
npy_@TYPE@_negative(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = (@type@)(-(@type@)in1);
    }
}

void
npy_@TYPE@_logical_not(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((npy_bool *)op1) = !in1;
    }
}


/**begin repeat1
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal,
 *         logical_and, logical_or#
 * #OP =  ==, !=, >, >=, <, <=, &&, ||#
 */
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((npy_bool *)op1) = in1 @OP@ in2;
    }
}
/**end repeat1**/

void
npy_@TYPE@_logical_xor(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((npy_bool *)op1)= (in1 && !in2) || (!in1 && in2);
    }
}

/**begin repeat1
 * #kind = maximum, minimum#
 * #OP =  >, <#
 **/
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((@type@ *)op1) = (in1 @OP@ in2) ? in1 : in2;
    }
}
/**end repeat1**/

void
npy_@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = (in1 >= 0) ? in1 : -in1;
    }
}

void
npy_@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = in1 > 0 ? 1 : (in1 < 0 ? -1 : 0);
    }
}

/**end repeat**/

/* FIXME: implement the following correctly using the metadata:  data is the
   sequence of ndarrays in the same order as args.
 */
void
npy_DATETIME_Mm_M_add(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    BINARY_LOOP {
        const npy_datetime in1 = *(npy_datetime *)ip1;
        const npy_timedelta in2 = *(npy_timedelta *)ip2;
        *((npy_datetime *)op1) = in1 + in2;
    }
}

void
npy_DATETIME_mM_M_add(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const npy_timedelta in1 = *(npy_timedelta *)ip1;
        const npy_datetime in2 = *(npy_datetime *)ip2;
        *((npy_datetime *)op1) = in1 + in2;
    }
}

void
npy_TIMEDELTA_mm_m_add(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const npy_timedelta in1 = *(npy_timedelta *)ip1;
        const npy_timedelta in2 = *(npy_timedelta *)ip2;
        *((npy_timedelta *)op1) = in1 + in2;
    }
}

void
npy_DATETIME_Mm_M_subtract(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const npy_datetime in1 = *(npy_datetime *)ip1;
        const npy_timedelta in2 = *(npy_timedelta *)ip2;
        *((npy_datetime *)op1) = in1 - in2;
    }
}

void
npy_DATETIME_MM_m_subtract(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const npy_datetime in1 = *(npy_datetime *)ip1;
        const npy_datetime in2 = *(npy_datetime *)ip2;
        *((npy_timedelta *)op1) = in1 - in2;
    }
}

void
npy_TIMEDELTA_mm_m_subtract(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const npy_timedelta in1 = *(npy_timedelta *)ip1;
        const npy_timedelta in2 = *(npy_timedelta *)ip2;
        *((npy_timedelta *)op1) = in1 - in2;
    }
}


/*
 *****************************************************************************
 **                             FLOAT LOOPS                                 **
 *****************************************************************************
 */


/**begin repeat
 * Float types
 *  #type = float, double, npy_longdouble#
 *  #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 *  #c = f, , l#
 *  #C = F, , L#
 */


/**begin repeat1
 * Arithmetic
 * # kind = add, subtract, multiply, divide#
 * # OP = +, -, *, /#
 */
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    if(IS_BINARY_REDUCE) {
        BINARY_REDUCE_LOOP(@type@) {
            io1 @OP@= *(@type@ *)ip2;
        }
        *((@type@ *)iop1) = io1;
    }
    else {
        BINARY_LOOP {
            const @type@ in1 = *(@type@ *)ip1;
            const @type@ in2 = *(@type@ *)ip2;
            *((@type@ *)op1) = in1 @OP@ in2;
        }
    }
}
/**end repeat1**/

/**end repeat1**/

/**begin repeat1
 * #kind = equal, not_equal, less, less_equal, greater, greater_equal,
 *        logical_and, logical_or#
 * #OP = ==, !=, <, <=, >, >=, &&, ||#
 */
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((npy_bool *)op1) = in1 @OP@ in2;
    }
}
/**end repeat1**/

void
npy_@TYPE@_logical_xor(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((npy_bool *)op1)= (in1 && !in2) || (!in1 && in2);
    }
}

void
npy_@TYPE@_logical_not(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((npy_bool *)op1) = !in1;
    }
}

/**begin repeat1
 * #kind = isnan, isinf, isfinite, signbit#
 * #func = npy_isnan, npy_isinf, npy_isfinite, npy_signbit#
 **/
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((npy_bool *)op1) = @func@(in1) != 0;
    }
}
/**end repeat1**/

void
npy_@TYPE@_spacing(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = npy_spacing@c@(in1);
    }
}

void
npy_@TYPE@_copysign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((@type@ *)op1)= npy_copysign@c@(in1, in2);
    }
}

void
npy_@TYPE@_nextafter(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((@type@ *)op1)= npy_nextafter@c@(in1, in2);
    }
}

/**begin repeat1
 * #kind = maximum, minimum#
 * #OP =  >=, <=#
 **/
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    /*  */
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((@type@ *)op1) = (in1 @OP@ in2 || npy_isnan(in1)) ? in1 : in2;
    }
}
/**end repeat1**/

/**begin repeat1
 * #kind = fmax, fmin#
 * #OP =  >=, <=#
 **/
void
npy_@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    /*  */
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((@type@ *)op1) = (in1 @OP@ in2 || npy_isnan(in2)) ? in1 : in2;
    }
}
/**end repeat1**/

void
npy_@TYPE@_floor_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        *((@type@ *)op1) = npy_floor@c@(in1/in2);
    }
}

void
npy_@TYPE@_remainder(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        const @type@ res = npy_fmod@c@(in1,in2);
        if (res && ((in2 < 0) != (res < 0))) {
            *((@type@ *)op1) = res + in2;
        }
        else {
            *((@type@ *)op1) = res;
        }
    }
}

void
npy_@TYPE@_square(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = in1*in1;
    }
}

void
npy_@TYPE@_reciprocal(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = 1/in1;
    }
}

void
npy_@TYPE@_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    OUTPUT_LOOP {
        *((@type@ *)op1) = 1;
    }
}

void
npy_@TYPE@_conjugate(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = in1;
    }
}

void
npy_@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ tmp = in1 > 0 ? in1 : -in1;
        /* add 0 to clear -0.0 */
        *((@type@ *)op1) = tmp + 0;
    }
}

void
npy_@TYPE@_negative(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = -in1;
    }
}

void
npy_@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    /* Sign of nan is nan */
    UNARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = in1 > 0 ? 1 : (in1 < 0 ? -1 : (in1 == 0 ? 0 : in1));
    }
}

void
npy_@TYPE@_modf(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP_TWO_OUT {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = npy_modf@c@(in1, (@type@ *)op2);
    }
}

#if NPY_HAVE_DECL_FREXP@C@
void
npy_@TYPE@_frexp(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP_TWO_OUT {
        const @type@ in1 = *(@type@ *)ip1;
        *((@type@ *)op1) = frexp@c@(in1, (int *)op2);
    }
}
#endif

#if NPY_HAVE_DECL_LDEXP@C@
void
npy_@TYPE@_ldexp(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const int in2 = *(int *)ip2;
        *((@type@ *)op1) = ldexp@c@(in1, in2);
    }
}
#endif

#define @TYPE@_true_divide @TYPE@_divide

/**end repeat**/


/*
 *****************************************************************************
 **                           COMPLEX LOOPS                                 **
 *****************************************************************************
 */

#define CGE(xr,xi,yr,yi) (xr > yr || (xr == yr && xi >= yi))
#define CLE(xr,xi,yr,yi) (xr < yr || (xr == yr && xi <= yi))
#define CGT(xr,xi,yr,yi) (xr > yr || (xr == yr && xi > yi))
#define CLT(xr,xi,yr,yi) (xr < yr || (xr == yr && xi < yi))
#define CEQ(xr,xi,yr,yi) (xr == yr && xi == yi)
#define CNE(xr,xi,yr,yi) (xr != yr || xi != yi)

/**begin repeat
 * complex types
 * #type = float, double, npy_longdouble#
 * #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 * #c = f, , l#
 * #C = F, , L#
 */

/**begin repeat1
 * arithmetic
 * #kind = add, subtract#
 * #OP = +, -#
 */
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        ((@type@ *)op1)[0] = in1r @OP@ in2r;
        ((@type@ *)op1)[1] = in1i @OP@ in2i;
    }
}
/**end repeat1**/

void
npy_C@TYPE@_multiply(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        ((@type@ *)op1)[0] = in1r*in2r - in1i*in2i;
        ((@type@ *)op1)[1] = in1r*in2i + in1i*in2r;
    }
}

void
npy_C@TYPE@_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        if (npy_fabs@c@(in2r) >= npy_fabs@c@(in2i)) {
            const @type@ rat = in2i/in2r;
            const @type@ scl = 1.0@c@/(in2r + in2i*rat);
            ((@type@ *)op1)[0] = (in1r + in1i*rat)*scl;
            ((@type@ *)op1)[1] = (in1i - in1r*rat)*scl;
        }
        else {
            const @type@ rat = in2r/in2i;
            const @type@ scl = 1.0@c@/(in2i + in2r*rat);
            ((@type@ *)op1)[0] = (in1r*rat + in1i)*scl;
            ((@type@ *)op1)[1] = (in1i*rat - in1r)*scl;
        }
    }
}

void
npy_C@TYPE@_floor_divide(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        if (npy_fabs@c@(in2r) >= npy_fabs@c@(in2i)) {
            const @type@ rat = in2i/in2r;
            ((@type@ *)op1)[0] = npy_floor@c@((in1r + in1i*rat)/(in2r + in2i*rat));
            ((@type@ *)op1)[1] = 0;
        }
        else {
            const @type@ rat = in2r/in2i;
            ((@type@ *)op1)[0] = npy_floor@c@((in1r*rat + in1i)/(in2i + in2r*rat));
            ((@type@ *)op1)[1] = 0;
        }
    }
}

/**begin repeat1
 * #kind= greater, greater_equal, less, less_equal, equal, not_equal#
 * #OP = CGT, CGE, CLT, CLE, CEQ, CNE#
 */
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        *((npy_bool *)op1) = @OP@(in1r,in1i,in2r,in2i);
    }
}
/**end repeat1**/

/**begin repeat1
   #kind = logical_and, logical_or#
   #OP1 = ||, ||#
   #OP2 = &&, ||#
*/
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        *((npy_bool *)op1) = (in1r @OP1@ in1i) @OP2@ (in2r @OP1@ in2i);
    }
}
/**end repeat1**/

void
npy_C@TYPE@_logical_xor(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        const npy_bool tmp1 = (in1r || in1i);
        const npy_bool tmp2 = (in2r || in2i);
        *((npy_bool *)op1) = (tmp1 && !tmp2) || (!tmp1 && tmp2);
    }
}

void
npy_C@TYPE@_logical_not(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        *((npy_bool *)op1) = !(in1r || in1i);
    }
}

/**begin repeat1
 * #kind = isnan, isinf, isfinite#
 * #func = npy_isnan, npy_isinf, npy_isfinite#
 * #OP = ||, ||, &&#
 **/
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        *((npy_bool *)op1) = @func@(in1r) @OP@ @func@(in1i);
    }
}
/**end repeat1**/

void
npy_C@TYPE@_square(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    UNARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        ((@type@ *)op1)[0] = in1r*in1r - in1i*in1i;
        ((@type@ *)op1)[1] = in1r*in1i + in1i*in1r;
    }
}

void
npy_C@TYPE@_reciprocal(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    UNARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        if (npy_fabs@c@(in1i) <= npy_fabs@c@(in1r)) {
            const @type@ r = in1i/in1r;
            const @type@ d = in1r + in1i*r;
            ((@type@ *)op1)[0] = 1/d;
            ((@type@ *)op1)[1] = -r/d;
        } else {
            const @type@ r = in1r/in1i;
            const @type@ d = in1r*r + in1i;
            ((@type@ *)op1)[0] = r/d;
            ((@type@ *)op1)[1] = -1/d;
        }
    }
}

void
npy_C@TYPE@_ones_like(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))
{
    OUTPUT_LOOP {
        ((@type@ *)op1)[0] = 1;
        ((@type@ *)op1)[1] = 0;
    }
}

void
npy_C@TYPE@_conjugate(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func)) {
    UNARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        ((@type@ *)op1)[0] = in1r;
        ((@type@ *)op1)[1] = -in1i;
    }
}

void
npy_C@TYPE@_absolute(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        *((@type@ *)op1) = npy_hypot@c@(in1r, in1i);
    }
}

void
npy_C@TYPE@__arg(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    UNARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        *((@type@ *)op1) = npy_atan2@c@(in1i, in1r);
    }
}

void
npy_C@TYPE@_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    /* fixme: sign of nan is currently 0 */
    UNARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        ((@type@ *)op1)[0] = CGT(in1r, in1i, 0, 0) ?  1 :
                            (CLT(in1r, in1i, 0, 0) ? -1 :
                            (CEQ(in1r, in1i, 0, 0) ?  0 : NPY_NAN@C@));
        ((@type@ *)op1)[1] = 0;
    }
}

/**begin repeat1
 * #kind = maximum, minimum#
 * #OP = CGE, CLE#
 */
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        if (@OP@(in1r, in1i, in2r, in2i) || npy_isnan(in1r) || npy_isnan(in1i)) {
            ((@type@ *)op1)[0] = in1r;
            ((@type@ *)op1)[1] = in1i;
        }
        else {
            ((@type@ *)op1)[0] = in2r;
            ((@type@ *)op1)[1] = in2i;
        }
    }
}
/**end repeat1**/

/**begin repeat1
 * #kind = fmax, fmin#
 * #OP = CGE, CLE#
 */
void
npy_C@TYPE@_@kind@(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    BINARY_LOOP {
        const @type@ in1r = ((@type@ *)ip1)[0];
        const @type@ in1i = ((@type@ *)ip1)[1];
        const @type@ in2r = ((@type@ *)ip2)[0];
        const @type@ in2i = ((@type@ *)ip2)[1];
        if (@OP@(in1r, in1i, in2r, in2i) || npy_isnan(in2r) || npy_isnan(in2i)) {
            ((@type@ *)op1)[0] = in1r;
            ((@type@ *)op1)[1] = in1i;
        }
        else {
            ((@type@ *)op1)[0] = in2r;
            ((@type@ *)op1)[1] = in2i;
        }
    }
}
/**end repeat1**/

#define npy_C@TYPE@_true_divide npy_C@TYPE@_divide

/**end repeat**/

#undef CGE
#undef CLE
#undef CGT
#undef CLT
#undef CEQ
#undef CNE



/* Function array definitions.  Each set of 3 arrays defines the loops to be called
   for each type for every function defined in the core.  That is, this is the set of
   functions where at least some of the functionality is defined in the core; external
   code is freee to register additional functions.

   At least one type entry (Object), and sometimes many more, are left null in these
   arrays.  This is because the core does not have an implementation for that type. 
   An interface layer is free to modify these arrays and fill in or change any entries.

   These arrays, once filled in, are used with NpyUFunc_FromFuncAndData to create a
   new ufunc object. */
NDARRAY_API extern NpyUFuncGenericFunction npy__arg_functions[] = { npy_CFLOAT__arg, npy_CDOUBLE__arg, npy_CLONGDOUBLE__arg };
NDARRAY_API extern void *npy__arg_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_npy__arg_signatures[] = { NPY_CFLOAT, NPY_FLOAT, NPY_CDOUBLE, NPY_DOUBLE, NPY_CLONGDOUBLE, NPY_LONGDOUBLE };
NDARRAY_API extern NpyUFuncGenericFunction npy_absolute_functions[] = { npy_BOOL_absolute, npy_BYTE_absolute, npy_UBYTE_absolute, npy_SHORT_absolute, npy_USHORT_absolute, npy_INT_absolute, npy_UINT_absolute, npy_LONG_absolute, npy_ULONG_absolute, npy_LONGLONG_absolute, npy_ULONGLONG_absolute, npy_FLOAT_absolute, npy_DOUBLE_absolute, npy_LONGDOUBLE_absolute, npy_DATETIME_absolute, npy_TIMEDELTA_absolute, npy_CFLOAT_absolute, npy_CDOUBLE_absolute, npy_CLONGDOUBLE_absolute, NULL };
NDARRAY_API extern void *npy_absolute_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_absolute_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_CFLOAT, NPY_FLOAT, NPY_CDOUBLE, NPY_DOUBLE, NPY_CLONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_add_functions[] = { npy_BOOL_add, npy_BYTE_add, npy_UBYTE_add, npy_SHORT_add, npy_USHORT_add, npy_INT_add, npy_UINT_add, npy_LONG_add, npy_ULONG_add, npy_LONGLONG_add, npy_ULONGLONG_add, npy_FLOAT_add, npy_DOUBLE_add, npy_LONGDOUBLE_add, npy_CFLOAT_add, npy_CDOUBLE_add, npy_CLONGDOUBLE_add, npy_DATETIME_Mm_M_add, npy_TIMEDELTA_mm_m_add, npy_DATETIME_mM_M_add, NULL };
NDARRAY_API extern void *npy_add_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_add_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_DATETIME, NPY_TIMEDELTA, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_DATETIME, NPY_DATETIME, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_arccos_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_arccos_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arccos" };
NDARRAY_API extern char npy_arccos_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_arccosh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_arccosh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arccosh" };
NDARRAY_API extern char npy_arccosh_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_arcsin_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_arcsin_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arcsin" };
NDARRAY_API extern char npy_arcsin_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_arcsinh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_arcsinh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arcsinh" };
NDARRAY_API extern char npy_arcsinh_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_arctan_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_arctan_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arctan" };
NDARRAY_API extern char npy_arctan_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_arctan2_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_arctan2_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arctan2" };
NDARRAY_API extern char npy_arctan2_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_arctanh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_arctanh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arctanh" };
NDARRAY_API extern char npy_arctanh_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_bitwise_and_functions[] = { npy_BOOL_bitwise_and, npy_BYTE_bitwise_and, npy_UBYTE_bitwise_and, npy_SHORT_bitwise_and, npy_USHORT_bitwise_and, npy_INT_bitwise_and, npy_UINT_bitwise_and, npy_LONG_bitwise_and, npy_ULONG_bitwise_and, npy_LONGLONG_bitwise_and, npy_ULONGLONG_bitwise_and, NULL };
NDARRAY_API extern void *npy_bitwise_and_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_bitwise_and_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_bitwise_or_functions[] = { npy_BOOL_bitwise_or, npy_BYTE_bitwise_or, npy_UBYTE_bitwise_or, npy_SHORT_bitwise_or, npy_USHORT_bitwise_or, npy_INT_bitwise_or, npy_UINT_bitwise_or, npy_LONG_bitwise_or, npy_ULONG_bitwise_or, npy_LONGLONG_bitwise_or, npy_ULONGLONG_bitwise_or, NULL };
NDARRAY_API extern void *npy_bitwise_or_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_bitwise_or_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_bitwise_xor_functions[] = { npy_BOOL_bitwise_xor, npy_BYTE_bitwise_xor, npy_UBYTE_bitwise_xor, npy_SHORT_bitwise_xor, npy_USHORT_bitwise_xor, npy_INT_bitwise_xor, npy_UINT_bitwise_xor, npy_LONG_bitwise_xor, npy_ULONG_bitwise_xor, npy_LONGLONG_bitwise_xor, npy_ULONGLONG_bitwise_xor, NULL };
NDARRAY_API extern void *npy_bitwise_xor_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_bitwise_xor_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_ceil_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_ceil_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"ceil" };
NDARRAY_API extern char npy_ceil_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_conjugate_functions[] = { npy_BYTE_conjugate, npy_UBYTE_conjugate, npy_SHORT_conjugate, npy_USHORT_conjugate, npy_INT_conjugate, npy_UINT_conjugate, npy_LONG_conjugate, npy_ULONG_conjugate, npy_LONGLONG_conjugate, npy_ULONGLONG_conjugate, npy_FLOAT_conjugate, npy_DOUBLE_conjugate, npy_LONGDOUBLE_conjugate, npy_CFLOAT_conjugate, npy_CDOUBLE_conjugate, npy_CLONGDOUBLE_conjugate, NULL };
NDARRAY_API extern void *npy_conjugate_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"conjugate" };
NDARRAY_API extern char npy_conjugate_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_copysign_functions[] = { npy_FLOAT_copysign, npy_DOUBLE_copysign, npy_LONGDOUBLE_copysign };
NDARRAY_API extern void *npy_copysign_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_copysign_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE };
NDARRAY_API extern NpyUFuncGenericFunction npy_cos_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_cos_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"cos" };
NDARRAY_API extern char npy_cos_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_cosh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_cosh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"cosh" };
NDARRAY_API extern char npy_cosh_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_deg2rad_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_deg2rad_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"deg2rad" };
NDARRAY_API extern char npy_deg2rad_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_degrees_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_degrees_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"degrees" };
NDARRAY_API extern char npy_degrees_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_divide_functions[] = { npy_BYTE_divide, npy_UBYTE_divide, npy_SHORT_divide, npy_USHORT_divide, npy_INT_divide, npy_UINT_divide, npy_LONG_divide, npy_ULONG_divide, npy_LONGLONG_divide, npy_ULONGLONG_divide, npy_FLOAT_divide, npy_DOUBLE_divide, npy_LONGDOUBLE_divide, npy_CFLOAT_divide, npy_CDOUBLE_divide, npy_CLONGDOUBLE_divide, NULL };
NDARRAY_API extern void *npy_divide_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_divide_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_equal_functions[] = { npy_BOOL_equal, npy_BYTE_equal, npy_UBYTE_equal, npy_SHORT_equal, npy_USHORT_equal, npy_INT_equal, npy_UINT_equal, npy_LONG_equal, npy_ULONG_equal, npy_LONGLONG_equal, npy_ULONGLONG_equal, npy_FLOAT_equal, npy_DOUBLE_equal, npy_LONGDOUBLE_equal, npy_CFLOAT_equal, npy_CDOUBLE_equal, npy_CLONGDOUBLE_equal, NULL, npy_DATETIME_equal, npy_TIMEDELTA_equal };
NDARRAY_API extern void *npy_equal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_equal_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_exp_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_exp_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"exp" };
NDARRAY_API extern char npy_exp_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_exp2_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_exp2_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"exp2" };
NDARRAY_API extern char npy_exp2_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_expm1_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_expm1_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"expm1" };
NDARRAY_API extern char npy_expm1_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_fabs_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_fabs_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"fabs" };
NDARRAY_API extern char npy_fabs_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_floor_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_floor_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"floor" };
NDARRAY_API extern char npy_floor_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_floor_divide_functions[] = { npy_BYTE_floor_divide, npy_UBYTE_floor_divide, npy_SHORT_floor_divide, npy_USHORT_floor_divide, npy_INT_floor_divide, npy_UINT_floor_divide, npy_LONG_floor_divide, npy_ULONG_floor_divide, npy_LONGLONG_floor_divide, npy_ULONGLONG_floor_divide, npy_FLOAT_floor_divide, npy_DOUBLE_floor_divide, npy_LONGDOUBLE_floor_divide, npy_CFLOAT_floor_divide, npy_CDOUBLE_floor_divide, npy_CLONGDOUBLE_floor_divide, NULL };
NDARRAY_API extern void *npy_floor_divide_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_floor_divide_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_fmax_functions[] = { npy_BOOL_fmax, npy_BYTE_fmax, npy_UBYTE_fmax, npy_SHORT_fmax, npy_USHORT_fmax, npy_INT_fmax, npy_UINT_fmax, npy_LONG_fmax, npy_ULONG_fmax, npy_LONGLONG_fmax, npy_ULONGLONG_fmax, npy_FLOAT_fmax, npy_DOUBLE_fmax, npy_LONGDOUBLE_fmax, npy_CFLOAT_fmax, npy_CDOUBLE_fmax, npy_CLONGDOUBLE_fmax, npy_DATETIME_fmax, npy_TIMEDELTA_fmax, NULL };
NDARRAY_API extern void *npy_fmax_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_fmax_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_DATETIME, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_fmin_functions[] = { npy_BOOL_fmin, npy_BYTE_fmin, npy_UBYTE_fmin, npy_SHORT_fmin, npy_USHORT_fmin, npy_INT_fmin, npy_UINT_fmin, npy_LONG_fmin, npy_ULONG_fmin, npy_LONGLONG_fmin, npy_ULONGLONG_fmin, npy_FLOAT_fmin, npy_DOUBLE_fmin, npy_LONGDOUBLE_fmin, npy_CFLOAT_fmin, npy_CDOUBLE_fmin, npy_CLONGDOUBLE_fmin, npy_DATETIME_fmin, npy_TIMEDELTA_fmin, NULL };
NDARRAY_API extern void *npy_fmin_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_fmin_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_DATETIME, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_fmod_functions[] = { npy_BYTE_fmod, npy_UBYTE_fmod, npy_SHORT_fmod, npy_USHORT_fmod, npy_INT_fmod, npy_UINT_fmod, npy_LONG_fmod, npy_ULONG_fmod, npy_LONGLONG_fmod, npy_ULONGLONG_fmod, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_fmod_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"fmod" };
NDARRAY_API extern char npy_fmod_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_greater_functions[] = { npy_BOOL_greater, npy_BYTE_greater, npy_UBYTE_greater, npy_SHORT_greater, npy_USHORT_greater, npy_INT_greater, npy_UINT_greater, npy_LONG_greater, npy_ULONG_greater, npy_LONGLONG_greater, npy_ULONGLONG_greater, npy_FLOAT_greater, npy_DOUBLE_greater, npy_LONGDOUBLE_greater, npy_CFLOAT_greater, npy_CDOUBLE_greater, npy_CLONGDOUBLE_greater, NULL, npy_DATETIME_greater, npy_TIMEDELTA_greater };
NDARRAY_API extern void *npy_greater_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_greater_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_greater_equal_functions[] = { npy_BOOL_greater_equal, npy_BYTE_greater_equal, npy_UBYTE_greater_equal, npy_SHORT_greater_equal, npy_USHORT_greater_equal, npy_INT_greater_equal, npy_UINT_greater_equal, npy_LONG_greater_equal, npy_ULONG_greater_equal, npy_LONGLONG_greater_equal, npy_ULONGLONG_greater_equal, npy_FLOAT_greater_equal, npy_DOUBLE_greater_equal, npy_LONGDOUBLE_greater_equal, npy_CFLOAT_greater_equal, npy_CDOUBLE_greater_equal, npy_CLONGDOUBLE_greater_equal, NULL, npy_DATETIME_greater_equal, npy_TIMEDELTA_greater_equal };
NDARRAY_API extern void *npy_greater_equal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_greater_equal_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_hypot_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_hypot_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"hypot" };
NDARRAY_API extern char npy_hypot_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_invert_functions[] = { npy_BOOL_invert, npy_BYTE_invert, npy_UBYTE_invert, npy_SHORT_invert, npy_USHORT_invert, npy_INT_invert, npy_UINT_invert, npy_LONG_invert, npy_ULONG_invert, npy_LONGLONG_invert, npy_ULONGLONG_invert, NULL };
NDARRAY_API extern void *npy_invert_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_invert_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_isfinite_functions[] = { npy_FLOAT_isfinite, npy_DOUBLE_isfinite, npy_LONGDOUBLE_isfinite, npy_CFLOAT_isfinite, npy_CDOUBLE_isfinite, npy_CLONGDOUBLE_isfinite };
NDARRAY_API extern void *npy_isfinite_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_isfinite_signatures[] = { NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_isinf_functions[] = { npy_FLOAT_isinf, npy_DOUBLE_isinf, npy_LONGDOUBLE_isinf, npy_CFLOAT_isinf, npy_CDOUBLE_isinf, npy_CLONGDOUBLE_isinf };
NDARRAY_API extern void *npy_isinf_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_isinf_signatures[] = { NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_isnan_functions[] = { npy_FLOAT_isnan, npy_DOUBLE_isnan, npy_LONGDOUBLE_isnan, npy_CFLOAT_isnan, npy_CDOUBLE_isnan, npy_CLONGDOUBLE_isnan };
NDARRAY_API extern void *npy_isnan_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_isnan_signatures[] = { NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_left_shift_functions[] = { npy_BYTE_left_shift, npy_UBYTE_left_shift, npy_SHORT_left_shift, npy_USHORT_left_shift, npy_INT_left_shift, npy_UINT_left_shift, npy_LONG_left_shift, npy_ULONG_left_shift, npy_LONGLONG_left_shift, npy_ULONGLONG_left_shift, NULL };
NDARRAY_API extern void *npy_left_shift_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_left_shift_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_less_functions[] = { npy_BOOL_less, npy_BYTE_less, npy_UBYTE_less, npy_SHORT_less, npy_USHORT_less, npy_INT_less, npy_UINT_less, npy_LONG_less, npy_ULONG_less, npy_LONGLONG_less, npy_ULONGLONG_less, npy_FLOAT_less, npy_DOUBLE_less, npy_LONGDOUBLE_less, npy_CFLOAT_less, npy_CDOUBLE_less, npy_CLONGDOUBLE_less, NULL, npy_DATETIME_less, npy_TIMEDELTA_less };
NDARRAY_API extern void *npy_less_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_less_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_less_equal_functions[] = { npy_BOOL_less_equal, npy_BYTE_less_equal, npy_UBYTE_less_equal, npy_SHORT_less_equal, npy_USHORT_less_equal, npy_INT_less_equal, npy_UINT_less_equal, npy_LONG_less_equal, npy_ULONG_less_equal, npy_LONGLONG_less_equal, npy_ULONGLONG_less_equal, npy_FLOAT_less_equal, npy_DOUBLE_less_equal, npy_LONGDOUBLE_less_equal, npy_CFLOAT_less_equal, npy_CDOUBLE_less_equal, npy_CLONGDOUBLE_less_equal, NULL, npy_DATETIME_less_equal, npy_TIMEDELTA_less_equal };
NDARRAY_API extern void *npy_less_equal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_less_equal_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_log_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_log_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"log" };
NDARRAY_API extern char npy_log_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_log10_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_log10_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"log10" };
NDARRAY_API extern char npy_log10_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_log1p_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_log1p_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"log1p" };
NDARRAY_API extern char npy_log1p_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_log2_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_log2_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"log2" };
NDARRAY_API extern char npy_log2_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_logaddexp_functions[] = { NULL, NULL, NULL };
NDARRAY_API extern void *npy_logaddexp_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_logaddexp_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE };
NDARRAY_API extern NpyUFuncGenericFunction npy_logaddexp2_functions[] = { NULL, NULL, NULL };
NDARRAY_API extern void *npy_logaddexp2_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_logaddexp2_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE };
NDARRAY_API extern NpyUFuncGenericFunction npy_logical_and_functions[] = { npy_BOOL_logical_and, npy_BYTE_logical_and, npy_UBYTE_logical_and, npy_SHORT_logical_and, npy_USHORT_logical_and, npy_INT_logical_and, npy_UINT_logical_and, npy_LONG_logical_and, npy_ULONG_logical_and, npy_LONGLONG_logical_and, npy_ULONGLONG_logical_and, npy_FLOAT_logical_and, npy_DOUBLE_logical_and, npy_LONGDOUBLE_logical_and, npy_CFLOAT_logical_and, npy_CDOUBLE_logical_and, npy_CLONGDOUBLE_logical_and, npy_DATETIME_logical_and, npy_TIMEDELTA_logical_and, NULL };
NDARRAY_API extern void *npy_logical_and_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"logical_and" };
NDARRAY_API extern char npy_logical_and_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_logical_not_functions[] = { npy_BOOL_logical_not, npy_BYTE_logical_not, npy_UBYTE_logical_not, npy_SHORT_logical_not, npy_USHORT_logical_not, npy_INT_logical_not, npy_UINT_logical_not, npy_LONG_logical_not, npy_ULONG_logical_not, npy_LONGLONG_logical_not, npy_ULONGLONG_logical_not, npy_FLOAT_logical_not, npy_DOUBLE_logical_not, npy_LONGDOUBLE_logical_not, npy_CFLOAT_logical_not, npy_CDOUBLE_logical_not, npy_CLONGDOUBLE_logical_not, npy_DATETIME_logical_not, npy_TIMEDELTA_logical_not, NULL };
NDARRAY_API extern void *npy_logical_not_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"logical_not" };
NDARRAY_API extern char npy_logical_not_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_BOOL, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_BOOL, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_BOOL, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_logical_or_functions[] = { npy_BOOL_logical_or, npy_BYTE_logical_or, npy_UBYTE_logical_or, npy_SHORT_logical_or, npy_USHORT_logical_or, npy_INT_logical_or, npy_UINT_logical_or, npy_LONG_logical_or, npy_ULONG_logical_or, npy_LONGLONG_logical_or, npy_ULONGLONG_logical_or, npy_FLOAT_logical_or, npy_DOUBLE_logical_or, npy_LONGDOUBLE_logical_or, npy_CFLOAT_logical_or, npy_CDOUBLE_logical_or, npy_CLONGDOUBLE_logical_or, npy_DATETIME_logical_or, npy_TIMEDELTA_logical_or, NULL };
NDARRAY_API extern void *npy_logical_or_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"logical_or" };
NDARRAY_API extern char npy_logical_or_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_logical_xor_functions[] = { npy_BOOL_logical_xor, npy_BYTE_logical_xor, npy_UBYTE_logical_xor, npy_SHORT_logical_xor, npy_USHORT_logical_xor, npy_INT_logical_xor, npy_UINT_logical_xor, npy_LONG_logical_xor, npy_ULONG_logical_xor, npy_LONGLONG_logical_xor, npy_ULONGLONG_logical_xor, npy_FLOAT_logical_xor, npy_DOUBLE_logical_xor, npy_LONGDOUBLE_logical_xor, npy_CFLOAT_logical_xor, npy_CDOUBLE_logical_xor, npy_CLONGDOUBLE_logical_xor, npy_DATETIME_logical_xor, npy_TIMEDELTA_logical_xor, NULL };
NDARRAY_API extern void *npy_logical_xor_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"logical_xor" };
NDARRAY_API extern char npy_logical_xor_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_maximum_functions[] = { npy_BOOL_maximum, npy_BYTE_maximum, npy_UBYTE_maximum, npy_SHORT_maximum, npy_USHORT_maximum, npy_INT_maximum, npy_UINT_maximum, npy_LONG_maximum, npy_ULONG_maximum, npy_LONGLONG_maximum, npy_ULONGLONG_maximum, npy_FLOAT_maximum, npy_DOUBLE_maximum, npy_LONGDOUBLE_maximum, npy_CFLOAT_maximum, npy_CDOUBLE_maximum, npy_CLONGDOUBLE_maximum, npy_DATETIME_maximum, npy_TIMEDELTA_maximum, NULL };
NDARRAY_API extern void *npy_maximum_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_maximum_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_DATETIME, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_minimum_functions[] = { npy_BOOL_minimum, npy_BYTE_minimum, npy_UBYTE_minimum, npy_SHORT_minimum, npy_USHORT_minimum, npy_INT_minimum, npy_UINT_minimum, npy_LONG_minimum, npy_ULONG_minimum, npy_LONGLONG_minimum, npy_ULONGLONG_minimum, npy_FLOAT_minimum, npy_DOUBLE_minimum, npy_LONGDOUBLE_minimum, npy_CFLOAT_minimum, npy_CDOUBLE_minimum, npy_CLONGDOUBLE_minimum, npy_DATETIME_minimum, npy_TIMEDELTA_minimum, NULL };
NDARRAY_API extern void *npy_minimum_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_minimum_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_DATETIME, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_modf_functions[] = { npy_FLOAT_modf, npy_DOUBLE_modf, npy_LONGDOUBLE_modf };
NDARRAY_API extern void *npy_modf_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_modf_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE };
NDARRAY_API extern NpyUFuncGenericFunction npy_multiply_functions[] = { npy_BOOL_multiply, npy_BYTE_multiply, npy_UBYTE_multiply, npy_SHORT_multiply, npy_USHORT_multiply, npy_INT_multiply, npy_UINT_multiply, npy_LONG_multiply, npy_ULONG_multiply, npy_LONGLONG_multiply, npy_ULONGLONG_multiply, npy_FLOAT_multiply, npy_DOUBLE_multiply, npy_LONGDOUBLE_multiply, npy_CFLOAT_multiply, npy_CDOUBLE_multiply, npy_CLONGDOUBLE_multiply, NULL };
NDARRAY_API extern void *npy_multiply_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_multiply_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_negative_functions[] = { npy_BOOL_negative, npy_BYTE_negative, npy_UBYTE_negative, npy_SHORT_negative, npy_USHORT_negative, npy_INT_negative, npy_UINT_negative, npy_LONG_negative, npy_ULONG_negative, npy_LONGLONG_negative, npy_ULONGLONG_negative, npy_FLOAT_negative, npy_DOUBLE_negative, npy_LONGDOUBLE_negative, npy_DATETIME_negative, npy_TIMEDELTA_negative, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_negative_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_negative_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_nextafter_functions[] = { npy_FLOAT_nextafter, npy_DOUBLE_nextafter, npy_LONGDOUBLE_nextafter };
NDARRAY_API extern void *npy_nextafter_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_nextafter_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE };
NDARRAY_API extern NpyUFuncGenericFunction npy_not_equal_functions[] = { npy_BOOL_not_equal, npy_BYTE_not_equal, npy_UBYTE_not_equal, npy_SHORT_not_equal, npy_USHORT_not_equal, npy_INT_not_equal, npy_UINT_not_equal, npy_LONG_not_equal, npy_ULONG_not_equal, npy_LONGLONG_not_equal, npy_ULONGLONG_not_equal, npy_FLOAT_not_equal, npy_DOUBLE_not_equal, npy_LONGDOUBLE_not_equal, npy_CFLOAT_not_equal, npy_CDOUBLE_not_equal, npy_CLONGDOUBLE_not_equal, NULL, npy_DATETIME_not_equal, npy_TIMEDELTA_not_equal };
NDARRAY_API extern void *npy_not_equal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_not_equal_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BOOL, NPY_UBYTE, NPY_UBYTE, NPY_BOOL, NPY_SHORT, NPY_SHORT, NPY_BOOL, NPY_USHORT, NPY_USHORT, NPY_BOOL, NPY_INT, NPY_INT, NPY_BOOL, NPY_UINT, NPY_UINT, NPY_BOOL, NPY_LONG, NPY_LONG, NPY_BOOL, NPY_ULONG, NPY_ULONG, NPY_BOOL, NPY_LONGLONG, NPY_LONGLONG, NPY_BOOL, NPY_ULONGLONG, NPY_ULONGLONG, NPY_BOOL, NPY_FLOAT, NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_BOOL, NPY_CFLOAT, NPY_CFLOAT, NPY_BOOL, NPY_CDOUBLE, NPY_CDOUBLE, NPY_BOOL, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_BOOL, NPY_OBJECT, NPY_OBJECT, NPY_BOOL, NPY_DATETIME, NPY_DATETIME, NPY_BOOL, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_ones_like_functions[] = { npy_BOOL_ones_like, npy_BYTE_ones_like, npy_UBYTE_ones_like, npy_SHORT_ones_like, npy_USHORT_ones_like, npy_INT_ones_like, npy_UINT_ones_like, npy_LONG_ones_like, npy_ULONG_ones_like, npy_LONGLONG_ones_like, npy_ULONGLONG_ones_like, npy_FLOAT_ones_like, npy_DOUBLE_ones_like, npy_LONGDOUBLE_ones_like, npy_CFLOAT_ones_like, npy_CDOUBLE_ones_like, npy_CLONGDOUBLE_ones_like, npy_DATETIME_ones_like, npy_TIMEDELTA_ones_like, NULL };
NDARRAY_API extern void *npy_ones_like_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_ones_like_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_power_functions[] = { npy_BYTE_power, npy_UBYTE_power, npy_SHORT_power, npy_USHORT_power, npy_INT_power, npy_UINT_power, npy_LONG_power, npy_ULONG_power, npy_LONGLONG_power, npy_ULONGLONG_power, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_power_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_power_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_rad2deg_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_rad2deg_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"rad2deg" };
NDARRAY_API extern char npy_rad2deg_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_radians_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_radians_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"radians" };
NDARRAY_API extern char npy_radians_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_reciprocal_functions[] = { npy_BYTE_reciprocal, npy_UBYTE_reciprocal, npy_SHORT_reciprocal, npy_USHORT_reciprocal, npy_INT_reciprocal, npy_UINT_reciprocal, npy_LONG_reciprocal, npy_ULONG_reciprocal, npy_LONGLONG_reciprocal, npy_ULONGLONG_reciprocal, npy_FLOAT_reciprocal, npy_DOUBLE_reciprocal, npy_LONGDOUBLE_reciprocal, npy_CFLOAT_reciprocal, npy_CDOUBLE_reciprocal, npy_CLONGDOUBLE_reciprocal, NULL };
NDARRAY_API extern void *npy_reciprocal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_reciprocal_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_remainder_functions[] = { npy_BYTE_remainder, npy_UBYTE_remainder, npy_SHORT_remainder, npy_USHORT_remainder, npy_INT_remainder, npy_UINT_remainder, npy_LONG_remainder, npy_ULONG_remainder, npy_LONGLONG_remainder, npy_ULONGLONG_remainder, npy_FLOAT_remainder, npy_DOUBLE_remainder, npy_LONGDOUBLE_remainder, NULL };
NDARRAY_API extern void *npy_remainder_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_remainder_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_right_shift_functions[] = { npy_BYTE_right_shift, npy_UBYTE_right_shift, npy_SHORT_right_shift, npy_USHORT_right_shift, npy_INT_right_shift, npy_UINT_right_shift, npy_LONG_right_shift, npy_ULONG_right_shift, npy_LONGLONG_right_shift, npy_ULONGLONG_right_shift, NULL };
NDARRAY_API extern void *npy_right_shift_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_right_shift_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_rint_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_rint_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"rint" };
NDARRAY_API extern char npy_rint_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_sign_functions[] = { npy_BYTE_sign, npy_UBYTE_sign, npy_SHORT_sign, npy_USHORT_sign, npy_INT_sign, npy_UINT_sign, npy_LONG_sign, npy_ULONG_sign, npy_LONGLONG_sign, npy_ULONGLONG_sign, npy_FLOAT_sign, npy_DOUBLE_sign, npy_LONGDOUBLE_sign, npy_CFLOAT_sign, npy_CDOUBLE_sign, npy_CLONGDOUBLE_sign, NULL, npy_DATETIME_sign, npy_TIMEDELTA_sign };
NDARRAY_API extern void *npy_sign_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_sign_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA };
NDARRAY_API extern NpyUFuncGenericFunction npy_signbit_functions[] = { npy_FLOAT_signbit, npy_DOUBLE_signbit, npy_LONGDOUBLE_signbit };
NDARRAY_API extern void *npy_signbit_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_signbit_signatures[] = { NPY_FLOAT, NPY_BOOL, NPY_DOUBLE, NPY_BOOL, NPY_LONGDOUBLE, NPY_BOOL };
NDARRAY_API extern NpyUFuncGenericFunction npy_sin_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_sin_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"sin" };
NDARRAY_API extern char npy_sin_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_sinh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_sinh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"sinh" };
NDARRAY_API extern char npy_sinh_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_spacing_functions[] = { npy_FLOAT_spacing, npy_DOUBLE_spacing, npy_LONGDOUBLE_spacing };
NDARRAY_API extern void *npy_spacing_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_spacing_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE };
NDARRAY_API extern NpyUFuncGenericFunction npy_sqrt_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_sqrt_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"sqrt" };
NDARRAY_API extern char npy_sqrt_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_square_functions[] = { npy_BYTE_square, npy_UBYTE_square, npy_SHORT_square, npy_USHORT_square, npy_INT_square, npy_UINT_square, npy_LONG_square, npy_ULONG_square, npy_LONGLONG_square, npy_ULONGLONG_square, npy_FLOAT_square, npy_DOUBLE_square, npy_LONGDOUBLE_square, npy_CFLOAT_square, npy_CDOUBLE_square, npy_CLONGDOUBLE_square, NULL };
NDARRAY_API extern void *npy_square_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_square_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_subtract_functions[] = { npy_BOOL_subtract, npy_BYTE_subtract, npy_UBYTE_subtract, npy_SHORT_subtract, npy_USHORT_subtract, npy_INT_subtract, npy_UINT_subtract, npy_LONG_subtract, npy_ULONG_subtract, npy_LONGLONG_subtract, npy_ULONGLONG_subtract, npy_FLOAT_subtract, npy_DOUBLE_subtract, npy_LONGDOUBLE_subtract, npy_CFLOAT_subtract, npy_CDOUBLE_subtract, npy_CLONGDOUBLE_subtract, npy_DATETIME_Mm_M_subtract, npy_TIMEDELTA_mm_m_subtract, npy_DATETIME_MM_m_subtract, NULL };
NDARRAY_API extern void *npy_subtract_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_subtract_signatures[] = { NPY_BOOL, NPY_BOOL, NPY_BOOL, NPY_BYTE, NPY_BYTE, NPY_BYTE, NPY_UBYTE, NPY_UBYTE, NPY_UBYTE, NPY_SHORT, NPY_SHORT, NPY_SHORT, NPY_USHORT, NPY_USHORT, NPY_USHORT, NPY_INT, NPY_INT, NPY_INT, NPY_UINT, NPY_UINT, NPY_UINT, NPY_LONG, NPY_LONG, NPY_LONG, NPY_ULONG, NPY_ULONG, NPY_ULONG, NPY_LONGLONG, NPY_LONGLONG, NPY_LONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_ULONGLONG, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_DATETIME, NPY_TIMEDELTA, NPY_DATETIME, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_TIMEDELTA, NPY_DATETIME, NPY_DATETIME, NPY_TIMEDELTA, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_tan_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_tan_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"tan" };
NDARRAY_API extern char npy_tan_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_tanh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_tanh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"tanh" };
NDARRAY_API extern char npy_tanh_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_true_divide_functions[] = { npy_BYTE_true_divide, npy_UBYTE_true_divide, npy_SHORT_true_divide, npy_USHORT_true_divide, npy_INT_true_divide, npy_UINT_true_divide, npy_LONG_true_divide, npy_ULONG_true_divide, npy_LONGLONG_true_divide, npy_ULONGLONG_true_divide, npy_FLOAT_true_divide, npy_DOUBLE_true_divide, npy_LONGDOUBLE_true_divide, npy_CFLOAT_true_divide, npy_CDOUBLE_true_divide, npy_CLONGDOUBLE_true_divide, NULL };
NDARRAY_API extern void *npy_true_divide_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };
NDARRAY_API extern char npy_true_divide_signatures[] = { NPY_BYTE, NPY_BYTE, NPY_DOUBLE, NPY_UBYTE, NPY_UBYTE, NPY_DOUBLE, NPY_SHORT, NPY_SHORT, NPY_DOUBLE, NPY_USHORT, NPY_USHORT, NPY_DOUBLE, NPY_INT, NPY_INT, NPY_DOUBLE, NPY_UINT, NPY_UINT, NPY_DOUBLE, NPY_LONG, NPY_LONG, NPY_DOUBLE, NPY_ULONG, NPY_ULONG, NPY_DOUBLE, NPY_LONGLONG, NPY_LONGLONG, NPY_DOUBLE, NPY_ULONGLONG, NPY_ULONGLONG, NPY_DOUBLE, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_CFLOAT, NPY_CFLOAT, NPY_CFLOAT, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_CLONGDOUBLE, NPY_OBJECT, NPY_OBJECT, NPY_OBJECT };
NDARRAY_API extern NpyUFuncGenericFunction npy_trunc_functions[] = { NULL, NULL, NULL, NULL };
NDARRAY_API extern void *npy_trunc_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"trunc" };
NDARRAY_API extern char npy_trunc_signatures[] = { NPY_FLOAT, NPY_FLOAT, NPY_DOUBLE, NPY_DOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_OBJECT, NPY_OBJECT };

