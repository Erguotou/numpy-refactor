
build/src.win32-2.6/numpy/core/include/numpy/config.h,1211
#define SIZEOF_PY_INTPTR_T SIZEOF_PY_INTPTR_T1,0
#define SIZEOF_PY_LONG_LONG SIZEOF_PY_LONG_LONG2,30
#define MATHLIB MATHLIB3,61
#define HAVE_SINHAVE_SIN4,79
#define HAVE_COSHAVE_COS5,97
#define HAVE_TANHAVE_TAN6,115
#define HAVE_SINHHAVE_SINH7,133
#define HAVE_COSHHAVE_COSH8,152
#define HAVE_TANHHAVE_TANH9,171
#define HAVE_FABSHAVE_FABS10,190
#define HAVE_FLOORHAVE_FLOOR11,209
#define HAVE_CEILHAVE_CEIL12,229
#define HAVE_SQRTHAVE_SQRT13,248
#define HAVE_LOG10HAVE_LOG1014,267
#define HAVE_LOGHAVE_LOG15,287
#define HAVE_EXPHAVE_EXP16,305
#define HAVE_ASINHAVE_ASIN17,323
#define HAVE_ACOSHAVE_ACOS18,342
#define HAVE_ATANHAVE_ATAN19,361
#define HAVE_FMODHAVE_FMOD20,380
#define HAVE_MODFHAVE_MODF21,399
#define HAVE_FREXPHAVE_FREXP22,418
#define HAVE_LDEXPHAVE_LDEXP23,438
#define HAVE_ATAN2HAVE_ATAN224,458
#define HAVE_POWHAVE_POW25,478
#define __NPY_PRIVATE_NO_SIGNAL__NPY_PRIVATE_NO_SIGNAL26,496
#define FORCE_NO_LONG_DOUBLE_FORMATTINGFORCE_NO_LONG_DOUBLE_FORMATTING27,529
#define ENABLE_SEPARATE_COMPILATION ENABLE_SEPARATE_COMPILATION28,570
#define HAVE_LDOUBLE_IEEE_DOUBLE_LE HAVE_LDOUBLE_IEEE_DOUBLE_LE29,609
#define inline inline31,669

build/src.win32-2.6/numpy/core/include/numpy/_numpyconfig.h,1061
#define NPY_SIZEOF_SHORT NPY_SIZEOF_SHORT1,0
#define NPY_SIZEOF_INT NPY_SIZEOF_INT2,39
#define NPY_SIZEOF_LONG NPY_SIZEOF_LONG3,74
#define NPY_SIZEOF_FLOAT NPY_SIZEOF_FLOAT4,111
#define NPY_SIZEOF_COMPLEX_FLOAT NPY_SIZEOF_COMPLEX_FLOAT5,139
#define NPY_SIZEOF_DOUBLE NPY_SIZEOF_DOUBLE6,175
#define NPY_SIZEOF_COMPLEX_DOUBLE NPY_SIZEOF_COMPLEX_DOUBLE7,204
#define NPY_SIZEOF_LONGDOUBLE NPY_SIZEOF_LONGDOUBLE8,242
#define NPY_SIZEOF_COMPLEX_LONGDOUBLE NPY_SIZEOF_COMPLEX_LONGDOUBLE9,275
#define NPY_SIZEOF_PY_INTPTR_T NPY_SIZEOF_PY_INTPTR_T10,317
#define NPY_SIZEOF_PY_LONG_LONG NPY_SIZEOF_PY_LONG_LONG11,351
#define NPY_SIZEOF_LONGLONG NPY_SIZEOF_LONGLONG12,386
#define NPY_NO_SIGNAL NPY_NO_SIGNAL13,417
#define NPY_NO_SMP NPY_NO_SMP14,442
#define NPY_ENABLE_SEPARATE_COMPILATION NPY_ENABLE_SEPARATE_COMPILATION15,464
#define NPY_VISIBILITY_HIDDEN NPY_VISIBILITY_HIDDEN16,507
#define NPY_ABI_VERSION NPY_ABI_VERSION17,539
#define NPY_API_VERSION NPY_API_VERSION18,575
#define __STDC_FORMAT_MACROS __STDC_FORMAT_MACROS21,643

build/src.win32-2.6/numpy/core/include/numpy/__multiarray_api.c,41
void *PyArray_API[] = {PyArray_API6,98

build/src.win32-2.6/numpy/core/include/numpy/__multiarray_api.h,17469
        npy_bool obval;obval6,71
} PyBoolScalarObject;PyBoolScalarObject7,96
NPY_NO_EXPORT PyTypeObject PyArrayMapIter_Type;PyArrayMapIter_Type14,360
NPY_NO_EXPORT PyTypeObject PyArrayNeighborhoodIter_Type;PyArrayNeighborhoodIter_Type15,409
NPY_NO_EXPORT PyBoolScalarObject _PyArrayScalar_BoolValues[2];_PyArrayScalar_BoolValues16,467
    NPY_NO_EXPORT PyTypeObject PyArray_Type;PyArray_Type24,714
    NPY_NO_EXPORT PyTypeObject PyArrayDescr_Type;PyArrayDescr_Type30,875
    NPY_NO_EXPORT PyTypeObject PyArrayFlags_Type;PyArrayFlags_Type36,1041
    NPY_NO_EXPORT PyTypeObject PyArrayIter_Type;PyArrayIter_Type42,1206
    NPY_NO_EXPORT PyTypeObject PyArrayMultiIter_Type;PyArrayMultiIter_Type48,1375
    NPY_NO_EXPORT int NPY_NUMUSERTYPES;NPY_NUMUSERTYPES54,1535
    NPY_NO_EXPORT PyTypeObject PyBoolArrType_Type;PyBoolArrType_Type60,1692
NPY_NO_EXPORT PyBoolScalarObject _PyArrayScalar_BoolValues[2];_PyArrayScalar_BoolValues66,1872
    NPY_NO_EXPORT PyTypeObject PyGenericArrType_Type;PyGenericArrType_Type72,2055
    NPY_NO_EXPORT PyTypeObject PyNumberArrType_Type;PyNumberArrType_Type78,2228
    NPY_NO_EXPORT PyTypeObject PyIntegerArrType_Type;PyIntegerArrType_Type84,2401
    NPY_NO_EXPORT PyTypeObject PySignedIntegerArrType_Type;PySignedIntegerArrType_Type90,2581
    NPY_NO_EXPORT PyTypeObject PyUnsignedIntegerArrType_Type;PyUnsignedIntegerArrType_Type96,2769
    NPY_NO_EXPORT PyTypeObject PyInexactArrType_Type;PyInexactArrType_Type102,2951
    NPY_NO_EXPORT PyTypeObject PyFloatingArrType_Type;PyFloatingArrType_Type108,3126
    NPY_NO_EXPORT PyTypeObject PyComplexFloatingArrType_Type;PyComplexFloatingArrType_Type114,3309
    NPY_NO_EXPORT PyTypeObject PyFlexibleArrType_Type;PyFlexibleArrType_Type120,3492
    NPY_NO_EXPORT PyTypeObject PyCharacterArrType_Type;PyCharacterArrType_Type126,3669
    NPY_NO_EXPORT PyTypeObject PyByteArrType_Type;PyByteArrType_Type132,3842
    NPY_NO_EXPORT PyTypeObject PyShortArrType_Type;PyShortArrType_Type138,4011
    NPY_NO_EXPORT PyTypeObject PyIntArrType_Type;PyIntArrType_Type144,4179
    NPY_NO_EXPORT PyTypeObject PyLongArrType_Type;PyLongArrType_Type150,4346
    NPY_NO_EXPORT PyTypeObject PyLongLongArrType_Type;PyLongLongArrType_Type156,4518
    NPY_NO_EXPORT PyTypeObject PyUByteArrType_Type;PyUByteArrType_Type162,4691
    NPY_NO_EXPORT PyTypeObject PyUShortArrType_Type;PyUShortArrType_Type168,4862
    NPY_NO_EXPORT PyTypeObject PyUIntArrType_Type;PyUIntArrType_Type174,5032
    NPY_NO_EXPORT PyTypeObject PyULongArrType_Type;PyULongArrType_Type180,5201
    NPY_NO_EXPORT PyTypeObject PyULongLongArrType_Type;PyULongLongArrType_Type186,5375
    NPY_NO_EXPORT PyTypeObject PyFloatArrType_Type;PyFloatArrType_Type192,5549
    NPY_NO_EXPORT PyTypeObject PyDoubleArrType_Type;PyDoubleArrType_Type198,5720
    NPY_NO_EXPORT PyTypeObject PyLongDoubleArrType_Type;PyLongDoubleArrType_Type204,5896
    NPY_NO_EXPORT PyTypeObject PyCFloatArrType_Type;PyCFloatArrType_Type210,6072
    NPY_NO_EXPORT PyTypeObject PyCDoubleArrType_Type;PyCDoubleArrType_Type216,6245
    NPY_NO_EXPORT PyTypeObject PyCLongDoubleArrType_Type;PyCLongDoubleArrType_Type222,6423
    NPY_NO_EXPORT PyTypeObject PyObjectArrType_Type;PyObjectArrType_Type228,6600
    NPY_NO_EXPORT PyTypeObject PyStringArrType_Type;PyStringArrType_Type234,6772
    NPY_NO_EXPORT PyTypeObject PyUnicodeArrType_Type;PyUnicodeArrType_Type240,6945
    NPY_NO_EXPORT PyTypeObject PyVoidArrType_Type;PyVoidArrType_Type246,7116
    NPY_NO_EXPORT PyTypeObject PyTimeIntegerArrType_Type;PyTimeIntegerArrType_Type252,7291
    NPY_NO_EXPORT PyTypeObject PyDatetimeArrType_Type;PyDatetimeArrType_Type258,7470
    NPY_NO_EXPORT PyTypeObject PyTimedeltaArrType_Type;PyTimedeltaArrType_Type264,7647
#define PyArray_API PyArray_API629,22985
void **PyArray_API;PyArray_API636,23163
static void **PyArray_API=NULL;PyArray_API638,23191
#define PyArray_GetNDArrayCVersion PyArray_GetNDArrayCVersion642,23242
#define PyArray_Type PyArray_Type645,23344
#define PyArrayDescr_Type PyArrayDescr_Type646,23400
#define PyArrayFlags_Type PyArrayFlags_Type647,23461
#define PyArrayIter_Type PyArrayIter_Type648,23522
#define PyArrayMultiIter_Type PyArrayMultiIter_Type649,23582
#define NPY_NUMUSERTYPES NPY_NUMUSERTYPES650,23647
#define PyBoolArrType_Type PyBoolArrType_Type651,23698
#define _PyArrayScalar_BoolValues _PyArrayScalar_BoolValues652,23760
#define PyGenericArrType_Type PyGenericArrType_Type653,23834
#define PyNumberArrType_Type PyNumberArrType_Type654,23899
#define PyIntegerArrType_Type PyIntegerArrType_Type655,23964
#define PySignedIntegerArrType_Type PySignedIntegerArrType_Type656,24030
#define PyUnsignedIntegerArrType_Type PyUnsignedIntegerArrType_Type657,24102
#define PyInexactArrType_Type PyInexactArrType_Type658,24176
#define PyFloatingArrType_Type PyFloatingArrType_Type659,24242
#define PyComplexFloatingArrType_Type PyComplexFloatingArrType_Type660,24309
#define PyFlexibleArrType_Type PyFlexibleArrType_Type661,24383
#define PyCharacterArrType_Type PyCharacterArrType_Type662,24450
#define PyByteArrType_Type PyByteArrType_Type663,24518
#define PyShortArrType_Type PyShortArrType_Type664,24581
#define PyIntArrType_Type PyIntArrType_Type665,24645
#define PyLongArrType_Type PyLongArrType_Type666,24707
#define PyLongLongArrType_Type PyLongLongArrType_Type667,24770
#define PyUByteArrType_Type PyUByteArrType_Type668,24837
#define PyUShortArrType_Type PyUShortArrType_Type669,24901
#define PyUIntArrType_Type PyUIntArrType_Type670,24966
#define PyULongArrType_Type PyULongArrType_Type671,25029
#define PyULongLongArrType_Type PyULongLongArrType_Type672,25093
#define PyFloatArrType_Type PyFloatArrType_Type673,25161
#define PyDoubleArrType_Type PyDoubleArrType_Type674,25225
#define PyLongDoubleArrType_Type PyLongDoubleArrType_Type675,25290
#define PyCFloatArrType_Type PyCFloatArrType_Type676,25359
#define PyCDoubleArrType_Type PyCDoubleArrType_Type677,25424
#define PyCLongDoubleArrType_Type PyCLongDoubleArrType_Type678,25490
#define PyObjectArrType_Type PyObjectArrType_Type679,25560
#define PyStringArrType_Type PyStringArrType_Type680,25625
#define PyUnicodeArrType_Type PyUnicodeArrType_Type681,25690
#define PyVoidArrType_Type PyVoidArrType_Type682,25756
#define PyTimeIntegerArrType_Type PyTimeIntegerArrType_Type683,25819
#define PyDatetimeArrType_Type PyDatetimeArrType_Type684,25889
#define PyTimedeltaArrType_Type PyTimedeltaArrType_Type685,25956
#define PyArray_SetNumericOps PyArray_SetNumericOps686,26024
#define PyArray_GetNumericOps PyArray_GetNumericOps689,26119
#define PyArray_INCREF PyArray_INCREF692,26215
#define PyArray_XDECREF PyArray_XDECREF695,26308
#define PyArray_SetStringFunction PyArray_SetStringFunction698,26402
#define PyArray_DescrFromType PyArray_DescrFromType701,26507
#define PyArray_TypeObjectFromType PyArray_TypeObjectFromType704,26607
#define PyArray_Zero PyArray_Zero707,26707
#define PyArray_One PyArray_One710,26801
#define PyArray_CastToType PyArray_CastToType713,26894
#define PyArray_CastTo PyArray_CastTo716,27020
#define PyArray_CastAnyTo PyArray_CastAnyTo719,27130
#define PyArray_CanCastSafely PyArray_CanCastSafely722,27243
#define PyArray_CanCastTo PyArray_CanCastTo725,27336
#define PyArray_ObjectType PyArray_ObjectType728,27454
#define PyArray_DescrFromObject PyArray_DescrFromObject731,27551
#define PyArray_ConvertToCommonType PyArray_ConvertToCommonType734,27677
#define PyArray_DescrFromScalar PyArray_DescrFromScalar737,27798
#define PyArray_DescrFromTypeObject PyArray_DescrFromTypeObject740,27907
#define PyArray_Size PyArray_Size743,28020
#define PyArray_Scalar PyArray_Scalar746,28111
#define PyArray_FromScalar PyArray_FromScalar749,28231
#define PyArray_ScalarAsCtype PyArray_ScalarAsCtype752,28347
#define PyArray_CastScalarToCtype PyArray_CastScalarToCtype755,28451
#define PyArray_CastScalarDirect PyArray_CastScalarDirect758,28575
#define PyArray_ScalarFromObject PyArray_ScalarFromObject761,28703
#define PyArray_GetCastFunc PyArray_GetCastFunc764,28808
#define PyArray_FromDims PyArray_FromDims767,28933
#define PyArray_FromDimsAndDataAndDescr PyArray_FromDimsAndDataAndDescr770,29035
#define PyArray_FromAny PyArray_FromAny773,29172
#define PyArray_EnsureArray PyArray_EnsureArray776,29312
#define PyArray_EnsureAnyArray PyArray_EnsureAnyArray779,29412
#define PyArray_FromFile PyArray_FromFile782,29515
#define PyArray_FromString PyArray_FromString785,29643
#define PyArray_FromBuffer PyArray_FromBuffer788,29783
#define PyArray_FromIter PyArray_FromIter791,29919
#define PyArray_Return PyArray_Return794,30043
#define PyArray_GetField PyArray_GetField797,30143
#define PyArray_SetField PyArray_SetField800,30267
#define PyArray_Byteswap PyArray_Byteswap803,30396
#define PyArray_Resize PyArray_Resize806,30508
#define PyArray_MoveInto PyArray_MoveInto809,30640
#define PyArray_CopyInto PyArray_CopyInto812,30752
#define PyArray_CopyAnyInto PyArray_CopyAnyInto815,30864
#define PyArray_CopyObject PyArray_CopyObject818,30979
#define PyArray_NewCopy PyArray_NewCopy821,31088
#define PyArray_ToList PyArray_ToList824,31200
#define PyArray_ToString PyArray_ToString827,31300
#define PyArray_ToFile PyArray_ToFile830,31413
#define PyArray_Dump PyArray_Dump833,31530
#define PyArray_Dumps PyArray_Dumps836,31633
#define PyArray_ValidType PyArray_ValidType839,31732
#define PyArray_UpdateFlags PyArray_UpdateFlags842,31816
#define PyArray_New PyArray_New845,31920
#define PyArray_NewFromDescr PyArray_NewFromDescr848,32080
#define PyArray_DescrNew PyArray_DescrNew851,32256
#define PyArray_DescrNewFromType PyArray_DescrNewFromType854,32363
#define PyArray_GetPriority PyArray_GetPriority857,32466
#define PyArray_IterNew PyArray_IterNew860,32570
#define PyArray_MultiIterNew PyArray_MultiIterNew863,32667
#define PyArray_PyIntAsInt PyArray_PyIntAsInt866,32767
#define PyArray_PyIntAsIntp PyArray_PyIntAsIntp869,32860
#define PyArray_Broadcast PyArray_Broadcast872,32959
#define PyArray_FillObjectArray PyArray_FillObjectArray875,33065
#define PyArray_FillWithScalar PyArray_FillWithScalar878,33181
#define PyArray_CheckStrides PyArray_CheckStrides881,33295
#define PyArray_DescrNewByteorder PyArray_DescrNewByteorder884,33437
#define PyArray_IterAllButAxis PyArray_IterAllButAxis887,33560
#define PyArray_CheckFromAny PyArray_CheckFromAny890,33671
#define PyArray_FromArray PyArray_FromArray893,33817
#define PyArray_FromInterface PyArray_FromInterface896,33943
#define PyArray_FromStructInterface PyArray_FromStructInterface899,34046
#define PyArray_FromArrayAttr PyArray_FromArrayAttr902,34155
#define PyArray_ScalarKind PyArray_ScalarKind905,34287
#define PyArray_CanCoerceScalar PyArray_CanCoerceScalar908,34402
#define PyArray_NewFlagsObject PyArray_NewFlagsObject911,34514
#define PyArray_CanCastScalar PyArray_CanCastScalar914,34618
#define PyArray_CompareUCS4 PyArray_CompareUCS4917,34739
#define PyArray_RemoveSmallest PyArray_RemoveSmallest920,34853
#define PyArray_ElementStrides PyArray_ElementStrides923,34964
#define PyArray_Item_INCREF PyArray_Item_INCREF926,35061
#define PyArray_Item_XDECREF PyArray_Item_XDECREF929,35169
#define PyArray_FieldNames PyArray_FieldNames932,35278
#define PyArray_Transpose PyArray_Transpose935,35378
#define PyArray_TakeFrom PyArray_TakeFrom938,35498
#define PyArray_PutTo PyArray_PutTo941,35649
#define PyArray_PutMask PyArray_PutMask944,35786
#define PyArray_Repeat PyArray_Repeat947,35910
#define PyArray_Choose PyArray_Choose950,36028
#define PyArray_Sort PyArray_Sort953,36172
#define PyArray_ArgSort PyArray_ArgSort956,36283
#define PyArray_SearchSorted PyArray_SearchSorted959,36404
#define PyArray_ArgMax PyArray_ArgMax962,36539
#define PyArray_ArgMin PyArray_ArgMin965,36662
#define PyArray_Reshape PyArray_Reshape968,36785
#define PyArray_Newshape PyArray_Newshape971,36899
#define PyArray_Squeeze PyArray_Squeeze974,37029
#define PyArray_View PyArray_View977,37131
#define PyArray_SwapAxes PyArray_SwapAxes980,37263
#define PyArray_Max PyArray_Max983,37376
#define PyArray_Min PyArray_Min986,37496
#define PyArray_Ptp PyArray_Ptp989,37616
#define PyArray_Mean PyArray_Mean992,37736
#define PyArray_Trace PyArray_Trace995,37862
#define PyArray_Diagonal PyArray_Diagonal998,37999
#define PyArray_Clip PyArray_Clip1001,38117
#define PyArray_Conjugate PyArray_Conjugate1004,38257
#define PyArray_Nonzero PyArray_Nonzero1007,38378
#define PyArray_Std PyArray_Std1010,38480
#define PyArray_Sum PyArray_Sum1013,38610
#define PyArray_CumSum PyArray_CumSum1016,38735
#define PyArray_Prod PyArray_Prod1019,38863
#define PyArray_CumProd PyArray_CumProd1022,38989
#define PyArray_All PyArray_All1025,39118
#define PyArray_Any PyArray_Any1028,39238
#define PyArray_Compress PyArray_Compress1031,39358
#define PyArray_Flatten PyArray_Flatten1034,39495
#define PyArray_Ravel PyArray_Ravel1037,39608
#define PyArray_MultiplyList PyArray_MultiplyList1040,39719
#define PyArray_MultiplyIntList PyArray_MultiplyIntList1043,39824
#define PyArray_GetPtr PyArray_GetPtr1046,39922
#define PyArray_CompareLists PyArray_CompareLists1049,40030
#define PyArray_AsCArray PyArray_AsCArray1052,40142
#define PyArray_As1D PyArray_As1D1055,40275
#define PyArray_As2D PyArray_As2D1058,40384
#define PyArray_Free PyArray_Free1061,40501
#define PyArray_Converter PyArray_Converter1064,40596
#define PyArray_IntpFromSequence PyArray_IntpFromSequence1067,40701
#define PyArray_Concatenate PyArray_Concatenate1070,40817
#define PyArray_InnerProduct PyArray_InnerProduct1073,40923
#define PyArray_MatrixProduct PyArray_MatrixProduct1076,41037
#define PyArray_CopyAndTranspose PyArray_CopyAndTranspose1079,41152
#define PyArray_Correlate PyArray_Correlate1082,41258
#define PyArray_TypestrConvert PyArray_TypestrConvert1085,41374
#define PyArray_DescrConverter PyArray_DescrConverter1088,41469
#define PyArray_DescrConverter2 PyArray_DescrConverter21091,41584
#define PyArray_IntpConverter PyArray_IntpConverter1094,41700
#define PyArray_BufferConverter PyArray_BufferConverter1097,41812
#define PyArray_AxisConverter PyArray_AxisConverter1100,41927
#define PyArray_BoolConverter PyArray_BoolConverter1103,42030
#define PyArray_ByteorderConverter PyArray_ByteorderConverter1106,42138
#define PyArray_OrderConverter PyArray_OrderConverter1109,42247
#define PyArray_EquivTypes PyArray_EquivTypes1112,42357
#define PyArray_Zeros PyArray_Zeros1115,42482
#define PyArray_Empty PyArray_Empty1118,42604
#define PyArray_Where PyArray_Where1121,42726
#define PyArray_Arange PyArray_Arange1124,42845
#define PyArray_ArangeObj PyArray_ArangeObj1127,42958
#define PyArray_SortkindConverter PyArray_SortkindConverter1130,43098
#define PyArray_LexSort PyArray_LexSort1133,43214
#define PyArray_Round PyArray_Round1136,43316
#define PyArray_EquivTypenums PyArray_EquivTypenums1139,43438
#define PyArray_RegisterDataType PyArray_RegisterDataType1142,43542
#define PyArray_RegisterCastFunc PyArray_RegisterCastFunc1145,43646
#define PyArray_RegisterCanCast PyArray_RegisterCanCast1148,43782
#define PyArray_InitArrFuncs PyArray_InitArrFuncs1151,43906
#define PyArray_IntTupleFromIntp PyArray_IntTupleFromIntp1154,44010
#define PyArray_TypeNumFromName PyArray_TypeNumFromName1157,44121
#define PyArray_ClipmodeConverter PyArray_ClipmodeConverter1160,44215
#define PyArray_OutputConverter PyArray_OutputConverter1163,44331
#define PyArray_BroadcastToShape PyArray_BroadcastToShape1166,44447
#define _PyArray_SigintHandler _PyArray_SigintHandler1169,44570
#define _PyArray_GetSigintBuf _PyArray_GetSigintBuf1172,44661
#define PyArray_DescrAlignConverter PyArray_DescrAlignConverter1175,44753
#define PyArray_DescrAlignConverter2 PyArray_DescrAlignConverter21178,44873
#define PyArray_SearchsideConverter PyArray_SearchsideConverter1181,44994
#define PyArray_CheckAxis PyArray_CheckAxis1184,45104
#define PyArray_OverflowMultiplyList PyArray_OverflowMultiplyList1187,45220
#define PyArray_CompareString PyArray_CompareString1190,45333
#define PyArray_MultiIterFromObjects PyArray_MultiIterFromObjects1193,45441
#define PyArray_GetEndianness PyArray_GetEndianness1196,45567
#define PyArray_GetNDArrayCFeatureVersion PyArray_GetNDArrayCFeatureVersion1199,45657
#define PyArray_Correlate2 PyArray_Correlate21202,45768
#define PyArray_NeighborhoodIterNew PyArray_NeighborhoodIterNew1205,45885
#define PyArray_SetDatetimeParseFunction PyArray_SetDatetimeParseFunction1208,46035
#define PyArray_DatetimeToDatetimeStruct PyArray_DatetimeToDatetimeStruct1211,46143
#define PyArray_TimedeltaToTimedeltaStruct PyArray_TimedeltaToTimedeltaStruct1214,46293
#define PyArray_DatetimeStructToDatetime PyArray_DatetimeStructToDatetime1217,46447
#define PyArray_TimedeltaStructToTimedelta PyArray_TimedeltaStructToTimedelta1220,46591
_import_array(void)_import_array1226,46806
#define NUMPY_IMPORT_ARRAY_RETVAL NUMPY_IMPORT_ARRAY_RETVAL1305,49415
#define NUMPY_IMPORT_ARRAY_RETVALNUMPY_IMPORT_ARRAY_RETVAL1307,49462
#define import_array(import_array1310,49507
#define import_array1(import_array11312,49691
#define import_array2(import_array21314,49857

build/src.win32-2.6/numpy/core/include/numpy/__ufunc_api.c,41
void *PyUFunc_API[] = {PyUFunc_API6,98

build/src.win32-2.6/numpy/core/include/numpy/__ufunc_api.h,2247
NPY_NO_EXPORT PyTypeObject PyUFunc_Type;PyUFunc_Type7,121
    NPY_NO_EXPORT PyTypeObject PyUFunc_Type;PyUFunc_Type13,273
#define PyUFunc_API PyUFunc_API84,3333
void **PyUFunc_API;PyUFunc_API91,3511
static void **PyUFunc_API=NULL;PyUFunc_API93,3539
#define PyUFunc_Type PyUFunc_Type97,3590
#define PyUFunc_FromFuncAndData PyUFunc_FromFuncAndData98,3646
#define PyUFunc_RegisterLoopForType PyUFunc_RegisterLoopForType101,3821
#define PyUFunc_GenericFunction PyUFunc_GenericFunction104,3970
#define PyUFunc_f_f_As_d_d PyUFunc_f_f_As_d_d107,4113
#define PyUFunc_d_d PyUFunc_d_d110,4234
#define PyUFunc_f_f PyUFunc_f_f113,4348
#define PyUFunc_g_g PyUFunc_g_g116,4462
#define PyUFunc_F_F_As_D_D PyUFunc_F_F_As_D_D119,4576
#define PyUFunc_F_F PyUFunc_F_F122,4697
#define PyUFunc_D_D PyUFunc_D_D125,4811
#define PyUFunc_G_G PyUFunc_G_G128,4926
#define PyUFunc_O_O PyUFunc_O_O131,5041
#define PyUFunc_ff_f_As_dd_d PyUFunc_ff_f_As_dd_d134,5156
#define PyUFunc_ff_f PyUFunc_ff_f137,5280
#define PyUFunc_dd_d PyUFunc_dd_d140,5396
#define PyUFunc_gg_g PyUFunc_gg_g143,5512
#define PyUFunc_FF_F_As_DD_D PyUFunc_FF_F_As_DD_D146,5628
#define PyUFunc_DD_D PyUFunc_DD_D149,5752
#define PyUFunc_FF_F PyUFunc_FF_F152,5868
#define PyUFunc_GG_G PyUFunc_GG_G155,5984
#define PyUFunc_OO_O PyUFunc_OO_O158,6100
#define PyUFunc_O_O_method PyUFunc_O_O_method161,6216
#define PyUFunc_OO_O_method PyUFunc_OO_O_method164,6338
#define PyUFunc_On_Om PyUFunc_On_Om167,6461
#define PyUFunc_GetPyValues PyUFunc_GetPyValues170,6578
#define PyUFunc_checkfperr PyUFunc_checkfperr173,6694
#define PyUFunc_clearfperr PyUFunc_clearfperr176,6798
#define PyUFunc_getfperr PyUFunc_getfperr179,6885
#define PyUFunc_handlefperr PyUFunc_handlefperr182,6969
#define PyUFunc_ReplaceLoopBySignature PyUFunc_ReplaceLoopBySignature185,7079
#define PyUFunc_FromFuncAndDataAndSignature PyUFunc_FromFuncAndDataAndSignature188,7245
#define PyUFunc_SetUsesArraysAsData PyUFunc_SetUsesArraysAsData191,7447
_import_umath(void)_import_umath196,7567
#define import_umath(import_umath235,8670
#define import_umath1(import_umath1237,8835
#define import_umath2(import_umath2239,9008
#define import_ufunc(import_ufunc241,9154

build/src.win32-2.6/numpy/core/include/numpy/__umath_generated.c,76472
static PyUFuncGenericFunction _arg_functions[] = { CFLOAT__arg, CDOUBLE__arg, CLONGDOUBLE__arg };_arg_functions8,159
static void * _arg_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };_arg_data9,258
static char _arg_signatures[] = { PyArray_CFLOAT, PyArray_FLOAT, PyArray_CDOUBLE, PyArray_DOUBLE, PyArray_CLONGDOUBLE, PyArray_LONGDOUBLE };_arg_signatures10,333
static PyUFuncGenericFunction absolute_functions[] = { BOOL_absolute, BYTE_absolute, UBYTE_absolute, SHORT_absolute, USHORT_absolute, INT_absolute, UINT_absolute, LONG_absolute, ULONG_absolute, LONGLONG_absolute, ULONGLONG_absolute, FLOAT_absolute, DOUBLE_absolute, LONGDOUBLE_absolute, DATETIME_absolute, TIMEDELTA_absolute, CFLOAT_absolute, CDOUBLE_absolute, CLONGDOUBLE_absolute, NULL };absolute_functions11,475
static void * absolute_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };absolute_data12,867
static char absolute_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_CFLOAT, PyArray_FLOAT, PyArray_CDOUBLE, PyArray_DOUBLE, PyArray_CLONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };absolute_signatures13,1184
static PyUFuncGenericFunction add_functions[] = { BOOL_add, BYTE_add, UBYTE_add, SHORT_add, USHORT_add, INT_add, UINT_add, LONG_add, ULONG_add, LONGLONG_add, ULONGLONG_add, FLOAT_add, DOUBLE_add, LONGDOUBLE_add, CFLOAT_add, CDOUBLE_add, CLONGDOUBLE_add, DATETIME_Mm_M_add, TIMEDELTA_mm_m_add, DATETIME_mM_M_add, NULL };add_functions14,1872
static void * add_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };add_data15,2193
static char add_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_DATETIME, PyArray_DATETIME, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };add_signatures16,2519
static PyUFuncGenericFunction arccos_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };arccos_functions17,3586
static void * arccos_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arccos" };arccos_data18,3684
static char arccos_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };arccos_signatures19,3821
static PyUFuncGenericFunction arccosh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };arccosh_functions20,4102
static void * arccosh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arccosh" };arccosh_data21,4201
static char arccosh_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };arccosh_signatures22,4340
static PyUFuncGenericFunction arcsin_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };arcsin_functions23,4622
static void * arcsin_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arcsin" };arcsin_data24,4720
static char arcsin_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };arcsin_signatures25,4857
static PyUFuncGenericFunction arcsinh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };arcsinh_functions26,5138
static void * arcsinh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arcsinh" };arcsinh_data27,5237
static char arcsinh_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };arcsinh_signatures28,5376
static PyUFuncGenericFunction arctan_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };arctan_functions29,5658
static void * arctan_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arctan" };arctan_data30,5756
static char arctan_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };arctan_signatures31,5893
static PyUFuncGenericFunction arctan2_functions[] = { NULL, NULL, NULL, NULL };arctan2_functions32,6174
static void * arctan2_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arctan2" };arctan2_data33,6255
static char arctan2_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };arctan2_signatures34,6352
static PyUFuncGenericFunction arctanh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };arctanh_functions35,6593
static void * arctanh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"arctanh" };arctanh_data36,6692
static char arctanh_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };arctanh_signatures37,6831
static PyUFuncGenericFunction bitwise_and_functions[] = { BOOL_bitwise_and, BYTE_bitwise_and, UBYTE_bitwise_and, SHORT_bitwise_and, USHORT_bitwise_and, INT_bitwise_and, UINT_bitwise_and, LONG_bitwise_and, ULONG_bitwise_and, LONGLONG_bitwise_and, ULONGLONG_bitwise_and, NULL };bitwise_and_functions38,7113
static void * bitwise_and_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };bitwise_and_data39,7391
static char bitwise_and_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };bitwise_and_signatures40,7599
static PyUFuncGenericFunction bitwise_or_functions[] = { BOOL_bitwise_or, BYTE_bitwise_or, UBYTE_bitwise_or, SHORT_bitwise_or, USHORT_bitwise_or, INT_bitwise_or, UINT_bitwise_or, LONG_bitwise_or, ULONG_bitwise_or, LONGLONG_bitwise_or, ULONGLONG_bitwise_or, NULL };bitwise_or_functions41,8192
static void * bitwise_or_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };bitwise_or_data42,8458
static char bitwise_or_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };bitwise_or_signatures43,8665
static PyUFuncGenericFunction bitwise_xor_functions[] = { BOOL_bitwise_xor, BYTE_bitwise_xor, UBYTE_bitwise_xor, SHORT_bitwise_xor, USHORT_bitwise_xor, INT_bitwise_xor, UINT_bitwise_xor, LONG_bitwise_xor, ULONG_bitwise_xor, LONGLONG_bitwise_xor, ULONGLONG_bitwise_xor, NULL };bitwise_xor_functions44,9257
static void * bitwise_xor_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };bitwise_xor_data45,9535
static char bitwise_xor_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };bitwise_xor_signatures46,9743
static PyUFuncGenericFunction ceil_functions[] = { NULL, NULL, NULL, NULL };ceil_functions47,10336
static void * ceil_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"ceil" };ceil_data48,10414
static char ceil_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };ceil_signatures49,10505
static PyUFuncGenericFunction conjugate_functions[] = { BYTE_conjugate, UBYTE_conjugate, SHORT_conjugate, USHORT_conjugate, INT_conjugate, UINT_conjugate, LONG_conjugate, ULONG_conjugate, LONGLONG_conjugate, ULONGLONG_conjugate, FLOAT_conjugate, DOUBLE_conjugate, LONGDOUBLE_conjugate, CFLOAT_conjugate, CDOUBLE_conjugate, CLONGDOUBLE_conjugate, NULL };conjugate_functions50,10676
static void * conjugate_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"conjugate" };conjugate_data51,11031
static char conjugate_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };conjugate_signatures52,11314
static PyUFuncGenericFunction copysign_functions[] = { FLOAT_copysign, DOUBLE_copysign, LONGDOUBLE_copysign };copysign_functions53,11904
static void * copysign_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };copysign_data54,12016
static char copysign_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE };copysign_signatures55,12095
static PyUFuncGenericFunction cos_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };cos_functions56,12289
static void * cos_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"cos" };cos_data57,12384
static char cos_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };cos_signatures58,12515
static PyUFuncGenericFunction cosh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };cosh_functions59,12793
static void * cosh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"cosh" };cosh_data60,12889
static char cosh_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };cosh_signatures61,13022
static PyUFuncGenericFunction deg2rad_functions[] = { NULL, NULL, NULL, NULL };deg2rad_functions62,13301
static void * deg2rad_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"deg2rad" };deg2rad_data63,13382
static char deg2rad_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };deg2rad_signatures64,13479
static PyUFuncGenericFunction degrees_functions[] = { NULL, NULL, NULL, NULL };degrees_functions65,13653
static void * degrees_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"degrees" };degrees_data66,13734
static char degrees_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };degrees_signatures67,13831
static PyUFuncGenericFunction divide_functions[] = { BYTE_divide, UBYTE_divide, SHORT_divide, USHORT_divide, INT_divide, UINT_divide, LONG_divide, ULONG_divide, LONGLONG_divide, ULONGLONG_divide, FLOAT_divide, DOUBLE_divide, LONGDOUBLE_divide, CFLOAT_divide, CDOUBLE_divide, CLONGDOUBLE_divide, NULL };divide_functions68,14005
static void * divide_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };divide_data69,14309
static char divide_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };divide_signatures70,14582
static PyUFuncGenericFunction equal_functions[] = { BOOL_equal, BYTE_equal, UBYTE_equal, SHORT_equal, USHORT_equal, INT_equal, UINT_equal, LONG_equal, ULONG_equal, LONGLONG_equal, ULONGLONG_equal, FLOAT_equal, DOUBLE_equal, LONGDOUBLE_equal, CFLOAT_equal, CDOUBLE_equal, CLONGDOUBLE_equal, OBJECT_equal, DATETIME_equal, TIMEDELTA_equal };equal_functions71,15443
static void * equal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };equal_data72,15783
static char equal_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL };equal_signatures73,16097
static PyUFuncGenericFunction exp_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };exp_functions74,17065
static void * exp_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"exp" };exp_data75,17160
static char exp_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };exp_signatures76,17291
static PyUFuncGenericFunction exp2_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };exp2_functions77,17569
static void * exp2_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"exp2" };exp2_data78,17665
static char exp2_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };exp2_signatures79,17798
static PyUFuncGenericFunction expm1_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };expm1_functions80,18077
static void * expm1_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"expm1" };expm1_data81,18174
static char expm1_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };expm1_signatures82,18309
static PyUFuncGenericFunction fabs_functions[] = { NULL, NULL, NULL, NULL };fabs_functions83,18589
static void * fabs_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"fabs" };fabs_data84,18667
static char fabs_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };fabs_signatures85,18758
static PyUFuncGenericFunction floor_functions[] = { NULL, NULL, NULL, NULL };floor_functions86,18929
static void * floor_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"floor" };floor_data87,19008
static char floor_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };floor_signatures88,19101
static PyUFuncGenericFunction floor_divide_functions[] = { BYTE_floor_divide, UBYTE_floor_divide, SHORT_floor_divide, USHORT_floor_divide, INT_floor_divide, UINT_floor_divide, LONG_floor_divide, ULONG_floor_divide, LONGLONG_floor_divide, ULONGLONG_floor_divide, FLOAT_floor_divide, DOUBLE_floor_divide, LONGDOUBLE_floor_divide, CFLOAT_floor_divide, CDOUBLE_floor_divide, CLONGDOUBLE_floor_divide, NULL };floor_divide_functions89,19273
static void * floor_divide_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };floor_divide_data90,19679
static char floor_divide_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };floor_divide_signatures91,19958
static PyUFuncGenericFunction fmax_functions[] = { BOOL_fmax, BYTE_fmax, UBYTE_fmax, SHORT_fmax, USHORT_fmax, INT_fmax, UINT_fmax, LONG_fmax, ULONG_fmax, LONGLONG_fmax, ULONGLONG_fmax, FLOAT_fmax, DOUBLE_fmax, LONGDOUBLE_fmax, CFLOAT_fmax, CDOUBLE_fmax, CLONGDOUBLE_fmax, DATETIME_fmax, TIMEDELTA_fmax, NULL };fmax_functions92,20825
static void * fmax_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };fmax_data93,21137
static char fmax_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_DATETIME, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };fmax_signatures94,21450
static PyUFuncGenericFunction fmin_functions[] = { BOOL_fmin, BYTE_fmin, UBYTE_fmin, SHORT_fmin, USHORT_fmin, INT_fmin, UINT_fmin, LONG_fmin, ULONG_fmin, LONGLONG_fmin, ULONGLONG_fmin, FLOAT_fmin, DOUBLE_fmin, LONGDOUBLE_fmin, CFLOAT_fmin, CDOUBLE_fmin, CLONGDOUBLE_fmin, DATETIME_fmin, TIMEDELTA_fmin, NULL };fmin_functions95,22462
static void * fmin_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };fmin_data96,22774
static char fmin_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_DATETIME, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };fmin_signatures97,23087
static PyUFuncGenericFunction fmod_functions[] = { BYTE_fmod, UBYTE_fmod, SHORT_fmod, USHORT_fmod, INT_fmod, UINT_fmod, LONG_fmod, ULONG_fmod, LONGLONG_fmod, ULONGLONG_fmod, NULL, NULL, NULL, NULL };fmod_functions98,24099
static void * fmod_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"fmod" };fmod_data99,24300
static char fmod_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };fmod_signatures100,24531
static PyUFuncGenericFunction greater_functions[] = { BOOL_greater, BYTE_greater, UBYTE_greater, SHORT_greater, USHORT_greater, INT_greater, UINT_greater, LONG_greater, ULONG_greater, LONGLONG_greater, ULONGLONG_greater, FLOAT_greater, DOUBLE_greater, LONGDOUBLE_greater, CFLOAT_greater, CDOUBLE_greater, CLONGDOUBLE_greater, OBJECT_greater, DATETIME_greater, TIMEDELTA_greater };greater_functions101,25228
static void * greater_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };greater_data102,25610
static char greater_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL };greater_signatures103,25926
static PyUFuncGenericFunction greater_equal_functions[] = { BOOL_greater_equal, BYTE_greater_equal, UBYTE_greater_equal, SHORT_greater_equal, USHORT_greater_equal, INT_greater_equal, UINT_greater_equal, LONG_greater_equal, ULONG_greater_equal, LONGLONG_greater_equal, ULONGLONG_greater_equal, FLOAT_greater_equal, DOUBLE_greater_equal, LONGDOUBLE_greater_equal, CFLOAT_greater_equal, CDOUBLE_greater_equal, CLONGDOUBLE_greater_equal, OBJECT_greater_equal, DATETIME_greater_equal, TIMEDELTA_greater_equal };greater_equal_functions104,26896
static void * greater_equal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };greater_equal_data105,27404
static char greater_equal_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL };greater_equal_signatures106,27726
static PyUFuncGenericFunction hypot_functions[] = { NULL, NULL, NULL, NULL };hypot_functions107,28702
static void * hypot_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"hypot" };hypot_data108,28781
static char hypot_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };hypot_signatures109,28874
static PyUFuncGenericFunction invert_functions[] = { BOOL_invert, BYTE_invert, UBYTE_invert, SHORT_invert, USHORT_invert, INT_invert, UINT_invert, LONG_invert, ULONG_invert, LONGLONG_invert, ULONGLONG_invert, NULL };invert_functions110,29113
static void * invert_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };invert_data111,29331
static char invert_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_OBJECT, PyArray_OBJECT };invert_signatures112,29534
static PyUFuncGenericFunction isfinite_functions[] = { FLOAT_isfinite, DOUBLE_isfinite, LONGDOUBLE_isfinite, CFLOAT_isfinite, CDOUBLE_isfinite, CLONGDOUBLE_isfinite };isfinite_functions113,29939
static void * isfinite_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };isfinite_data114,30108
static char isfinite_signatures[] = { PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_BOOL };isfinite_signatures115,30229
static PyUFuncGenericFunction isinf_functions[] = { FLOAT_isinf, DOUBLE_isinf, LONGDOUBLE_isinf, CFLOAT_isinf, CDOUBLE_isinf, CLONGDOUBLE_isinf };isinf_functions116,30459
static void * isinf_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };isinf_data117,30607
static char isinf_signatures[] = { PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_BOOL };isinf_signatures118,30725
static PyUFuncGenericFunction isnan_functions[] = { FLOAT_isnan, DOUBLE_isnan, LONGDOUBLE_isnan, CFLOAT_isnan, CDOUBLE_isnan, CLONGDOUBLE_isnan };isnan_functions119,30952
static void * isnan_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };isnan_data120,31100
static char isnan_signatures[] = { PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_BOOL };isnan_signatures121,31218
static PyUFuncGenericFunction left_shift_functions[] = { BYTE_left_shift, UBYTE_left_shift, SHORT_left_shift, USHORT_left_shift, INT_left_shift, UINT_left_shift, LONG_left_shift, ULONG_left_shift, LONGLONG_left_shift, ULONGLONG_left_shift, NULL };left_shift_functions122,31445
static void * left_shift_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };left_shift_data123,31694
static char left_shift_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };left_shift_signatures124,31887
static PyUFuncGenericFunction less_functions[] = { BOOL_less, BYTE_less, UBYTE_less, SHORT_less, USHORT_less, INT_less, UINT_less, LONG_less, ULONG_less, LONGLONG_less, ULONGLONG_less, FLOAT_less, DOUBLE_less, LONGDOUBLE_less, CFLOAT_less, CDOUBLE_less, CLONGDOUBLE_less, OBJECT_less, DATETIME_less, TIMEDELTA_less };less_functions125,32437
static void * less_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };less_data126,32756
static char less_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL };less_signatures127,33069
static PyUFuncGenericFunction less_equal_functions[] = { BOOL_less_equal, BYTE_less_equal, UBYTE_less_equal, SHORT_less_equal, USHORT_less_equal, INT_less_equal, UINT_less_equal, LONG_less_equal, ULONG_less_equal, LONGLONG_less_equal, ULONGLONG_less_equal, FLOAT_less_equal, DOUBLE_less_equal, LONGDOUBLE_less_equal, CFLOAT_less_equal, CDOUBLE_less_equal, CLONGDOUBLE_less_equal, OBJECT_less_equal, DATETIME_less_equal, TIMEDELTA_less_equal };less_equal_functions128,34036
static void * less_equal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };less_equal_data129,34481
static char less_equal_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL };less_equal_signatures130,34800
static PyUFuncGenericFunction log_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };log_functions131,35773
static void * log_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"log" };log_data132,35868
static char log_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };log_signatures133,35999
static PyUFuncGenericFunction log10_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };log10_functions134,36277
static void * log10_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"log10" };log10_data135,36374
static char log10_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };log10_signatures136,36509
static PyUFuncGenericFunction log1p_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };log1p_functions137,36789
static void * log1p_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"log1p" };log1p_data138,36886
static char log1p_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };log1p_signatures139,37021
static PyUFuncGenericFunction log2_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };log2_functions140,37301
static void * log2_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"log2" };log2_data141,37397
static char log2_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };log2_signatures142,37530
static PyUFuncGenericFunction logaddexp_functions[] = { NULL, NULL, NULL };logaddexp_functions143,37809
static void * logaddexp_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };logaddexp_data144,37886
static char logaddexp_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE };logaddexp_signatures145,37966
static PyUFuncGenericFunction logaddexp2_functions[] = { NULL, NULL, NULL };logaddexp2_functions146,38161
static void * logaddexp2_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };logaddexp2_data147,38239
static char logaddexp2_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE };logaddexp2_signatures148,38320
static PyUFuncGenericFunction logical_and_functions[] = { BOOL_logical_and, BYTE_logical_and, UBYTE_logical_and, SHORT_logical_and, USHORT_logical_and, INT_logical_and, UINT_logical_and, LONG_logical_and, ULONG_logical_and, LONGLONG_logical_and, ULONGLONG_logical_and, FLOAT_logical_and, DOUBLE_logical_and, LONGDOUBLE_logical_and, CFLOAT_logical_and, CDOUBLE_logical_and, CLONGDOUBLE_logical_and, DATETIME_logical_and, TIMEDELTA_logical_and, NULL };logical_and_functions149,38516
static void * logical_and_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"logical_and" };logical_and_data150,38968
static char logical_and_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };logical_and_signatures151,39297
static PyUFuncGenericFunction logical_not_functions[] = { BOOL_logical_not, BYTE_logical_not, UBYTE_logical_not, SHORT_logical_not, USHORT_logical_not, INT_logical_not, UINT_logical_not, LONG_logical_not, ULONG_logical_not, LONGLONG_logical_not, ULONGLONG_logical_not, FLOAT_logical_not, DOUBLE_logical_not, LONGDOUBLE_logical_not, CFLOAT_logical_not, CDOUBLE_logical_not, CLONGDOUBLE_logical_not, DATETIME_logical_not, TIMEDELTA_logical_not, NULL };logical_not_functions152,40273
static void * logical_not_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"logical_not" };logical_not_data153,40725
static char logical_not_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT };logical_not_signatures154,41054
static PyUFuncGenericFunction logical_or_functions[] = { BOOL_logical_or, BYTE_logical_or, UBYTE_logical_or, SHORT_logical_or, USHORT_logical_or, INT_logical_or, UINT_logical_or, LONG_logical_or, ULONG_logical_or, LONGLONG_logical_or, ULONGLONG_logical_or, FLOAT_logical_or, DOUBLE_logical_or, LONGDOUBLE_logical_or, CFLOAT_logical_or, CDOUBLE_logical_or, CLONGDOUBLE_logical_or, DATETIME_logical_or, TIMEDELTA_logical_or, NULL };logical_or_functions155,41705
static void * logical_or_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"logical_or" };logical_or_data156,42137
static char logical_or_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };logical_or_signatures157,42464
static PyUFuncGenericFunction logical_xor_functions[] = { BOOL_logical_xor, BYTE_logical_xor, UBYTE_logical_xor, SHORT_logical_xor, USHORT_logical_xor, INT_logical_xor, UINT_logical_xor, LONG_logical_xor, ULONG_logical_xor, LONGLONG_logical_xor, ULONGLONG_logical_xor, FLOAT_logical_xor, DOUBLE_logical_xor, LONGDOUBLE_logical_xor, CFLOAT_logical_xor, CDOUBLE_logical_xor, CLONGDOUBLE_logical_xor, DATETIME_logical_xor, TIMEDELTA_logical_xor, NULL };logical_xor_functions158,43439
static void * logical_xor_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"logical_xor" };logical_xor_data159,43891
static char logical_xor_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };logical_xor_signatures160,44220
static PyUFuncGenericFunction maximum_functions[] = { BOOL_maximum, BYTE_maximum, UBYTE_maximum, SHORT_maximum, USHORT_maximum, INT_maximum, UINT_maximum, LONG_maximum, ULONG_maximum, LONGLONG_maximum, ULONGLONG_maximum, FLOAT_maximum, DOUBLE_maximum, LONGDOUBLE_maximum, CFLOAT_maximum, CDOUBLE_maximum, CLONGDOUBLE_maximum, DATETIME_maximum, TIMEDELTA_maximum, NULL };maximum_functions161,45196
static void * maximum_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };maximum_data162,45568
static char maximum_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_DATETIME, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };maximum_signatures163,45884
static PyUFuncGenericFunction minimum_functions[] = { BOOL_minimum, BYTE_minimum, UBYTE_minimum, SHORT_minimum, USHORT_minimum, INT_minimum, UINT_minimum, LONG_minimum, ULONG_minimum, LONGLONG_minimum, ULONGLONG_minimum, FLOAT_minimum, DOUBLE_minimum, LONGDOUBLE_minimum, CFLOAT_minimum, CDOUBLE_minimum, CLONGDOUBLE_minimum, DATETIME_minimum, TIMEDELTA_minimum, NULL };minimum_functions164,46899
static void * minimum_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };minimum_data165,47271
static char minimum_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_DATETIME, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };minimum_signatures166,47587
static PyUFuncGenericFunction modf_functions[] = { FLOAT_modf, DOUBLE_modf, LONGDOUBLE_modf };modf_functions167,48602
static void * modf_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };modf_data168,48698
static char modf_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE };modf_signatures169,48773
static PyUFuncGenericFunction multiply_functions[] = { BOOL_multiply, BYTE_multiply, UBYTE_multiply, SHORT_multiply, USHORT_multiply, INT_multiply, UINT_multiply, LONG_multiply, ULONG_multiply, LONGLONG_multiply, ULONGLONG_multiply, FLOAT_multiply, DOUBLE_multiply, LONGDOUBLE_multiply, CFLOAT_multiply, CDOUBLE_multiply, CLONGDOUBLE_multiply, NULL };multiply_functions170,48963
static void * multiply_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };multiply_data171,49316
static char multiply_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };multiply_signatures172,49605
static PyUFuncGenericFunction negative_functions[] = { BOOL_negative, BYTE_negative, UBYTE_negative, SHORT_negative, USHORT_negative, INT_negative, UINT_negative, LONG_negative, ULONG_negative, LONGLONG_negative, ULONGLONG_negative, FLOAT_negative, DOUBLE_negative, LONGDOUBLE_negative, DATETIME_negative, TIMEDELTA_negative, NULL, NULL, NULL, NULL };negative_functions173,50510
static void * negative_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };negative_data174,50863
static char negative_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };negative_signatures175,51180
static PyUFuncGenericFunction nextafter_functions[] = { FLOAT_nextafter, DOUBLE_nextafter, LONGDOUBLE_nextafter };nextafter_functions176,51871
static void * nextafter_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };nextafter_data177,51987
static char nextafter_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE };nextafter_signatures178,52067
static PyUFuncGenericFunction not_equal_functions[] = { BOOL_not_equal, BYTE_not_equal, UBYTE_not_equal, SHORT_not_equal, USHORT_not_equal, INT_not_equal, UINT_not_equal, LONG_not_equal, ULONG_not_equal, LONGLONG_not_equal, ULONGLONG_not_equal, FLOAT_not_equal, DOUBLE_not_equal, LONGDOUBLE_not_equal, CFLOAT_not_equal, CDOUBLE_not_equal, CLONGDOUBLE_not_equal, OBJECT_not_equal, DATETIME_not_equal, TIMEDELTA_not_equal };not_equal_functions179,52262
static void * not_equal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };not_equal_data180,52686
static char not_equal_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BOOL, PyArray_UBYTE, PyArray_UBYTE, PyArray_BOOL, PyArray_SHORT, PyArray_SHORT, PyArray_BOOL, PyArray_USHORT, PyArray_USHORT, PyArray_BOOL, PyArray_INT, PyArray_INT, PyArray_BOOL, PyArray_UINT, PyArray_UINT, PyArray_BOOL, PyArray_LONG, PyArray_LONG, PyArray_BOOL, PyArray_ULONG, PyArray_ULONG, PyArray_BOOL, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_BOOL, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_BOOL, PyArray_FLOAT, PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_BOOL, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_BOOL, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_BOOL, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_BOOL, PyArray_OBJECT, PyArray_OBJECT, PyArray_BOOL, PyArray_DATETIME, PyArray_DATETIME, PyArray_BOOL, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_BOOL };not_equal_signatures181,53004
static PyUFuncGenericFunction ones_like_functions[] = { BOOL_ones_like, BYTE_ones_like, UBYTE_ones_like, SHORT_ones_like, USHORT_ones_like, INT_ones_like, UINT_ones_like, LONG_ones_like, ULONG_ones_like, LONGLONG_ones_like, ULONGLONG_ones_like, FLOAT_ones_like, DOUBLE_ones_like, LONGDOUBLE_ones_like, CFLOAT_ones_like, CDOUBLE_ones_like, CLONGDOUBLE_ones_like, DATETIME_ones_like, TIMEDELTA_ones_like, NULL };ones_like_functions182,53976
static void * ones_like_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };ones_like_data183,54388
static char ones_like_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_OBJECT, PyArray_OBJECT };ones_like_signatures184,54706
static PyUFuncGenericFunction power_functions[] = { BYTE_power, UBYTE_power, SHORT_power, USHORT_power, INT_power, UINT_power, LONG_power, ULONG_power, LONGLONG_power, ULONGLONG_power, NULL, NULL, NULL, NULL, NULL, NULL, NULL };power_functions185,55398
static void * power_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };power_data186,55628
static char power_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };power_signatures187,55900
static PyUFuncGenericFunction rad2deg_functions[] = { NULL, NULL, NULL, NULL };rad2deg_functions188,56760
static void * rad2deg_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"rad2deg" };rad2deg_data189,56841
static char rad2deg_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };rad2deg_signatures190,56938
static PyUFuncGenericFunction radians_functions[] = { NULL, NULL, NULL, NULL };radians_functions191,57112
static void * radians_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"radians" };radians_data192,57193
static char radians_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };radians_signatures193,57290
static PyUFuncGenericFunction reciprocal_functions[] = { BYTE_reciprocal, UBYTE_reciprocal, SHORT_reciprocal, USHORT_reciprocal, INT_reciprocal, UINT_reciprocal, LONG_reciprocal, ULONG_reciprocal, LONGLONG_reciprocal, ULONGLONG_reciprocal, FLOAT_reciprocal, DOUBLE_reciprocal, LONGDOUBLE_reciprocal, CFLOAT_reciprocal, CDOUBLE_reciprocal, CLONGDOUBLE_reciprocal, NULL };reciprocal_functions194,57464
static void * reciprocal_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };reciprocal_data195,57836
static char reciprocal_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };reciprocal_signatures196,58113
static PyUFuncGenericFunction remainder_functions[] = { BYTE_remainder, UBYTE_remainder, SHORT_remainder, USHORT_remainder, INT_remainder, UINT_remainder, LONG_remainder, ULONG_remainder, LONGLONG_remainder, ULONGLONG_remainder, FLOAT_remainder, DOUBLE_remainder, LONGDOUBLE_remainder, NULL };remainder_functions197,58704
static void * remainder_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };remainder_data198,58999
static char remainder_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };remainder_signatures199,59233
static PyUFuncGenericFunction right_shift_functions[] = { BYTE_right_shift, UBYTE_right_shift, SHORT_right_shift, USHORT_right_shift, INT_right_shift, UINT_right_shift, LONG_right_shift, ULONG_right_shift, LONGLONG_right_shift, ULONGLONG_right_shift, NULL };right_shift_functions200,59935
static void * right_shift_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };right_shift_data201,60195
static char right_shift_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };right_shift_signatures202,60389
static PyUFuncGenericFunction rint_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };rint_functions203,60940
static void * rint_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"rint" };rint_data204,61036
static char rint_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };rint_signatures205,61169
static PyUFuncGenericFunction sign_functions[] = { BYTE_sign, UBYTE_sign, SHORT_sign, USHORT_sign, INT_sign, UINT_sign, LONG_sign, ULONG_sign, LONGLONG_sign, ULONGLONG_sign, FLOAT_sign, DOUBLE_sign, LONGDOUBLE_sign, CFLOAT_sign, CDOUBLE_sign, CLONGDOUBLE_sign, OBJECT_sign, DATETIME_sign, TIMEDELTA_sign };sign_functions206,61448
static void * sign_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };sign_data207,61756
static char sign_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA };sign_signatures208,62055
static PyUFuncGenericFunction signbit_functions[] = { FLOAT_signbit, DOUBLE_signbit, LONGDOUBLE_signbit };signbit_functions209,62714
static void * signbit_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };signbit_data210,62822
static char signbit_signatures[] = { PyArray_FLOAT, PyArray_BOOL, PyArray_DOUBLE, PyArray_BOOL, PyArray_LONGDOUBLE, PyArray_BOOL };signbit_signatures211,62900
static PyUFuncGenericFunction sin_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };sin_functions212,63033
static void * sin_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"sin" };sin_data213,63128
static char sin_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };sin_signatures214,63259
static PyUFuncGenericFunction sinh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };sinh_functions215,63537
static void * sinh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"sinh" };sinh_data216,63633
static char sinh_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };sinh_signatures217,63766
static PyUFuncGenericFunction spacing_functions[] = { FLOAT_spacing, DOUBLE_spacing, LONGDOUBLE_spacing };spacing_functions218,64045
static void * spacing_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };spacing_data219,64153
static char spacing_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE };spacing_signatures220,64231
static PyUFuncGenericFunction sqrt_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };sqrt_functions221,64373
static void * sqrt_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"sqrt" };sqrt_data222,64469
static char sqrt_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };sqrt_signatures223,64602
static PyUFuncGenericFunction square_functions[] = { BYTE_square, UBYTE_square, SHORT_square, USHORT_square, INT_square, UINT_square, LONG_square, ULONG_square, LONGLONG_square, ULONGLONG_square, FLOAT_square, DOUBLE_square, LONGDOUBLE_square, CFLOAT_square, CDOUBLE_square, CLONGDOUBLE_square, NULL };square_functions224,64881
static void * square_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };square_data225,65185
static char square_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };square_signatures226,65458
static PyUFuncGenericFunction subtract_functions[] = { BOOL_subtract, BYTE_subtract, UBYTE_subtract, SHORT_subtract, USHORT_subtract, INT_subtract, UINT_subtract, LONG_subtract, ULONG_subtract, LONGLONG_subtract, ULONGLONG_subtract, FLOAT_subtract, DOUBLE_subtract, LONGDOUBLE_subtract, CFLOAT_subtract, CDOUBLE_subtract, CLONGDOUBLE_subtract, DATETIME_Mm_M_subtract, TIMEDELTA_mm_m_subtract, DATETIME_MM_m_subtract, NULL };subtract_functions227,66045
static void * subtract_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };subtract_data228,66471
static char subtract_signatures[] = { PyArray_BOOL, PyArray_BOOL, PyArray_BOOL, PyArray_BYTE, PyArray_BYTE, PyArray_BYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_UBYTE, PyArray_SHORT, PyArray_SHORT, PyArray_SHORT, PyArray_USHORT, PyArray_USHORT, PyArray_USHORT, PyArray_INT, PyArray_INT, PyArray_INT, PyArray_UINT, PyArray_UINT, PyArray_UINT, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_ULONG, PyArray_ULONG, PyArray_ULONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_TIMEDELTA, PyArray_DATETIME, PyArray_DATETIME, PyArray_TIMEDELTA, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };subtract_signatures229,66802
static PyUFuncGenericFunction tan_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };tan_functions230,67874
static void * tan_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"tan" };tan_data231,67969
static char tan_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };tan_signatures232,68100
static PyUFuncGenericFunction tanh_functions[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };tanh_functions233,68378
static void * tanh_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)"tanh" };tanh_data234,68474
static char tanh_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };tanh_signatures235,68607
static PyUFuncGenericFunction true_divide_functions[] = { BYTE_true_divide, UBYTE_true_divide, SHORT_true_divide, USHORT_true_divide, INT_true_divide, UINT_true_divide, LONG_true_divide, ULONG_true_divide, LONGLONG_true_divide, ULONGLONG_true_divide, FLOAT_true_divide, DOUBLE_true_divide, LONGDOUBLE_true_divide, CFLOAT_true_divide, CDOUBLE_true_divide, CLONGDOUBLE_true_divide, NULL };true_divide_functions236,68886
static void * true_divide_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL, (void *)NULL };true_divide_data237,69275
static char true_divide_signatures[] = { PyArray_BYTE, PyArray_BYTE, PyArray_DOUBLE, PyArray_UBYTE, PyArray_UBYTE, PyArray_DOUBLE, PyArray_SHORT, PyArray_SHORT, PyArray_DOUBLE, PyArray_USHORT, PyArray_USHORT, PyArray_DOUBLE, PyArray_INT, PyArray_INT, PyArray_DOUBLE, PyArray_UINT, PyArray_UINT, PyArray_DOUBLE, PyArray_LONG, PyArray_LONG, PyArray_DOUBLE, PyArray_ULONG, PyArray_ULONG, PyArray_DOUBLE, PyArray_LONGLONG, PyArray_LONGLONG, PyArray_DOUBLE, PyArray_ULONGLONG, PyArray_ULONGLONG, PyArray_DOUBLE, PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CFLOAT, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_CLONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT, PyArray_OBJECT };true_divide_signatures238,69553
static PyUFuncGenericFunction trunc_functions[] = { NULL, NULL, NULL, NULL };trunc_functions239,70426
static void * trunc_data[] = { (void *)NULL, (void *)NULL, (void *)NULL, (void *)"trunc" };trunc_data240,70505
static char trunc_signatures[] = { PyArray_FLOAT, PyArray_FLOAT, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_LONGDOUBLE, PyArray_LONGDOUBLE, PyArray_OBJECT, PyArray_OBJECT };trunc_signatures241,70598
InitOperators(PyObject *dictionary) {InitOperators244,70785

build/src.win32-2.6/numpy/core/src/multiarray/arraytypes.c,88218
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN12,417
#define _MULTIARRAYMODULE_MULTIARRAYMODULE17,516
#define NPY_NO_PREFIXNPY_NO_PREFIX18,543
MyPyFloat_AsDouble(PyObject *obj)MyPyFloat_AsDouble41,1099
MyPyLong_AsLong (PyObject *obj)MyPyLong_AsLong61,1429
MyPyLong_AsUnsignedLong (PyObject *obj)MyPyLong_AsUnsignedLong75,1662
MyPyLong_AsLongLong (PyObject *obj)MyPyLong_AsLongLong95,2022
MyPyLong_AsUnsignedLongLong (PyObject *obj)MyPyLong_AsUnsignedLongLong109,2271
static char * _SEQUENCE_MESSAGE = "error setting an array element with a sequence";_SEQUENCE_MESSAGE136,2877
BOOL_getitem(char *ip, PyArrayObject *ap) {BOOL_getitem140,2994
BOOL_setitem(PyObject *op, char *ov, PyArrayObject *ap) {BOOL_setitem154,3339
BYTE_getitem(char *ip, PyArrayObject *ap) {BYTE_getitem182,4067
BYTE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {BYTE_setitem196,4410
UBYTE_getitem(char *ip, PyArrayObject *ap) {UBYTE_getitem224,5138
UBYTE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {UBYTE_setitem238,5484
SHORT_getitem(char *ip, PyArrayObject *ap) {SHORT_getitem266,6218
SHORT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {SHORT_setitem280,6564
USHORT_getitem(char *ip, PyArrayObject *ap) {USHORT_getitem308,7298
USHORT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {USHORT_setitem322,7647
INT_getitem(char *ip, PyArrayObject *ap) {INT_getitem350,8387
INT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {INT_setitem364,8727
LONG_getitem(char *ip, PyArrayObject *ap) {LONG_getitem392,9449
LONG_setitem(PyObject *op, char *ov, PyArrayObject *ap) {LONG_setitem406,9792
UINT_getitem(char *ip, PyArrayObject *ap) {UINT_getitem434,10520
UINT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {UINT_setitem448,10883
ULONG_getitem(char *ip, PyArrayObject *ap) {ULONG_getitem476,11619
ULONG_setitem(PyObject *op, char *ov, PyArrayObject *ap) {ULONG_setitem490,11985
LONGLONG_getitem(char *ip, PyArrayObject *ap) {LONGLONG_getitem518,12727
LONGLONG_setitem(PyObject *op, char *ov, PyArrayObject *ap) {LONGLONG_setitem532,13100
ULONGLONG_getitem(char *ip, PyArrayObject *ap) {ULONGLONG_getitem560,13856
ULONGLONG_setitem(PyObject *op, char *ov, PyArrayObject *ap) {ULONGLONG_setitem574,14250
FLOAT_getitem(char *ip, PyArrayObject *ap) {FLOAT_getitem602,15020
FLOAT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {FLOAT_setitem616,15376
DOUBLE_getitem(char *ip, PyArrayObject *ap) {DOUBLE_getitem644,16113
DOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {DOUBLE_setitem658,16474
CFLOAT_getitem(char *ip, PyArrayObject *ap) {CFLOAT_getitem687,17219
CDOUBLE_getitem(char *ip, PyArrayObject *ap) {CDOUBLE_getitem706,17766
CFLOAT_setitem(PyObject *op, char *ov, PyArrayObject *ap)CFLOAT_setitem728,18317
CDOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap)CDOUBLE_setitem772,19485
CLONGDOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap)CLONGDOUBLE_setitem816,20661
LONGDOUBLE_getitem(char *ip, PyArrayObject *ap)LONGDOUBLE_getitem864,21952
LONGDOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {LONGDOUBLE_setitem870,22070
CLONGDOUBLE_getitem(char *ip, PyArrayObject *ap)CLONGDOUBLE_getitem894,22678
UNICODE_getitem(char *ip, PyArrayObject *ap)UNICODE_getitem901,22819
UNICODE_setitem(PyObject *op, char *ov, PyArrayObject *ap)UNICODE_setitem956,24192
STRING_getitem(char *ip, PyArrayObject *ap)STRING_getitem1035,26357
STRING_setitem(PyObject *op, char *ov, PyArrayObject *ap)STRING_setitem1049,26658
#define __ALIGNED(__ALIGNED1113,28407
OBJECT_getitem(char *ip, PyArrayObject *ap)OBJECT_getitem1116,28485
OBJECT_setitem(PyObject *op, char *ov, PyArrayObject *ap)OBJECT_setitem1145,29166
VOID_getitem(char *ip, PyArrayObject *ap)VOID_getitem1165,29674
VOID_setitem(PyObject *op, char *ip, PyArrayObject *ap)VOID_setitem1289,33353
PyDateTime_FromNormalized(npy_datetime val, NPY_DATETIMEUNIT base)PyDateTime_FromNormalized1415,37373
PyTimeDelta_FromNormalized(npy_timedelta val, NPY_DATETIMEUNIT base)PyTimeDelta_FromNormalized1437,38111
PyDateTime_FromInt64(datetime val, PyArray_Descr *descr)PyDateTime_FromInt641450,38421
PyTimeDelta_FromInt64(timedelta val, PyArray_Descr *descr)PyTimeDelta_FromInt641496,39747
PyDateTime_AsNormalized(PyObject *obj, NPY_DATETIMEUNIT base)PyDateTime_AsNormalized1533,40773
PyTimeDelta_AsNormalized(PyObject *obj, NPY_DATETIMEUNIT base)PyTimeDelta_AsNormalized1571,41882
PyDateTime_AsInt64(PyObject *obj, PyArray_Descr *descr)PyDateTime_AsInt641600,42609
PyTimeDelta_AsInt64(PyObject *obj, PyArray_Descr *descr)PyTimeDelta_AsInt641646,43879
DATETIME_getitem(char *ip, PyArrayObject *ap) {DATETIME_getitem1715,46260
TIMEDELTA_getitem(char *ip, PyArrayObject *ap) {TIMEDELTA_getitem1730,46666
DATETIME_setitem(PyObject *op, char *ov, PyArrayObject *ap) {DATETIME_setitem1755,47431
TIMEDELTA_setitem(PyObject *op, char *ov, PyArrayObject *ap) {TIMEDELTA_setitem1817,49380
BYTE_to_BYTE(byte *ip, byte *op, intp n,BYTE_to_BYTE1863,50571
UBYTE_to_BYTE(ubyte *ip, byte *op, intp n,UBYTE_to_BYTE1873,50782
SHORT_to_BYTE(short *ip, byte *op, intp n,SHORT_to_BYTE1883,50995
USHORT_to_BYTE(ushort *ip, byte *op, intp n,USHORT_to_BYTE1893,51208
INT_to_BYTE(int *ip, byte *op, intp n,INT_to_BYTE1903,51423
UINT_to_BYTE(uint *ip, byte *op, intp n,UINT_to_BYTE1913,51632
LONG_to_BYTE(long *ip, byte *op, intp n,LONG_to_BYTE1923,51843
ULONG_to_BYTE(ulong *ip, byte *op, intp n,ULONG_to_BYTE1933,52054
LONGLONG_to_BYTE(longlong *ip, byte *op, intp n,LONGLONG_to_BYTE1943,52267
ULONGLONG_to_BYTE(ulonglong *ip, byte *op, intp n,ULONGLONG_to_BYTE1953,52486
FLOAT_to_BYTE(float *ip, byte *op, intp n,FLOAT_to_BYTE1963,52707
DOUBLE_to_BYTE(double *ip, byte *op, intp n,DOUBLE_to_BYTE1973,52920
LONGDOUBLE_to_BYTE(longdouble *ip, byte *op, intp n,LONGDOUBLE_to_BYTE1983,53135
DATETIME_to_BYTE(datetime *ip, byte *op, intp n,DATETIME_to_BYTE1993,53358
TIMEDELTA_to_BYTE(timedelta *ip, byte *op, intp n,TIMEDELTA_to_BYTE2003,53577
CFLOAT_to_BYTE(float *ip, byte *op, intp n,CFLOAT_to_BYTE2014,53800
CDOUBLE_to_BYTE(double *ip, byte *op, intp n,CDOUBLE_to_BYTE2025,54030
CLONGDOUBLE_to_BYTE(longdouble *ip, byte *op, intp n,CLONGDOUBLE_to_BYTE2036,54262
BYTE_to_UBYTE(byte *ip, ubyte *op, intp n,BYTE_to_UBYTE2051,54520
UBYTE_to_UBYTE(ubyte *ip, ubyte *op, intp n,UBYTE_to_UBYTE2061,54734
SHORT_to_UBYTE(short *ip, ubyte *op, intp n,SHORT_to_UBYTE2071,54950
USHORT_to_UBYTE(ushort *ip, ubyte *op, intp n,USHORT_to_UBYTE2081,55166
INT_to_UBYTE(int *ip, ubyte *op, intp n,INT_to_UBYTE2091,55384
UINT_to_UBYTE(uint *ip, ubyte *op, intp n,UINT_to_UBYTE2101,55596
LONG_to_UBYTE(long *ip, ubyte *op, intp n,LONG_to_UBYTE2111,55810
ULONG_to_UBYTE(ulong *ip, ubyte *op, intp n,ULONG_to_UBYTE2121,56024
LONGLONG_to_UBYTE(longlong *ip, ubyte *op, intp n,LONGLONG_to_UBYTE2131,56240
ULONGLONG_to_UBYTE(ulonglong *ip, ubyte *op, intp n,ULONGLONG_to_UBYTE2141,56462
FLOAT_to_UBYTE(float *ip, ubyte *op, intp n,FLOAT_to_UBYTE2151,56686
DOUBLE_to_UBYTE(double *ip, ubyte *op, intp n,DOUBLE_to_UBYTE2161,56902
LONGDOUBLE_to_UBYTE(longdouble *ip, ubyte *op, intp n,LONGDOUBLE_to_UBYTE2171,57120
DATETIME_to_UBYTE(datetime *ip, ubyte *op, intp n,DATETIME_to_UBYTE2181,57346
TIMEDELTA_to_UBYTE(timedelta *ip, ubyte *op, intp n,TIMEDELTA_to_UBYTE2191,57568
CFLOAT_to_UBYTE(float *ip, ubyte *op, intp n,CFLOAT_to_UBYTE2202,57794
CDOUBLE_to_UBYTE(double *ip, ubyte *op, intp n,CDOUBLE_to_UBYTE2213,58027
CLONGDOUBLE_to_UBYTE(longdouble *ip, ubyte *op, intp n,CLONGDOUBLE_to_UBYTE2224,58262
BYTE_to_SHORT(byte *ip, short *op, intp n,BYTE_to_SHORT2239,58523
UBYTE_to_SHORT(ubyte *ip, short *op, intp n,UBYTE_to_SHORT2249,58737
SHORT_to_SHORT(short *ip, short *op, intp n,SHORT_to_SHORT2259,58953
USHORT_to_SHORT(ushort *ip, short *op, intp n,USHORT_to_SHORT2269,59169
INT_to_SHORT(int *ip, short *op, intp n,INT_to_SHORT2279,59387
UINT_to_SHORT(uint *ip, short *op, intp n,UINT_to_SHORT2289,59599
LONG_to_SHORT(long *ip, short *op, intp n,LONG_to_SHORT2299,59813
ULONG_to_SHORT(ulong *ip, short *op, intp n,ULONG_to_SHORT2309,60027
LONGLONG_to_SHORT(longlong *ip, short *op, intp n,LONGLONG_to_SHORT2319,60243
ULONGLONG_to_SHORT(ulonglong *ip, short *op, intp n,ULONGLONG_to_SHORT2329,60465
FLOAT_to_SHORT(float *ip, short *op, intp n,FLOAT_to_SHORT2339,60689
DOUBLE_to_SHORT(double *ip, short *op, intp n,DOUBLE_to_SHORT2349,60905
LONGDOUBLE_to_SHORT(longdouble *ip, short *op, intp n,LONGDOUBLE_to_SHORT2359,61123
DATETIME_to_SHORT(datetime *ip, short *op, intp n,DATETIME_to_SHORT2369,61349
TIMEDELTA_to_SHORT(timedelta *ip, short *op, intp n,TIMEDELTA_to_SHORT2379,61571
CFLOAT_to_SHORT(float *ip, short *op, intp n,CFLOAT_to_SHORT2390,61797
CDOUBLE_to_SHORT(double *ip, short *op, intp n,CDOUBLE_to_SHORT2401,62030
CLONGDOUBLE_to_SHORT(longdouble *ip, short *op, intp n,CLONGDOUBLE_to_SHORT2412,62265
BYTE_to_USHORT(byte *ip, ushort *op, intp n,BYTE_to_USHORT2427,62526
UBYTE_to_USHORT(ubyte *ip, ushort *op, intp n,UBYTE_to_USHORT2437,62743
SHORT_to_USHORT(short *ip, ushort *op, intp n,SHORT_to_USHORT2447,62962
USHORT_to_USHORT(ushort *ip, ushort *op, intp n,USHORT_to_USHORT2457,63181
INT_to_USHORT(int *ip, ushort *op, intp n,INT_to_USHORT2467,63402
UINT_to_USHORT(uint *ip, ushort *op, intp n,UINT_to_USHORT2477,63617
LONG_to_USHORT(long *ip, ushort *op, intp n,LONG_to_USHORT2487,63834
ULONG_to_USHORT(ulong *ip, ushort *op, intp n,ULONG_to_USHORT2497,64051
LONGLONG_to_USHORT(longlong *ip, ushort *op, intp n,LONGLONG_to_USHORT2507,64270
ULONGLONG_to_USHORT(ulonglong *ip, ushort *op, intp n,ULONGLONG_to_USHORT2517,64495
FLOAT_to_USHORT(float *ip, ushort *op, intp n,FLOAT_to_USHORT2527,64722
DOUBLE_to_USHORT(double *ip, ushort *op, intp n,DOUBLE_to_USHORT2537,64941
LONGDOUBLE_to_USHORT(longdouble *ip, ushort *op, intp n,LONGDOUBLE_to_USHORT2547,65162
DATETIME_to_USHORT(datetime *ip, ushort *op, intp n,DATETIME_to_USHORT2557,65391
TIMEDELTA_to_USHORT(timedelta *ip, ushort *op, intp n,TIMEDELTA_to_USHORT2567,65616
CFLOAT_to_USHORT(float *ip, ushort *op, intp n,CFLOAT_to_USHORT2578,65845
CDOUBLE_to_USHORT(double *ip, ushort *op, intp n,CDOUBLE_to_USHORT2589,66081
CLONGDOUBLE_to_USHORT(longdouble *ip, ushort *op, intp n,CLONGDOUBLE_to_USHORT2600,66319
BYTE_to_INT(byte *ip, int *op, intp n,BYTE_to_INT2615,66583
UBYTE_to_INT(ubyte *ip, int *op, intp n,UBYTE_to_INT2625,66791
SHORT_to_INT(short *ip, int *op, intp n,SHORT_to_INT2635,67001
USHORT_to_INT(ushort *ip, int *op, intp n,USHORT_to_INT2645,67211
INT_to_INT(int *ip, int *op, intp n,INT_to_INT2655,67423
UINT_to_INT(uint *ip, int *op, intp n,UINT_to_INT2665,67629
LONG_to_INT(long *ip, int *op, intp n,LONG_to_INT2675,67837
ULONG_to_INT(ulong *ip, int *op, intp n,ULONG_to_INT2685,68045
LONGLONG_to_INT(longlong *ip, int *op, intp n,LONGLONG_to_INT2695,68255
ULONGLONG_to_INT(ulonglong *ip, int *op, intp n,ULONGLONG_to_INT2705,68471
FLOAT_to_INT(float *ip, int *op, intp n,FLOAT_to_INT2715,68689
DOUBLE_to_INT(double *ip, int *op, intp n,DOUBLE_to_INT2725,68899
LONGDOUBLE_to_INT(longdouble *ip, int *op, intp n,LONGDOUBLE_to_INT2735,69111
DATETIME_to_INT(datetime *ip, int *op, intp n,DATETIME_to_INT2745,69331
TIMEDELTA_to_INT(timedelta *ip, int *op, intp n,TIMEDELTA_to_INT2755,69547
CFLOAT_to_INT(float *ip, int *op, intp n,CFLOAT_to_INT2766,69767
CDOUBLE_to_INT(double *ip, int *op, intp n,CDOUBLE_to_INT2777,69994
CLONGDOUBLE_to_INT(longdouble *ip, int *op, intp n,CLONGDOUBLE_to_INT2788,70223
BYTE_to_UINT(byte *ip, uint *op, intp n,BYTE_to_UINT2803,70478
UBYTE_to_UINT(ubyte *ip, uint *op, intp n,UBYTE_to_UINT2813,70689
SHORT_to_UINT(short *ip, uint *op, intp n,SHORT_to_UINT2823,70902
USHORT_to_UINT(ushort *ip, uint *op, intp n,USHORT_to_UINT2833,71115
INT_to_UINT(int *ip, uint *op, intp n,INT_to_UINT2843,71330
UINT_to_UINT(uint *ip, uint *op, intp n,UINT_to_UINT2853,71539
LONG_to_UINT(long *ip, uint *op, intp n,LONG_to_UINT2863,71750
ULONG_to_UINT(ulong *ip, uint *op, intp n,ULONG_to_UINT2873,71961
LONGLONG_to_UINT(longlong *ip, uint *op, intp n,LONGLONG_to_UINT2883,72174
ULONGLONG_to_UINT(ulonglong *ip, uint *op, intp n,ULONGLONG_to_UINT2893,72393
FLOAT_to_UINT(float *ip, uint *op, intp n,FLOAT_to_UINT2903,72614
DOUBLE_to_UINT(double *ip, uint *op, intp n,DOUBLE_to_UINT2913,72827
LONGDOUBLE_to_UINT(longdouble *ip, uint *op, intp n,LONGDOUBLE_to_UINT2923,73042
DATETIME_to_UINT(datetime *ip, uint *op, intp n,DATETIME_to_UINT2933,73265
TIMEDELTA_to_UINT(timedelta *ip, uint *op, intp n,TIMEDELTA_to_UINT2943,73484
CFLOAT_to_UINT(float *ip, uint *op, intp n,CFLOAT_to_UINT2954,73707
CDOUBLE_to_UINT(double *ip, uint *op, intp n,CDOUBLE_to_UINT2965,73937
CLONGDOUBLE_to_UINT(longdouble *ip, uint *op, intp n,CLONGDOUBLE_to_UINT2976,74169
BYTE_to_LONG(byte *ip, long *op, intp n,BYTE_to_LONG2991,74427
UBYTE_to_LONG(ubyte *ip, long *op, intp n,UBYTE_to_LONG3001,74638
SHORT_to_LONG(short *ip, long *op, intp n,SHORT_to_LONG3011,74851
USHORT_to_LONG(ushort *ip, long *op, intp n,USHORT_to_LONG3021,75064
INT_to_LONG(int *ip, long *op, intp n,INT_to_LONG3031,75279
UINT_to_LONG(uint *ip, long *op, intp n,UINT_to_LONG3041,75488
LONG_to_LONG(long *ip, long *op, intp n,LONG_to_LONG3051,75699
ULONG_to_LONG(ulong *ip, long *op, intp n,ULONG_to_LONG3061,75910
LONGLONG_to_LONG(longlong *ip, long *op, intp n,LONGLONG_to_LONG3071,76123
ULONGLONG_to_LONG(ulonglong *ip, long *op, intp n,ULONGLONG_to_LONG3081,76342
FLOAT_to_LONG(float *ip, long *op, intp n,FLOAT_to_LONG3091,76563
DOUBLE_to_LONG(double *ip, long *op, intp n,DOUBLE_to_LONG3101,76776
LONGDOUBLE_to_LONG(longdouble *ip, long *op, intp n,LONGDOUBLE_to_LONG3111,76991
DATETIME_to_LONG(datetime *ip, long *op, intp n,DATETIME_to_LONG3121,77214
TIMEDELTA_to_LONG(timedelta *ip, long *op, intp n,TIMEDELTA_to_LONG3131,77433
CFLOAT_to_LONG(float *ip, long *op, intp n,CFLOAT_to_LONG3142,77656
CDOUBLE_to_LONG(double *ip, long *op, intp n,CDOUBLE_to_LONG3153,77886
CLONGDOUBLE_to_LONG(longdouble *ip, long *op, intp n,CLONGDOUBLE_to_LONG3164,78118
BYTE_to_ULONG(byte *ip, ulong *op, intp n,BYTE_to_ULONG3179,78376
UBYTE_to_ULONG(ubyte *ip, ulong *op, intp n,UBYTE_to_ULONG3189,78590
SHORT_to_ULONG(short *ip, ulong *op, intp n,SHORT_to_ULONG3199,78806
USHORT_to_ULONG(ushort *ip, ulong *op, intp n,USHORT_to_ULONG3209,79022
INT_to_ULONG(int *ip, ulong *op, intp n,INT_to_ULONG3219,79240
UINT_to_ULONG(uint *ip, ulong *op, intp n,UINT_to_ULONG3229,79452
LONG_to_ULONG(long *ip, ulong *op, intp n,LONG_to_ULONG3239,79666
ULONG_to_ULONG(ulong *ip, ulong *op, intp n,ULONG_to_ULONG3249,79880
LONGLONG_to_ULONG(longlong *ip, ulong *op, intp n,LONGLONG_to_ULONG3259,80096
ULONGLONG_to_ULONG(ulonglong *ip, ulong *op, intp n,ULONGLONG_to_ULONG3269,80318
FLOAT_to_ULONG(float *ip, ulong *op, intp n,FLOAT_to_ULONG3279,80542
DOUBLE_to_ULONG(double *ip, ulong *op, intp n,DOUBLE_to_ULONG3289,80758
LONGDOUBLE_to_ULONG(longdouble *ip, ulong *op, intp n,LONGDOUBLE_to_ULONG3299,80976
DATETIME_to_ULONG(datetime *ip, ulong *op, intp n,DATETIME_to_ULONG3309,81202
TIMEDELTA_to_ULONG(timedelta *ip, ulong *op, intp n,TIMEDELTA_to_ULONG3319,81424
CFLOAT_to_ULONG(float *ip, ulong *op, intp n,CFLOAT_to_ULONG3330,81650
CDOUBLE_to_ULONG(double *ip, ulong *op, intp n,CDOUBLE_to_ULONG3341,81883
CLONGDOUBLE_to_ULONG(longdouble *ip, ulong *op, intp n,CLONGDOUBLE_to_ULONG3352,82118
BYTE_to_LONGLONG(byte *ip, longlong *op, intp n,BYTE_to_LONGLONG3367,82379
UBYTE_to_LONGLONG(ubyte *ip, longlong *op, intp n,UBYTE_to_LONGLONG3377,82602
SHORT_to_LONGLONG(short *ip, longlong *op, intp n,SHORT_to_LONGLONG3387,82827
USHORT_to_LONGLONG(ushort *ip, longlong *op, intp n,USHORT_to_LONGLONG3397,83052
INT_to_LONGLONG(int *ip, longlong *op, intp n,INT_to_LONGLONG3407,83279
UINT_to_LONGLONG(uint *ip, longlong *op, intp n,UINT_to_LONGLONG3417,83500
LONG_to_LONGLONG(long *ip, longlong *op, intp n,LONG_to_LONGLONG3427,83723
ULONG_to_LONGLONG(ulong *ip, longlong *op, intp n,ULONG_to_LONGLONG3437,83946
LONGLONG_to_LONGLONG(longlong *ip, longlong *op, intp n,LONGLONG_to_LONGLONG3447,84171
ULONGLONG_to_LONGLONG(ulonglong *ip, longlong *op, intp n,ULONGLONG_to_LONGLONG3457,84402
FLOAT_to_LONGLONG(float *ip, longlong *op, intp n,FLOAT_to_LONGLONG3467,84635
DOUBLE_to_LONGLONG(double *ip, longlong *op, intp n,DOUBLE_to_LONGLONG3477,84860
LONGDOUBLE_to_LONGLONG(longdouble *ip, longlong *op, intp n,LONGDOUBLE_to_LONGLONG3487,85087
DATETIME_to_LONGLONG(datetime *ip, longlong *op, intp n,DATETIME_to_LONGLONG3497,85322
TIMEDELTA_to_LONGLONG(timedelta *ip, longlong *op, intp n,TIMEDELTA_to_LONGLONG3507,85553
CFLOAT_to_LONGLONG(float *ip, longlong *op, intp n,CFLOAT_to_LONGLONG3518,85788
CDOUBLE_to_LONGLONG(double *ip, longlong *op, intp n,CDOUBLE_to_LONGLONG3529,86030
CLONGDOUBLE_to_LONGLONG(longdouble *ip, longlong *op, intp n,CLONGDOUBLE_to_LONGLONG3540,86274
BYTE_to_ULONGLONG(byte *ip, ulonglong *op, intp n,BYTE_to_ULONGLONG3555,86544
UBYTE_to_ULONGLONG(ubyte *ip, ulonglong *op, intp n,UBYTE_to_ULONGLONG3565,86770
SHORT_to_ULONGLONG(short *ip, ulonglong *op, intp n,SHORT_to_ULONGLONG3575,86998
USHORT_to_ULONGLONG(ushort *ip, ulonglong *op, intp n,USHORT_to_ULONGLONG3585,87226
INT_to_ULONGLONG(int *ip, ulonglong *op, intp n,INT_to_ULONGLONG3595,87456
UINT_to_ULONGLONG(uint *ip, ulonglong *op, intp n,UINT_to_ULONGLONG3605,87680
LONG_to_ULONGLONG(long *ip, ulonglong *op, intp n,LONG_to_ULONGLONG3615,87906
ULONG_to_ULONGLONG(ulong *ip, ulonglong *op, intp n,ULONG_to_ULONGLONG3625,88132
LONGLONG_to_ULONGLONG(longlong *ip, ulonglong *op, intp n,LONGLONG_to_ULONGLONG3635,88360
ULONGLONG_to_ULONGLONG(ulonglong *ip, ulonglong *op, intp n,ULONGLONG_to_ULONGLONG3645,88594
FLOAT_to_ULONGLONG(float *ip, ulonglong *op, intp n,FLOAT_to_ULONGLONG3655,88830
DOUBLE_to_ULONGLONG(double *ip, ulonglong *op, intp n,DOUBLE_to_ULONGLONG3665,89058
LONGDOUBLE_to_ULONGLONG(longdouble *ip, ulonglong *op, intp n,LONGDOUBLE_to_ULONGLONG3675,89288
DATETIME_to_ULONGLONG(datetime *ip, ulonglong *op, intp n,DATETIME_to_ULONGLONG3685,89526
TIMEDELTA_to_ULONGLONG(timedelta *ip, ulonglong *op, intp n,TIMEDELTA_to_ULONGLONG3695,89760
CFLOAT_to_ULONGLONG(float *ip, ulonglong *op, intp n,CFLOAT_to_ULONGLONG3706,89998
CDOUBLE_to_ULONGLONG(double *ip, ulonglong *op, intp n,CDOUBLE_to_ULONGLONG3717,90243
CLONGDOUBLE_to_ULONGLONG(longdouble *ip, ulonglong *op, intp n,CLONGDOUBLE_to_ULONGLONG3728,90490
BYTE_to_FLOAT(byte *ip, float *op, intp n,BYTE_to_FLOAT3743,90763
UBYTE_to_FLOAT(ubyte *ip, float *op, intp n,UBYTE_to_FLOAT3753,90977
SHORT_to_FLOAT(short *ip, float *op, intp n,SHORT_to_FLOAT3763,91193
USHORT_to_FLOAT(ushort *ip, float *op, intp n,USHORT_to_FLOAT3773,91409
INT_to_FLOAT(int *ip, float *op, intp n,INT_to_FLOAT3783,91627
UINT_to_FLOAT(uint *ip, float *op, intp n,UINT_to_FLOAT3793,91839
LONG_to_FLOAT(long *ip, float *op, intp n,LONG_to_FLOAT3803,92053
ULONG_to_FLOAT(ulong *ip, float *op, intp n,ULONG_to_FLOAT3813,92267
LONGLONG_to_FLOAT(longlong *ip, float *op, intp n,LONGLONG_to_FLOAT3823,92483
ULONGLONG_to_FLOAT(ulonglong *ip, float *op, intp n,ULONGLONG_to_FLOAT3833,92705
FLOAT_to_FLOAT(float *ip, float *op, intp n,FLOAT_to_FLOAT3843,92929
DOUBLE_to_FLOAT(double *ip, float *op, intp n,DOUBLE_to_FLOAT3853,93145
LONGDOUBLE_to_FLOAT(longdouble *ip, float *op, intp n,LONGDOUBLE_to_FLOAT3863,93363
DATETIME_to_FLOAT(datetime *ip, float *op, intp n,DATETIME_to_FLOAT3873,93589
TIMEDELTA_to_FLOAT(timedelta *ip, float *op, intp n,TIMEDELTA_to_FLOAT3883,93811
CFLOAT_to_FLOAT(float *ip, float *op, intp n,CFLOAT_to_FLOAT3894,94037
CDOUBLE_to_FLOAT(double *ip, float *op, intp n,CDOUBLE_to_FLOAT3905,94270
CLONGDOUBLE_to_FLOAT(longdouble *ip, float *op, intp n,CLONGDOUBLE_to_FLOAT3916,94505
BYTE_to_DOUBLE(byte *ip, double *op, intp n,BYTE_to_DOUBLE3931,94766
UBYTE_to_DOUBLE(ubyte *ip, double *op, intp n,UBYTE_to_DOUBLE3941,94983
SHORT_to_DOUBLE(short *ip, double *op, intp n,SHORT_to_DOUBLE3951,95202
USHORT_to_DOUBLE(ushort *ip, double *op, intp n,USHORT_to_DOUBLE3961,95421
INT_to_DOUBLE(int *ip, double *op, intp n,INT_to_DOUBLE3971,95642
UINT_to_DOUBLE(uint *ip, double *op, intp n,UINT_to_DOUBLE3981,95857
LONG_to_DOUBLE(long *ip, double *op, intp n,LONG_to_DOUBLE3991,96074
ULONG_to_DOUBLE(ulong *ip, double *op, intp n,ULONG_to_DOUBLE4001,96291
LONGLONG_to_DOUBLE(longlong *ip, double *op, intp n,LONGLONG_to_DOUBLE4011,96510
ULONGLONG_to_DOUBLE(ulonglong *ip, double *op, intp n,ULONGLONG_to_DOUBLE4021,96735
FLOAT_to_DOUBLE(float *ip, double *op, intp n,FLOAT_to_DOUBLE4031,96962
DOUBLE_to_DOUBLE(double *ip, double *op, intp n,DOUBLE_to_DOUBLE4041,97181
LONGDOUBLE_to_DOUBLE(longdouble *ip, double *op, intp n,LONGDOUBLE_to_DOUBLE4051,97402
DATETIME_to_DOUBLE(datetime *ip, double *op, intp n,DATETIME_to_DOUBLE4061,97631
TIMEDELTA_to_DOUBLE(timedelta *ip, double *op, intp n,TIMEDELTA_to_DOUBLE4071,97856
CFLOAT_to_DOUBLE(float *ip, double *op, intp n,CFLOAT_to_DOUBLE4082,98085
CDOUBLE_to_DOUBLE(double *ip, double *op, intp n,CDOUBLE_to_DOUBLE4093,98321
CLONGDOUBLE_to_DOUBLE(longdouble *ip, double *op, intp n,CLONGDOUBLE_to_DOUBLE4104,98559
BYTE_to_LONGDOUBLE(byte *ip, longdouble *op, intp n,BYTE_to_LONGDOUBLE4119,98823
UBYTE_to_LONGDOUBLE(ubyte *ip, longdouble *op, intp n,UBYTE_to_LONGDOUBLE4129,99052
SHORT_to_LONGDOUBLE(short *ip, longdouble *op, intp n,SHORT_to_LONGDOUBLE4139,99283
USHORT_to_LONGDOUBLE(ushort *ip, longdouble *op, intp n,USHORT_to_LONGDOUBLE4149,99514
INT_to_LONGDOUBLE(int *ip, longdouble *op, intp n,INT_to_LONGDOUBLE4159,99747
UINT_to_LONGDOUBLE(uint *ip, longdouble *op, intp n,UINT_to_LONGDOUBLE4169,99974
LONG_to_LONGDOUBLE(long *ip, longdouble *op, intp n,LONG_to_LONGDOUBLE4179,100203
ULONG_to_LONGDOUBLE(ulong *ip, longdouble *op, intp n,ULONG_to_LONGDOUBLE4189,100432
LONGLONG_to_LONGDOUBLE(longlong *ip, longdouble *op, intp n,LONGLONG_to_LONGDOUBLE4199,100663
ULONGLONG_to_LONGDOUBLE(ulonglong *ip, longdouble *op, intp n,ULONGLONG_to_LONGDOUBLE4209,100900
FLOAT_to_LONGDOUBLE(float *ip, longdouble *op, intp n,FLOAT_to_LONGDOUBLE4219,101139
DOUBLE_to_LONGDOUBLE(double *ip, longdouble *op, intp n,DOUBLE_to_LONGDOUBLE4229,101370
LONGDOUBLE_to_LONGDOUBLE(longdouble *ip, longdouble *op, intp n,LONGDOUBLE_to_LONGDOUBLE4239,101603
DATETIME_to_LONGDOUBLE(datetime *ip, longdouble *op, intp n,DATETIME_to_LONGDOUBLE4249,101844
TIMEDELTA_to_LONGDOUBLE(timedelta *ip, longdouble *op, intp n,TIMEDELTA_to_LONGDOUBLE4259,102081
CFLOAT_to_LONGDOUBLE(float *ip, longdouble *op, intp n,CFLOAT_to_LONGDOUBLE4270,102322
CDOUBLE_to_LONGDOUBLE(double *ip, longdouble *op, intp n,CDOUBLE_to_LONGDOUBLE4281,102570
CLONGDOUBLE_to_LONGDOUBLE(longdouble *ip, longdouble *op, intp n,CLONGDOUBLE_to_LONGDOUBLE4292,102820
BYTE_to_DATETIME(byte *ip, datetime *op, intp n,BYTE_to_DATETIME4307,103096
UBYTE_to_DATETIME(ubyte *ip, datetime *op, intp n,UBYTE_to_DATETIME4317,103319
SHORT_to_DATETIME(short *ip, datetime *op, intp n,SHORT_to_DATETIME4327,103544
USHORT_to_DATETIME(ushort *ip, datetime *op, intp n,USHORT_to_DATETIME4337,103769
INT_to_DATETIME(int *ip, datetime *op, intp n,INT_to_DATETIME4347,103996
UINT_to_DATETIME(uint *ip, datetime *op, intp n,UINT_to_DATETIME4357,104217
LONG_to_DATETIME(long *ip, datetime *op, intp n,LONG_to_DATETIME4367,104440
ULONG_to_DATETIME(ulong *ip, datetime *op, intp n,ULONG_to_DATETIME4377,104663
LONGLONG_to_DATETIME(longlong *ip, datetime *op, intp n,LONGLONG_to_DATETIME4387,104888
ULONGLONG_to_DATETIME(ulonglong *ip, datetime *op, intp n,ULONGLONG_to_DATETIME4397,105119
FLOAT_to_DATETIME(float *ip, datetime *op, intp n,FLOAT_to_DATETIME4407,105352
DOUBLE_to_DATETIME(double *ip, datetime *op, intp n,DOUBLE_to_DATETIME4417,105577
LONGDOUBLE_to_DATETIME(longdouble *ip, datetime *op, intp n,LONGDOUBLE_to_DATETIME4427,105804
DATETIME_to_DATETIME(datetime *ip, datetime *op, intp n,DATETIME_to_DATETIME4437,106039
TIMEDELTA_to_DATETIME(timedelta *ip, datetime *op, intp n,TIMEDELTA_to_DATETIME4447,106270
CFLOAT_to_DATETIME(float *ip, datetime *op, intp n,CFLOAT_to_DATETIME4458,106505
CDOUBLE_to_DATETIME(double *ip, datetime *op, intp n,CDOUBLE_to_DATETIME4469,106747
CLONGDOUBLE_to_DATETIME(longdouble *ip, datetime *op, intp n,CLONGDOUBLE_to_DATETIME4480,106991
BYTE_to_TIMEDELTA(byte *ip, timedelta *op, intp n,BYTE_to_TIMEDELTA4495,107261
UBYTE_to_TIMEDELTA(ubyte *ip, timedelta *op, intp n,UBYTE_to_TIMEDELTA4505,107487
SHORT_to_TIMEDELTA(short *ip, timedelta *op, intp n,SHORT_to_TIMEDELTA4515,107715
USHORT_to_TIMEDELTA(ushort *ip, timedelta *op, intp n,USHORT_to_TIMEDELTA4525,107943
INT_to_TIMEDELTA(int *ip, timedelta *op, intp n,INT_to_TIMEDELTA4535,108173
UINT_to_TIMEDELTA(uint *ip, timedelta *op, intp n,UINT_to_TIMEDELTA4545,108397
LONG_to_TIMEDELTA(long *ip, timedelta *op, intp n,LONG_to_TIMEDELTA4555,108623
ULONG_to_TIMEDELTA(ulong *ip, timedelta *op, intp n,ULONG_to_TIMEDELTA4565,108849
LONGLONG_to_TIMEDELTA(longlong *ip, timedelta *op, intp n,LONGLONG_to_TIMEDELTA4575,109077
ULONGLONG_to_TIMEDELTA(ulonglong *ip, timedelta *op, intp n,ULONGLONG_to_TIMEDELTA4585,109311
FLOAT_to_TIMEDELTA(float *ip, timedelta *op, intp n,FLOAT_to_TIMEDELTA4595,109547
DOUBLE_to_TIMEDELTA(double *ip, timedelta *op, intp n,DOUBLE_to_TIMEDELTA4605,109775
LONGDOUBLE_to_TIMEDELTA(longdouble *ip, timedelta *op, intp n,LONGDOUBLE_to_TIMEDELTA4615,110005
DATETIME_to_TIMEDELTA(datetime *ip, timedelta *op, intp n,DATETIME_to_TIMEDELTA4625,110243
TIMEDELTA_to_TIMEDELTA(timedelta *ip, timedelta *op, intp n,TIMEDELTA_to_TIMEDELTA4635,110477
CFLOAT_to_TIMEDELTA(float *ip, timedelta *op, intp n,CFLOAT_to_TIMEDELTA4646,110715
CDOUBLE_to_TIMEDELTA(double *ip, timedelta *op, intp n,CDOUBLE_to_TIMEDELTA4657,110960
CLONGDOUBLE_to_TIMEDELTA(longdouble *ip, timedelta *op, intp n,CLONGDOUBLE_to_TIMEDELTA4668,111207
BOOL_to_BOOL(Bool *ip, Bool *op, intp n,BOOL_to_BOOL4683,111470
BYTE_to_BOOL(byte *ip, Bool *op, intp n,BYTE_to_BOOL4693,111692
UBYTE_to_BOOL(ubyte *ip, Bool *op, intp n,UBYTE_to_BOOL4703,111914
SHORT_to_BOOL(short *ip, Bool *op, intp n,SHORT_to_BOOL4713,112138
USHORT_to_BOOL(ushort *ip, Bool *op, intp n,USHORT_to_BOOL4723,112362
INT_to_BOOL(int *ip, Bool *op, intp n,INT_to_BOOL4733,112588
UINT_to_BOOL(uint *ip, Bool *op, intp n,UINT_to_BOOL4743,112808
LONG_to_BOOL(long *ip, Bool *op, intp n,LONG_to_BOOL4753,113030
ULONG_to_BOOL(ulong *ip, Bool *op, intp n,ULONG_to_BOOL4763,113252
LONGLONG_to_BOOL(longlong *ip, Bool *op, intp n,LONGLONG_to_BOOL4773,113476
ULONGLONG_to_BOOL(ulonglong *ip, Bool *op, intp n,ULONGLONG_to_BOOL4783,113706
FLOAT_to_BOOL(float *ip, Bool *op, intp n,FLOAT_to_BOOL4793,113938
DOUBLE_to_BOOL(double *ip, Bool *op, intp n,DOUBLE_to_BOOL4803,114162
LONGDOUBLE_to_BOOL(longdouble *ip, Bool *op, intp n,LONGDOUBLE_to_BOOL4813,114388
DATETIME_to_BOOL(datetime *ip, Bool *op, intp n,DATETIME_to_BOOL4823,114622
TIMEDELTA_to_BOOL(timedelta *ip, Bool *op, intp n,TIMEDELTA_to_BOOL4833,114852
CFLOAT_to_BOOL(cfloat *ip, Bool *op, intp n,CFLOAT_to_BOOL4844,115086
CDOUBLE_to_BOOL(cdouble *ip, Bool *op, intp n,CDOUBLE_to_BOOL4856,115372
CLONGDOUBLE_to_BOOL(clongdouble *ip, Bool *op, intp n,CLONGDOUBLE_to_BOOL4868,115660
BOOL_to_BYTE(Bool *ip, byte *op, intp n,BOOL_to_BYTE4881,115958
BOOL_to_UBYTE(Bool *ip, ubyte *op, intp n,BOOL_to_UBYTE4891,116178
BOOL_to_SHORT(Bool *ip, short *op, intp n,BOOL_to_SHORT4901,116401
BOOL_to_USHORT(Bool *ip, ushort *op, intp n,BOOL_to_USHORT4911,116624
BOOL_to_INT(Bool *ip, int *op, intp n,BOOL_to_INT4921,116850
BOOL_to_UINT(Bool *ip, uint *op, intp n,BOOL_to_UINT4931,117067
BOOL_to_LONG(Bool *ip, long *op, intp n,BOOL_to_LONG4941,117287
BOOL_to_ULONG(Bool *ip, ulong *op, intp n,BOOL_to_ULONG4951,117507
BOOL_to_LONGLONG(Bool *ip, longlong *op, intp n,BOOL_to_LONGLONG4961,117730
BOOL_to_ULONGLONG(Bool *ip, ulonglong *op, intp n,BOOL_to_ULONGLONG4971,117962
BOOL_to_FLOAT(Bool *ip, float *op, intp n,BOOL_to_FLOAT4981,118197
BOOL_to_DOUBLE(Bool *ip, double *op, intp n,BOOL_to_DOUBLE4991,118420
BOOL_to_LONGDOUBLE(Bool *ip, longdouble *op, intp n,BOOL_to_LONGDOUBLE5001,118646
BOOL_to_DATETIME(Bool *ip, datetime *op, intp n,BOOL_to_DATETIME5011,118884
BOOL_to_TIMEDELTA(Bool *ip, timedelta *op, intp n,BOOL_to_TIMEDELTA5021,119116
BOOL_to_CFLOAT(Bool *ip, float *op, intp n,BOOL_to_CFLOAT5034,119367
BYTE_to_CFLOAT(byte *ip, float *op, intp n,BYTE_to_CFLOAT5046,119606
UBYTE_to_CFLOAT(ubyte *ip, float *op, intp n,UBYTE_to_CFLOAT5058,119845
SHORT_to_CFLOAT(short *ip, float *op, intp n,SHORT_to_CFLOAT5070,120086
USHORT_to_CFLOAT(ushort *ip, float *op, intp n,USHORT_to_CFLOAT5082,120327
INT_to_CFLOAT(int *ip, float *op, intp n,INT_to_CFLOAT5094,120570
UINT_to_CFLOAT(uint *ip, float *op, intp n,UINT_to_CFLOAT5106,120807
LONG_to_CFLOAT(long *ip, float *op, intp n,LONG_to_CFLOAT5118,121046
ULONG_to_CFLOAT(ulong *ip, float *op, intp n,ULONG_to_CFLOAT5130,121285
LONGLONG_to_CFLOAT(longlong *ip, float *op, intp n,LONGLONG_to_CFLOAT5142,121526
ULONGLONG_to_CFLOAT(ulonglong *ip, float *op, intp n,ULONGLONG_to_CFLOAT5154,121773
FLOAT_to_CFLOAT(float *ip, float *op, intp n,FLOAT_to_CFLOAT5166,122022
DOUBLE_to_CFLOAT(double *ip, float *op, intp n,DOUBLE_to_CFLOAT5178,122263
LONGDOUBLE_to_CFLOAT(longdouble *ip, float *op, intp n,LONGDOUBLE_to_CFLOAT5190,122506
DATETIME_to_CFLOAT(datetime *ip, float *op, intp n,DATETIME_to_CFLOAT5202,122757
TIMEDELTA_to_CFLOAT(timedelta *ip, float *op, intp n,TIMEDELTA_to_CFLOAT5214,123004
BOOL_to_CDOUBLE(Bool *ip, double *op, intp n,BOOL_to_CDOUBLE5229,123269
BYTE_to_CDOUBLE(byte *ip, double *op, intp n,BYTE_to_CDOUBLE5241,123511
UBYTE_to_CDOUBLE(ubyte *ip, double *op, intp n,UBYTE_to_CDOUBLE5253,123753
SHORT_to_CDOUBLE(short *ip, double *op, intp n,SHORT_to_CDOUBLE5265,123997
USHORT_to_CDOUBLE(ushort *ip, double *op, intp n,USHORT_to_CDOUBLE5277,124241
INT_to_CDOUBLE(int *ip, double *op, intp n,INT_to_CDOUBLE5289,124487
UINT_to_CDOUBLE(uint *ip, double *op, intp n,UINT_to_CDOUBLE5301,124727
LONG_to_CDOUBLE(long *ip, double *op, intp n,LONG_to_CDOUBLE5313,124969
ULONG_to_CDOUBLE(ulong *ip, double *op, intp n,ULONG_to_CDOUBLE5325,125211
LONGLONG_to_CDOUBLE(longlong *ip, double *op, intp n,LONGLONG_to_CDOUBLE5337,125455
ULONGLONG_to_CDOUBLE(ulonglong *ip, double *op, intp n,ULONGLONG_to_CDOUBLE5349,125705
FLOAT_to_CDOUBLE(float *ip, double *op, intp n,FLOAT_to_CDOUBLE5361,125957
DOUBLE_to_CDOUBLE(double *ip, double *op, intp n,DOUBLE_to_CDOUBLE5373,126201
LONGDOUBLE_to_CDOUBLE(longdouble *ip, double *op, intp n,LONGDOUBLE_to_CDOUBLE5385,126447
DATETIME_to_CDOUBLE(datetime *ip, double *op, intp n,DATETIME_to_CDOUBLE5397,126701
TIMEDELTA_to_CDOUBLE(timedelta *ip, double *op, intp n,TIMEDELTA_to_CDOUBLE5409,126951
BOOL_to_CLONGDOUBLE(Bool *ip, longdouble *op, intp n,BOOL_to_CLONGDOUBLE5424,127219
BYTE_to_CLONGDOUBLE(byte *ip, longdouble *op, intp n,BYTE_to_CLONGDOUBLE5436,127473
UBYTE_to_CLONGDOUBLE(ubyte *ip, longdouble *op, intp n,UBYTE_to_CLONGDOUBLE5448,127727
SHORT_to_CLONGDOUBLE(short *ip, longdouble *op, intp n,SHORT_to_CLONGDOUBLE5460,127983
USHORT_to_CLONGDOUBLE(ushort *ip, longdouble *op, intp n,USHORT_to_CLONGDOUBLE5472,128239
INT_to_CLONGDOUBLE(int *ip, longdouble *op, intp n,INT_to_CLONGDOUBLE5484,128497
UINT_to_CLONGDOUBLE(uint *ip, longdouble *op, intp n,UINT_to_CLONGDOUBLE5496,128749
LONG_to_CLONGDOUBLE(long *ip, longdouble *op, intp n,LONG_to_CLONGDOUBLE5508,129003
ULONG_to_CLONGDOUBLE(ulong *ip, longdouble *op, intp n,ULONG_to_CLONGDOUBLE5520,129257
LONGLONG_to_CLONGDOUBLE(longlong *ip, longdouble *op, intp n,LONGLONG_to_CLONGDOUBLE5532,129513
ULONGLONG_to_CLONGDOUBLE(ulonglong *ip, longdouble *op, intp n,ULONGLONG_to_CLONGDOUBLE5544,129775
FLOAT_to_CLONGDOUBLE(float *ip, longdouble *op, intp n,FLOAT_to_CLONGDOUBLE5556,130039
DOUBLE_to_CLONGDOUBLE(double *ip, longdouble *op, intp n,DOUBLE_to_CLONGDOUBLE5568,130295
LONGDOUBLE_to_CLONGDOUBLE(longdouble *ip, longdouble *op, intp n,LONGDOUBLE_to_CLONGDOUBLE5580,130553
DATETIME_to_CLONGDOUBLE(datetime *ip, longdouble *op, intp n,DATETIME_to_CLONGDOUBLE5592,130819
TIMEDELTA_to_CLONGDOUBLE(timedelta *ip, longdouble *op, intp n,TIMEDELTA_to_CLONGDOUBLE5604,131081
CFLOAT_to_CFLOAT(float *ip, float *op, intp n,CFLOAT_to_CFLOAT5620,131363
CDOUBLE_to_CFLOAT(double *ip, float *op, intp n,CDOUBLE_to_CFLOAT5632,131597
CLONGDOUBLE_to_CFLOAT(longdouble *ip, float *op, intp n,CLONGDOUBLE_to_CFLOAT5644,131833
CFLOAT_to_CDOUBLE(float *ip, double *op, intp n,CFLOAT_to_CDOUBLE5659,132093
CDOUBLE_to_CDOUBLE(double *ip, double *op, intp n,CDOUBLE_to_CDOUBLE5671,132330
CLONGDOUBLE_to_CDOUBLE(longdouble *ip, double *op, intp n,CLONGDOUBLE_to_CDOUBLE5683,132569
CFLOAT_to_CLONGDOUBLE(float *ip, longdouble *op, intp n,CFLOAT_to_CLONGDOUBLE5698,132832
CDOUBLE_to_CLONGDOUBLE(double *ip, longdouble *op, intp n,CDOUBLE_to_CLONGDOUBLE5710,133081
CLONGDOUBLE_to_CLONGDOUBLE(longdouble *ip, longdouble *op, intp n,CLONGDOUBLE_to_CLONGDOUBLE5722,133332
BOOL_to_OBJECT(Bool *ip, PyObject **op, intp n, PyArrayObject *aip,BOOL_to_OBJECT5736,133595
BYTE_to_OBJECT(byte *ip, PyObject **op, intp n, PyArrayObject *aip,BYTE_to_OBJECT5749,133906
UBYTE_to_OBJECT(ubyte *ip, PyObject **op, intp n, PyArrayObject *aip,UBYTE_to_OBJECT5762,134217
SHORT_to_OBJECT(short *ip, PyObject **op, intp n, PyArrayObject *aip,SHORT_to_OBJECT5775,134531
USHORT_to_OBJECT(ushort *ip, PyObject **op, intp n, PyArrayObject *aip,USHORT_to_OBJECT5788,134845
INT_to_OBJECT(int *ip, PyObject **op, intp n, PyArrayObject *aip,INT_to_OBJECT5801,135162
UINT_to_OBJECT(uint *ip, PyObject **op, intp n, PyArrayObject *aip,UINT_to_OBJECT5814,135470
LONG_to_OBJECT(long *ip, PyObject **op, intp n, PyArrayObject *aip,LONG_to_OBJECT5827,135781
ULONG_to_OBJECT(ulong *ip, PyObject **op, intp n, PyArrayObject *aip,ULONG_to_OBJECT5840,136092
LONGLONG_to_OBJECT(longlong *ip, PyObject **op, intp n, PyArrayObject *aip,LONGLONG_to_OBJECT5853,136406
ULONGLONG_to_OBJECT(ulonglong *ip, PyObject **op, intp n, PyArrayObject *aip,ULONGLONG_to_OBJECT5866,136729
FLOAT_to_OBJECT(float *ip, PyObject **op, intp n, PyArrayObject *aip,FLOAT_to_OBJECT5879,137055
DOUBLE_to_OBJECT(double *ip, PyObject **op, intp n, PyArrayObject *aip,DOUBLE_to_OBJECT5892,137369
LONGDOUBLE_to_OBJECT(longdouble *ip, PyObject **op, intp n, PyArrayObject *aip,LONGDOUBLE_to_OBJECT5905,137686
CFLOAT_to_OBJECT(cfloat *ip, PyObject **op, intp n, PyArrayObject *aip,CFLOAT_to_OBJECT5918,138015
CDOUBLE_to_OBJECT(cdouble *ip, PyObject **op, intp n, PyArrayObject *aip,CDOUBLE_to_OBJECT5931,138332
CLONGDOUBLE_to_OBJECT(clongdouble *ip, PyObject **op, intp n, PyArrayObject *aip,CLONGDOUBLE_to_OBJECT5944,138652
STRING_to_OBJECT(char *ip, PyObject **op, intp n, PyArrayObject *aip,STRING_to_OBJECT5957,138984
UNICODE_to_OBJECT(char *ip, PyObject **op, intp n, PyArrayObject *aip,UNICODE_to_OBJECT5970,139316
VOID_to_OBJECT(char *ip, PyObject **op, intp n, PyArrayObject *aip,VOID_to_OBJECT5983,139650
OBJECT_to_OBJECT(PyObject * *ip, PyObject **op, intp n, PyArrayObject *aip,OBJECT_to_OBJECT5996,139978
DATETIME_to_OBJECT(datetime *ip, PyObject **op, intp n, PyArrayObject *aip,DATETIME_to_OBJECT6009,140299
TIMEDELTA_to_OBJECT(timedelta *ip, PyObject **op, intp n, PyArrayObject *aip,TIMEDELTA_to_OBJECT6022,140622
#define _NPY_UNUSEDBOOL _NPY_UNUSEDBOOL6034,140925
#define _NPY_UNUSEDBYTE _NPY_UNUSEDBYTE6035,140962
#define _NPY_UNUSEDUBYTE _NPY_UNUSEDUBYTE6036,140999
#define _NPY_UNUSEDSHORT _NPY_UNUSEDSHORT6037,141037
#define _NPY_UNUSEDUSHORT _NPY_UNUSEDUSHORT6038,141075
#define _NPY_UNUSEDINT _NPY_UNUSEDINT6039,141114
#define _NPY_UNUSEDUINT _NPY_UNUSEDUINT6040,141150
#define _NPY_UNUSEDLONG _NPY_UNUSEDLONG6041,141187
#define _NPY_UNUSEDULONG _NPY_UNUSEDULONG6042,141224
#define _NPY_UNUSEDLONGLONG _NPY_UNUSEDLONGLONG6043,141262
#define _NPY_UNUSEDULONGLONG _NPY_UNUSEDULONGLONG6044,141303
#define _NPY_UNUSEDFLOAT _NPY_UNUSEDFLOAT6045,141345
#define _NPY_UNUSEDDOUBLE _NPY_UNUSEDDOUBLE6046,141383
#define _NPY_UNUSEDLONGDOUBLE _NPY_UNUSEDLONGDOUBLE6047,141422
#define _NPY_UNUSEDCFLOAT _NPY_UNUSEDCFLOAT6048,141465
#define _NPY_UNUSEDCDOUBLE _NPY_UNUSEDCDOUBLE6049,141504
#define _NPY_UNUSEDCLONGDOUBLE _NPY_UNUSEDCLONGDOUBLE6050,141544
#define _NPY_UNUSEDDATETIME _NPY_UNUSEDDATETIME6051,141588
#define _NPY_UNUSEDTIMEDELTA _NPY_UNUSEDTIMEDELTA6052,141629
#define _NPY_UNUSEDSTRING_NPY_UNUSEDSTRING6053,141671
#define _NPY_UNUSEDVOID_NPY_UNUSEDVOID6054,141698
#define _NPY_UNUSEDUNICODE_NPY_UNUSEDUNICODE6055,141723
OBJECT_to_BOOL(PyObject **ip, Bool *op, intp n,OBJECT_to_BOOL6059,141778
OBJECT_to_BYTE(PyObject **ip, byte *op, intp n,OBJECT_to_BYTE6077,142185
OBJECT_to_UBYTE(PyObject **ip, ubyte *op, intp n,OBJECT_to_UBYTE6095,142592
OBJECT_to_SHORT(PyObject **ip, short *op, intp n,OBJECT_to_SHORT6113,143004
OBJECT_to_USHORT(PyObject **ip, ushort *op, intp n,OBJECT_to_USHORT6131,143416
OBJECT_to_INT(PyObject **ip, int *op, intp n,OBJECT_to_INT6149,143833
OBJECT_to_UINT(PyObject **ip, uint *op, intp n,OBJECT_to_UINT6167,144235
OBJECT_to_LONG(PyObject **ip, long *op, intp n,OBJECT_to_LONG6185,144642
OBJECT_to_ULONG(PyObject **ip, ulong *op, intp n,OBJECT_to_ULONG6203,145049
OBJECT_to_LONGLONG(PyObject **ip, longlong *op, intp n,OBJECT_to_LONGLONG6221,145461
OBJECT_to_ULONGLONG(PyObject **ip, ulonglong *op, intp n,OBJECT_to_ULONGLONG6239,145888
OBJECT_to_FLOAT(PyObject **ip, float *op, intp n,OBJECT_to_FLOAT6257,146320
OBJECT_to_DOUBLE(PyObject **ip, double *op, intp n,OBJECT_to_DOUBLE6275,146732
OBJECT_to_LONGDOUBLE(PyObject **ip, longdouble *op, intp n,OBJECT_to_LONGDOUBLE6293,147149
OBJECT_to_CFLOAT(PyObject **ip, cfloat *op, intp n,OBJECT_to_CFLOAT6311,147586
OBJECT_to_CDOUBLE(PyObject **ip, cdouble *op, intp n,OBJECT_to_CDOUBLE6329,148003
OBJECT_to_CLONGDOUBLE(PyObject **ip, clongdouble *op, intp n,OBJECT_to_CLONGDOUBLE6347,148425
OBJECT_to_STRING(PyObject **ip, char *op, intp n,OBJECT_to_STRING6365,148867
OBJECT_to_UNICODE(PyObject **ip, char *op, intp n,OBJECT_to_UNICODE6383,149299
OBJECT_to_VOID(PyObject **ip, char *op, intp n,OBJECT_to_VOID6401,149735
OBJECT_to_DATETIME(PyObject **ip, datetime *op, intp n,OBJECT_to_DATETIME6419,150159
OBJECT_to_TIMEDELTA(PyObject **ip, timedelta *op, intp n,OBJECT_to_TIMEDELTA6437,150586
STRING_to_BOOL(char *ip, Bool *op, intp n, PyArrayObject *aip,STRING_to_BOOL6457,151022
#define PyInt_Type PyInt_Type6476,151631
#undef PyInt_TypePyInt_Type6480,151757
STRING_to_BYTE(char *ip, byte *op, intp n, PyArrayObject *aip,STRING_to_BYTE6498,152099
#define PyInt_Type PyInt_Type6517,152708
#undef PyInt_TypePyInt_Type6521,152834
STRING_to_UBYTE(char *ip, ubyte *op, intp n, PyArrayObject *aip,STRING_to_UBYTE6539,153176
#define PyInt_Type PyInt_Type6558,153787
#undef PyInt_TypePyInt_Type6562,153913
STRING_to_SHORT(char *ip, short *op, intp n, PyArrayObject *aip,STRING_to_SHORT6580,154256
#define PyInt_Type PyInt_Type6599,154867
#undef PyInt_TypePyInt_Type6603,154993
STRING_to_USHORT(char *ip, ushort *op, intp n, PyArrayObject *aip,STRING_to_USHORT6621,155336
#define PyInt_Type PyInt_Type6640,155949
#undef PyInt_TypePyInt_Type6644,156075
STRING_to_INT(char *ip, int *op, intp n, PyArrayObject *aip,STRING_to_INT6662,156419
#define PyInt_Type PyInt_Type6681,157026
#undef PyInt_TypePyInt_Type6685,157152
STRING_to_UINT(char *ip, uint *op, intp n, PyArrayObject *aip,STRING_to_UINT6703,157493
#define PyInt_Type PyInt_Type6722,158102
#undef PyInt_TypePyInt_Type6726,158228
STRING_to_LONG(char *ip, long *op, intp n, PyArrayObject *aip,STRING_to_LONG6744,158570
#define PyInt_Type PyInt_Type6763,159179
#undef PyInt_TypePyInt_Type6767,159305
STRING_to_ULONG(char *ip, ulong *op, intp n, PyArrayObject *aip,STRING_to_ULONG6785,159647
#define PyInt_Type PyInt_Type6804,160258
#undef PyInt_TypePyInt_Type6808,160384
STRING_to_LONGLONG(char *ip, longlong *op, intp n, PyArrayObject *aip,STRING_to_LONGLONG6826,160727
#define PyInt_Type PyInt_Type6845,161344
#undef PyInt_TypePyInt_Type6849,161472
STRING_to_ULONGLONG(char *ip, ulonglong *op, intp n, PyArrayObject *aip,STRING_to_ULONGLONG6867,161818
#define PyInt_Type PyInt_Type6886,162437
#undef PyInt_TypePyInt_Type6890,162565
STRING_to_FLOAT(char *ip, float *op, intp n, PyArrayObject *aip,STRING_to_FLOAT6908,162912
#define PyInt_Type PyInt_Type6927,163523
#undef PyInt_TypePyInt_Type6931,163653
STRING_to_DOUBLE(char *ip, double *op, intp n, PyArrayObject *aip,STRING_to_DOUBLE6949,163996
#define PyInt_Type PyInt_Type6968,164609
#undef PyInt_TypePyInt_Type6972,164739
STRING_to_LONGDOUBLE(char *ip, longdouble *op, intp n, PyArrayObject *aip,STRING_to_LONGDOUBLE6990,165083
#define PyInt_Type PyInt_Type7009,165704
#undef PyInt_TypePyInt_Type7013,165834
STRING_to_CFLOAT(char *ip, cfloat *op, intp n, PyArrayObject *aip,STRING_to_CFLOAT7031,166182
#define PyInt_Type PyInt_Type7050,166795
#undef PyInt_TypePyInt_Type7054,166929
STRING_to_CDOUBLE(char *ip, cdouble *op, intp n, PyArrayObject *aip,STRING_to_CDOUBLE7072,167273
#define PyInt_Type PyInt_Type7091,167888
#undef PyInt_TypePyInt_Type7095,168022
STRING_to_CLONGDOUBLE(char *ip, clongdouble *op, intp n, PyArrayObject *aip,STRING_to_CLONGDOUBLE7113,168367
#define PyInt_Type PyInt_Type7132,168990
#undef PyInt_TypePyInt_Type7136,169124
STRING_to_STRING(char *ip, char *op, intp n, PyArrayObject *aip,STRING_to_STRING7154,169473
#define PyInt_Type PyInt_Type7173,170101
#undef PyInt_TypePyInt_Type7177,170231
STRING_to_UNICODE(char *ip, char *op, intp n, PyArrayObject *aip,STRING_to_UNICODE7195,170575
#define PyInt_Type PyInt_Type7214,171204
#undef PyInt_TypePyInt_Type7218,171334
STRING_to_VOID(char *ip, char *op, intp n, PyArrayObject *aip,STRING_to_VOID7236,171679
#define PyInt_Type PyInt_Type7255,172305
#undef PyInt_TypePyInt_Type7259,172435
STRING_to_DATETIME(char *ip, datetime *op, intp n, PyArrayObject *aip,STRING_to_DATETIME7277,172777
#define PyInt_Type PyInt_Type7296,173394
#undef PyInt_TypePyInt_Type7300,173522
STRING_to_TIMEDELTA(char *ip, timedelta *op, intp n, PyArrayObject *aip,STRING_to_TIMEDELTA7318,173868
#define PyInt_Type PyInt_Type7337,174487
#undef PyInt_TypePyInt_Type7341,174615
UNICODE_to_BOOL(char *ip, Bool *op, intp n, PyArrayObject *aip,UNICODE_to_BOOL7359,174962
#define PyInt_Type PyInt_Type7378,175573
#undef PyInt_TypePyInt_Type7382,175699
UNICODE_to_BYTE(char *ip, byte *op, intp n, PyArrayObject *aip,UNICODE_to_BYTE7400,176041
#define PyInt_Type PyInt_Type7419,176652
#undef PyInt_TypePyInt_Type7423,176778
UNICODE_to_UBYTE(char *ip, ubyte *op, intp n, PyArrayObject *aip,UNICODE_to_UBYTE7441,177120
#define PyInt_Type PyInt_Type7460,177733
#undef PyInt_TypePyInt_Type7464,177859
UNICODE_to_SHORT(char *ip, short *op, intp n, PyArrayObject *aip,UNICODE_to_SHORT7482,178202
#define PyInt_Type PyInt_Type7501,178815
#undef PyInt_TypePyInt_Type7505,178941
UNICODE_to_USHORT(char *ip, ushort *op, intp n, PyArrayObject *aip,UNICODE_to_USHORT7523,179284
#define PyInt_Type PyInt_Type7542,179899
#undef PyInt_TypePyInt_Type7546,180025
UNICODE_to_INT(char *ip, int *op, intp n, PyArrayObject *aip,UNICODE_to_INT7564,180369
#define PyInt_Type PyInt_Type7583,180978
#undef PyInt_TypePyInt_Type7587,181104
UNICODE_to_UINT(char *ip, uint *op, intp n, PyArrayObject *aip,UNICODE_to_UINT7605,181445
#define PyInt_Type PyInt_Type7624,182056
#undef PyInt_TypePyInt_Type7628,182182
UNICODE_to_LONG(char *ip, long *op, intp n, PyArrayObject *aip,UNICODE_to_LONG7646,182524
#define PyInt_Type PyInt_Type7665,183135
#undef PyInt_TypePyInt_Type7669,183261
UNICODE_to_ULONG(char *ip, ulong *op, intp n, PyArrayObject *aip,UNICODE_to_ULONG7687,183603
#define PyInt_Type PyInt_Type7706,184216
#undef PyInt_TypePyInt_Type7710,184342
UNICODE_to_LONGLONG(char *ip, longlong *op, intp n, PyArrayObject *aip,UNICODE_to_LONGLONG7728,184685
#define PyInt_Type PyInt_Type7747,185304
#undef PyInt_TypePyInt_Type7751,185432
UNICODE_to_ULONGLONG(char *ip, ulonglong *op, intp n, PyArrayObject *aip,UNICODE_to_ULONGLONG7769,185778
#define PyInt_Type PyInt_Type7788,186399
#undef PyInt_TypePyInt_Type7792,186527
UNICODE_to_FLOAT(char *ip, float *op, intp n, PyArrayObject *aip,UNICODE_to_FLOAT7810,186874
#define PyInt_Type PyInt_Type7829,187487
#undef PyInt_TypePyInt_Type7833,187617
UNICODE_to_DOUBLE(char *ip, double *op, intp n, PyArrayObject *aip,UNICODE_to_DOUBLE7851,187960
#define PyInt_Type PyInt_Type7870,188575
#undef PyInt_TypePyInt_Type7874,188705
UNICODE_to_LONGDOUBLE(char *ip, longdouble *op, intp n, PyArrayObject *aip,UNICODE_to_LONGDOUBLE7892,189049
#define PyInt_Type PyInt_Type7911,189672
#undef PyInt_TypePyInt_Type7915,189802
UNICODE_to_CFLOAT(char *ip, cfloat *op, intp n, PyArrayObject *aip,UNICODE_to_CFLOAT7933,190150
#define PyInt_Type PyInt_Type7952,190765
#undef PyInt_TypePyInt_Type7956,190899
UNICODE_to_CDOUBLE(char *ip, cdouble *op, intp n, PyArrayObject *aip,UNICODE_to_CDOUBLE7974,191243
#define PyInt_Type PyInt_Type7993,191860
#undef PyInt_TypePyInt_Type7997,191994
UNICODE_to_CLONGDOUBLE(char *ip, clongdouble *op, intp n, PyArrayObject *aip,UNICODE_to_CLONGDOUBLE8015,192339
#define PyInt_Type PyInt_Type8034,192964
#undef PyInt_TypePyInt_Type8038,193098
UNICODE_to_STRING(char *ip, char *op, intp n, PyArrayObject *aip,UNICODE_to_STRING8056,193447
#define PyInt_Type PyInt_Type8075,194077
#undef PyInt_TypePyInt_Type8079,194207
UNICODE_to_UNICODE(char *ip, char *op, intp n, PyArrayObject *aip,UNICODE_to_UNICODE8097,194551
#define PyInt_Type PyInt_Type8116,195182
#undef PyInt_TypePyInt_Type8120,195312
UNICODE_to_VOID(char *ip, char *op, intp n, PyArrayObject *aip,UNICODE_to_VOID8138,195657
#define PyInt_Type PyInt_Type8157,196285
#undef PyInt_TypePyInt_Type8161,196415
UNICODE_to_DATETIME(char *ip, datetime *op, intp n, PyArrayObject *aip,UNICODE_to_DATETIME8179,196757
#define PyInt_Type PyInt_Type8198,197376
#undef PyInt_TypePyInt_Type8202,197504
UNICODE_to_TIMEDELTA(char *ip, timedelta *op, intp n, PyArrayObject *aip,UNICODE_to_TIMEDELTA8220,197850
#define PyInt_Type PyInt_Type8239,198471
#undef PyInt_TypePyInt_Type8243,198599
VOID_to_BOOL(char *ip, Bool *op, intp n, PyArrayObject *aip,VOID_to_BOOL8261,198946
#define PyInt_Type PyInt_Type8280,199551
#undef PyInt_TypePyInt_Type8284,199677
VOID_to_BYTE(char *ip, byte *op, intp n, PyArrayObject *aip,VOID_to_BYTE8302,200019
#define PyInt_Type PyInt_Type8321,200624
#undef PyInt_TypePyInt_Type8325,200750
VOID_to_UBYTE(char *ip, ubyte *op, intp n, PyArrayObject *aip,VOID_to_UBYTE8343,201092
#define PyInt_Type PyInt_Type8362,201699
#undef PyInt_TypePyInt_Type8366,201825
VOID_to_SHORT(char *ip, short *op, intp n, PyArrayObject *aip,VOID_to_SHORT8384,202168
#define PyInt_Type PyInt_Type8403,202775
#undef PyInt_TypePyInt_Type8407,202901
VOID_to_USHORT(char *ip, ushort *op, intp n, PyArrayObject *aip,VOID_to_USHORT8425,203244
#define PyInt_Type PyInt_Type8444,203853
#undef PyInt_TypePyInt_Type8448,203979
VOID_to_INT(char *ip, int *op, intp n, PyArrayObject *aip,VOID_to_INT8466,204323
#define PyInt_Type PyInt_Type8485,204926
#undef PyInt_TypePyInt_Type8489,205052
VOID_to_UINT(char *ip, uint *op, intp n, PyArrayObject *aip,VOID_to_UINT8507,205393
#define PyInt_Type PyInt_Type8526,205998
#undef PyInt_TypePyInt_Type8530,206124
VOID_to_LONG(char *ip, long *op, intp n, PyArrayObject *aip,VOID_to_LONG8548,206466
#define PyInt_Type PyInt_Type8567,207071
#undef PyInt_TypePyInt_Type8571,207197
VOID_to_ULONG(char *ip, ulong *op, intp n, PyArrayObject *aip,VOID_to_ULONG8589,207539
#define PyInt_Type PyInt_Type8608,208146
#undef PyInt_TypePyInt_Type8612,208272
VOID_to_LONGLONG(char *ip, longlong *op, intp n, PyArrayObject *aip,VOID_to_LONGLONG8630,208615
#define PyInt_Type PyInt_Type8649,209228
#undef PyInt_TypePyInt_Type8653,209356
VOID_to_ULONGLONG(char *ip, ulonglong *op, intp n, PyArrayObject *aip,VOID_to_ULONGLONG8671,209702
#define PyInt_Type PyInt_Type8690,210317
#undef PyInt_TypePyInt_Type8694,210445
VOID_to_FLOAT(char *ip, float *op, intp n, PyArrayObject *aip,VOID_to_FLOAT8712,210792
#define PyInt_Type PyInt_Type8731,211399
#undef PyInt_TypePyInt_Type8735,211529
VOID_to_DOUBLE(char *ip, double *op, intp n, PyArrayObject *aip,VOID_to_DOUBLE8753,211872
#define PyInt_Type PyInt_Type8772,212481
#undef PyInt_TypePyInt_Type8776,212611
VOID_to_LONGDOUBLE(char *ip, longdouble *op, intp n, PyArrayObject *aip,VOID_to_LONGDOUBLE8794,212955
#define PyInt_Type PyInt_Type8813,213572
#undef PyInt_TypePyInt_Type8817,213702
VOID_to_CFLOAT(char *ip, cfloat *op, intp n, PyArrayObject *aip,VOID_to_CFLOAT8835,214050
#define PyInt_Type PyInt_Type8854,214659
#undef PyInt_TypePyInt_Type8858,214793
VOID_to_CDOUBLE(char *ip, cdouble *op, intp n, PyArrayObject *aip,VOID_to_CDOUBLE8876,215137
#define PyInt_Type PyInt_Type8895,215748
#undef PyInt_TypePyInt_Type8899,215882
VOID_to_CLONGDOUBLE(char *ip, clongdouble *op, intp n, PyArrayObject *aip,VOID_to_CLONGDOUBLE8917,216227
#define PyInt_Type PyInt_Type8936,216846
#undef PyInt_TypePyInt_Type8940,216980
VOID_to_STRING(char *ip, char *op, intp n, PyArrayObject *aip,VOID_to_STRING8958,217329
#define PyInt_Type PyInt_Type8977,217953
#undef PyInt_TypePyInt_Type8981,218083
VOID_to_UNICODE(char *ip, char *op, intp n, PyArrayObject *aip,VOID_to_UNICODE8999,218427
#define PyInt_Type PyInt_Type9018,219052
#undef PyInt_TypePyInt_Type9022,219182
VOID_to_VOID(char *ip, char *op, intp n, PyArrayObject *aip,VOID_to_VOID9040,219527
#define PyInt_Type PyInt_Type9059,220149
#undef PyInt_TypePyInt_Type9063,220279
VOID_to_DATETIME(char *ip, datetime *op, intp n, PyArrayObject *aip,VOID_to_DATETIME9081,220621
#define PyInt_Type PyInt_Type9100,221234
#undef PyInt_TypePyInt_Type9104,221362
VOID_to_TIMEDELTA(char *ip, timedelta *op, intp n, PyArrayObject *aip,VOID_to_TIMEDELTA9122,221708
#define PyInt_Type PyInt_Type9141,222323
#undef PyInt_TypePyInt_Type9145,222451
BOOL_to_STRING(Bool *ip, char *op, intp n, PyArrayObject *aip,BOOL_to_STRING9165,222802
BYTE_to_STRING(byte *ip, char *op, intp n, PyArrayObject *aip,BYTE_to_STRING9189,223387
UBYTE_to_STRING(ubyte *ip, char *op, intp n, PyArrayObject *aip,UBYTE_to_STRING9213,223972
SHORT_to_STRING(short *ip, char *op, intp n, PyArrayObject *aip,SHORT_to_STRING9237,224560
USHORT_to_STRING(ushort *ip, char *op, intp n, PyArrayObject *aip,USHORT_to_STRING9261,225148
INT_to_STRING(int *ip, char *op, intp n, PyArrayObject *aip,INT_to_STRING9285,225739
UINT_to_STRING(uint *ip, char *op, intp n, PyArrayObject *aip,UINT_to_STRING9309,226321
LONG_to_STRING(long *ip, char *op, intp n, PyArrayObject *aip,LONG_to_STRING9333,226906
ULONG_to_STRING(ulong *ip, char *op, intp n, PyArrayObject *aip,ULONG_to_STRING9357,227491
LONGLONG_to_STRING(longlong *ip, char *op, intp n, PyArrayObject *aip,LONGLONG_to_STRING9381,228079
ULONGLONG_to_STRING(ulonglong *ip, char *op, intp n, PyArrayObject *aip,ULONGLONG_to_STRING9405,228676
FLOAT_to_STRING(float *ip, char *op, intp n, PyArrayObject *aip,FLOAT_to_STRING9429,229276
DOUBLE_to_STRING(double *ip, char *op, intp n, PyArrayObject *aip,DOUBLE_to_STRING9453,229864
LONGDOUBLE_to_STRING(longdouble *ip, char *op, intp n, PyArrayObject *aip,LONGDOUBLE_to_STRING9477,230455
CFLOAT_to_STRING(cfloat *ip, char *op, intp n, PyArrayObject *aip,CFLOAT_to_STRING9501,231058
CDOUBLE_to_STRING(cdouble *ip, char *op, intp n, PyArrayObject *aip,CDOUBLE_to_STRING9525,231649
CLONGDOUBLE_to_STRING(clongdouble *ip, char *op, intp n, PyArrayObject *aip,CLONGDOUBLE_to_STRING9549,232243
DATETIME_to_STRING(datetime *ip, char *op, intp n, PyArrayObject *aip,DATETIME_to_STRING9573,232849
TIMEDELTA_to_STRING(timedelta *ip, char *op, intp n, PyArrayObject *aip,TIMEDELTA_to_STRING9597,233446
BOOL_to_UNICODE(Bool *ip, char *op, intp n, PyArrayObject *aip,BOOL_to_UNICODE9621,234046
BYTE_to_UNICODE(byte *ip, char *op, intp n, PyArrayObject *aip,BYTE_to_UNICODE9645,234633
UBYTE_to_UNICODE(ubyte *ip, char *op, intp n, PyArrayObject *aip,UBYTE_to_UNICODE9669,235220
SHORT_to_UNICODE(short *ip, char *op, intp n, PyArrayObject *aip,SHORT_to_UNICODE9693,235810
USHORT_to_UNICODE(ushort *ip, char *op, intp n, PyArrayObject *aip,USHORT_to_UNICODE9717,236400
INT_to_UNICODE(int *ip, char *op, intp n, PyArrayObject *aip,INT_to_UNICODE9741,236993
UINT_to_UNICODE(uint *ip, char *op, intp n, PyArrayObject *aip,UINT_to_UNICODE9765,237577
LONG_to_UNICODE(long *ip, char *op, intp n, PyArrayObject *aip,LONG_to_UNICODE9789,238164
ULONG_to_UNICODE(ulong *ip, char *op, intp n, PyArrayObject *aip,ULONG_to_UNICODE9813,238751
LONGLONG_to_UNICODE(longlong *ip, char *op, intp n, PyArrayObject *aip,LONGLONG_to_UNICODE9837,239341
ULONGLONG_to_UNICODE(ulonglong *ip, char *op, intp n, PyArrayObject *aip,ULONGLONG_to_UNICODE9861,239940
FLOAT_to_UNICODE(float *ip, char *op, intp n, PyArrayObject *aip,FLOAT_to_UNICODE9885,240542
DOUBLE_to_UNICODE(double *ip, char *op, intp n, PyArrayObject *aip,DOUBLE_to_UNICODE9909,241132
LONGDOUBLE_to_UNICODE(longdouble *ip, char *op, intp n, PyArrayObject *aip,LONGDOUBLE_to_UNICODE9933,241725
CFLOAT_to_UNICODE(cfloat *ip, char *op, intp n, PyArrayObject *aip,CFLOAT_to_UNICODE9957,242330
CDOUBLE_to_UNICODE(cdouble *ip, char *op, intp n, PyArrayObject *aip,CDOUBLE_to_UNICODE9981,242923
CLONGDOUBLE_to_UNICODE(clongdouble *ip, char *op, intp n, PyArrayObject *aip,CLONGDOUBLE_to_UNICODE10005,243519
DATETIME_to_UNICODE(datetime *ip, char *op, intp n, PyArrayObject *aip,DATETIME_to_UNICODE10029,244127
TIMEDELTA_to_UNICODE(timedelta *ip, char *op, intp n, PyArrayObject *aip,TIMEDELTA_to_UNICODE10053,244726
BOOL_to_VOID(Bool *ip, char *op, intp n, PyArrayObject *aip,BOOL_to_VOID10077,245328
BYTE_to_VOID(byte *ip, char *op, intp n, PyArrayObject *aip,BYTE_to_VOID10101,245909
UBYTE_to_VOID(ubyte *ip, char *op, intp n, PyArrayObject *aip,UBYTE_to_VOID10125,246490
SHORT_to_VOID(short *ip, char *op, intp n, PyArrayObject *aip,SHORT_to_VOID10149,247074
USHORT_to_VOID(ushort *ip, char *op, intp n, PyArrayObject *aip,USHORT_to_VOID10173,247658
INT_to_VOID(int *ip, char *op, intp n, PyArrayObject *aip,INT_to_VOID10197,248245
UINT_to_VOID(uint *ip, char *op, intp n, PyArrayObject *aip,UINT_to_VOID10221,248823
LONG_to_VOID(long *ip, char *op, intp n, PyArrayObject *aip,LONG_to_VOID10245,249404
ULONG_to_VOID(ulong *ip, char *op, intp n, PyArrayObject *aip,ULONG_to_VOID10269,249985
LONGLONG_to_VOID(longlong *ip, char *op, intp n, PyArrayObject *aip,LONGLONG_to_VOID10293,250569
ULONGLONG_to_VOID(ulonglong *ip, char *op, intp n, PyArrayObject *aip,ULONGLONG_to_VOID10317,251162
FLOAT_to_VOID(float *ip, char *op, intp n, PyArrayObject *aip,FLOAT_to_VOID10341,251758
DOUBLE_to_VOID(double *ip, char *op, intp n, PyArrayObject *aip,DOUBLE_to_VOID10365,252342
LONGDOUBLE_to_VOID(longdouble *ip, char *op, intp n, PyArrayObject *aip,LONGDOUBLE_to_VOID10389,252929
CFLOAT_to_VOID(cfloat *ip, char *op, intp n, PyArrayObject *aip,CFLOAT_to_VOID10413,253528
CDOUBLE_to_VOID(cdouble *ip, char *op, intp n, PyArrayObject *aip,CDOUBLE_to_VOID10437,254115
CLONGDOUBLE_to_VOID(clongdouble *ip, char *op, intp n, PyArrayObject *aip,CLONGDOUBLE_to_VOID10461,254705
DATETIME_to_VOID(datetime *ip, char *op, intp n, PyArrayObject *aip,DATETIME_to_VOID10485,255307
TIMEDELTA_to_VOID(timedelta *ip, char *op, intp n, PyArrayObject *aip,TIMEDELTA_to_VOID10509,255900
SHORT_scan(FILE *fp, short *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))SHORT_scan10547,256882
USHORT_scan(FILE *fp, ushort *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))USHORT_scan10554,257046
INT_scan(FILE *fp, int *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))INT_scan10561,257212
UINT_scan(FILE *fp, uint *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))UINT_scan10568,257371
LONG_scan(FILE *fp, long *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))LONG_scan10575,257532
ULONG_scan(FILE *fp, ulong *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))ULONG_scan10582,257694
LONGLONG_scan(FILE *fp, longlong *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))LONGLONG_scan10589,257858
ULONGLONG_scan(FILE *fp, ulonglong *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))ULONGLONG_scan10596,258036
FLOAT_scan(FILE *fp, float *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))FLOAT_scan10604,258219
DOUBLE_scan(FILE *fp, double *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))DOUBLE_scan10616,258471
LONGDOUBLE_scan(FILE *fp, longdouble *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))LONGDOUBLE_scan10628,258726
BYTE_scan(FILE *fp, byte *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignore2))BYTE_scan10641,258995
UBYTE_scan(FILE *fp, ubyte *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignore2))UBYTE_scan10653,259230
BOOL_scan(FILE *fp, Bool *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignore2))BOOL_scan10665,259459
#define CFLOAT_scan CFLOAT_scan10676,259687
#define CDOUBLE_scan CDOUBLE_scan10679,259727
#define CLONGDOUBLE_scan CLONGDOUBLE_scan10682,259768
#define OBJECT_scan OBJECT_scan10685,259813
#define STRING_scan STRING_scan10688,259853
#define UNICODE_scan UNICODE_scan10691,259893
#define VOID_scan VOID_scan10694,259934
#define DATETIME_scan DATETIME_scan10697,259972
#define TIMEDELTA_scan TIMEDELTA_scan10700,260014
BYTE_fromstr(char *str, byte *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))BYTE_fromstr10713,260326
UBYTE_fromstr(char *str, ubyte *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))UBYTE_fromstr10724,260548
SHORT_fromstr(char *str, short *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))SHORT_fromstr10735,260775
USHORT_fromstr(char *str, ushort *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))USHORT_fromstr10746,261000
INT_fromstr(char *str, int *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))INT_fromstr10757,261230
UINT_fromstr(char *str, uint *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))UINT_fromstr10768,261449
LONG_fromstr(char *str, long *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))LONG_fromstr10779,261673
ULONG_fromstr(char *str, ulong *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))ULONG_fromstr10790,261895
LONGLONG_fromstr(char *str, longlong *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))LONGLONG_fromstr10801,262122
ULONGLONG_fromstr(char *str, ulonglong *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))ULONGLONG_fromstr10812,262356
DATETIME_fromstr(char *str, datetime *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))DATETIME_fromstr10823,262595
TIMEDELTA_fromstr(char *str, timedelta *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))TIMEDELTA_fromstr10834,262829
FLOAT_fromstr(char *str, float *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))FLOAT_fromstr10846,263068
DOUBLE_fromstr(char *str, double *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))DOUBLE_fromstr10857,263300
LONGDOUBLE_fromstr(char *str, longdouble *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))LONGDOUBLE_fromstr10868,263535
#define BOOL_fromstr BOOL_fromstr10881,263776
#define CFLOAT_fromstr CFLOAT_fromstr10884,263817
#define CDOUBLE_fromstr CDOUBLE_fromstr10887,263860
#define CLONGDOUBLE_fromstr CLONGDOUBLE_fromstr10890,263904
#define OBJECT_fromstr OBJECT_fromstr10893,263952
#define STRING_fromstr STRING_fromstr10896,263995
#define UNICODE_fromstr UNICODE_fromstr10899,264038
#define VOID_fromstr VOID_fromstr10902,264082
SHORT_copyswapn (void *dst, intp dstride, void *src, intp sstride,SHORT_copyswapn10915,264393
SHORT_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))SHORT_copyswap10933,264924
USHORT_copyswapn (void *dst, intp dstride, void *src, intp sstride,USHORT_copyswapn11001,266751
USHORT_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))USHORT_copyswap11019,267288
INT_copyswapn (void *dst, intp dstride, void *src, intp sstride,INT_copyswapn11087,269117
INT_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))INT_copyswap11105,269636
UINT_copyswapn (void *dst, intp dstride, void *src, intp sstride,UINT_copyswapn11173,271443
UINT_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))UINT_copyswap11191,271968
LONG_copyswapn (void *dst, intp dstride, void *src, intp sstride,LONG_copyswapn11259,273777
LONG_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))LONG_copyswap11277,274302
ULONG_copyswapn (void *dst, intp dstride, void *src, intp sstride,ULONG_copyswapn11345,276119
ULONG_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))ULONG_copyswap11363,276650
LONGLONG_copyswapn (void *dst, intp dstride, void *src, intp sstride,LONGLONG_copyswapn11431,278469
LONGLONG_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))LONGLONG_copyswap11449,279018
ULONGLONG_copyswapn (void *dst, intp dstride, void *src, intp sstride,ULONGLONG_copyswapn11517,280875
ULONGLONG_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))ULONGLONG_copyswap11535,281430
FLOAT_copyswapn (void *dst, intp dstride, void *src, intp sstride,FLOAT_copyswapn11603,283289
FLOAT_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))FLOAT_copyswap11621,283820
DOUBLE_copyswapn (void *dst, intp dstride, void *src, intp sstride,DOUBLE_copyswapn11689,285647
DOUBLE_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))DOUBLE_copyswap11707,286184
LONGDOUBLE_copyswapn (void *dst, intp dstride, void *src, intp sstride,LONGDOUBLE_copyswapn11775,288021
LONGDOUBLE_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))LONGDOUBLE_copyswap11793,288582
DATETIME_copyswapn (void *dst, intp dstride, void *src, intp sstride,DATETIME_copyswapn11861,290459
DATETIME_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))DATETIME_copyswap11879,291008
TIMEDELTA_copyswapn (void *dst, intp dstride, void *src, intp sstride,TIMEDELTA_copyswapn11947,292865
TIMEDELTA_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))TIMEDELTA_copyswap11965,293420
BOOL_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,BOOL_copyswapn12034,295289
BOOL_copyswap (void *dst, void *src, int NPY_UNUSED(swap), void *NPY_UNUSED(arr))BOOL_copyswap12050,295765
BYTE_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,BYTE_copyswapn12062,296014
BYTE_copyswap (void *dst, void *src, int NPY_UNUSED(swap), void *NPY_UNUSED(arr))BYTE_copyswap12078,296490
UBYTE_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,UBYTE_copyswapn12090,296739
UBYTE_copyswap (void *dst, void *src, int NPY_UNUSED(swap), void *NPY_UNUSED(arr))UBYTE_copyswap12106,297220
CFLOAT_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,CFLOAT_copyswapn12121,297477
CFLOAT_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))CFLOAT_copyswap12144,298154
CDOUBLE_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,CDOUBLE_copyswapn12249,301259
CDOUBLE_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))CDOUBLE_copyswap12272,301944
CLONGDOUBLE_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,CLONGDOUBLE_copyswapn12377,305060
CLONGDOUBLE_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))CLONGDOUBLE_copyswap12400,305777
OBJECT_copyswapn (PyObject **dst, intp dstride, PyObject **src, intp sstride,OBJECT_copyswapn12505,308927
OBJECT_copyswap(PyObject **dst, PyObject **src, int NPY_UNUSED(swap), void *NPY_UNUSED(arr))OBJECT_copyswap12545,310252
STRING_copyswapn (char *dst, intp dstride, char *src, intp sstride,STRING_copyswapn12567,310862
VOID_copyswapn (char *dst, intp dstride, char *src, intp sstride,VOID_copyswapn12586,311380
VOID_copyswap (char *dst, char *src, int swap, PyArrayObject *arr)VOID_copyswap12647,313149
UNICODE_copyswapn (char *dst, intp dstride, char *src, intp sstride,UNICODE_copyswapn12698,314556
STRING_copyswap(char *dst, char *src, int NPY_UNUSED(swap), PyArrayObject *arr)STRING_copyswap12738,315479
UNICODE_copyswap (char *dst, char *src, int swap, PyArrayObject *arr)UNICODE_copyswap12746,315674
BOOL_nonzero (char *ip, PyArrayObject *ap)BOOL_nonzero12783,316529
BYTE_nonzero (char *ip, PyArrayObject *ap)BYTE_nonzero12802,316974
UBYTE_nonzero (char *ip, PyArrayObject *ap)UBYTE_nonzero12821,317419
SHORT_nonzero (char *ip, PyArrayObject *ap)SHORT_nonzero12840,317869
USHORT_nonzero (char *ip, PyArrayObject *ap)USHORT_nonzero12859,318319
INT_nonzero (char *ip, PyArrayObject *ap)INT_nonzero12878,318774
UINT_nonzero (char *ip, PyArrayObject *ap)UINT_nonzero12897,319214
LONG_nonzero (char *ip, PyArrayObject *ap)LONG_nonzero12916,319659
ULONG_nonzero (char *ip, PyArrayObject *ap)ULONG_nonzero12935,320104
LONGLONG_nonzero (char *ip, PyArrayObject *ap)LONGLONG_nonzero12954,320554
ULONGLONG_nonzero (char *ip, PyArrayObject *ap)ULONGLONG_nonzero12973,321019
FLOAT_nonzero (char *ip, PyArrayObject *ap)FLOAT_nonzero12992,321489
DOUBLE_nonzero (char *ip, PyArrayObject *ap)DOUBLE_nonzero13011,321939
LONGDOUBLE_nonzero (char *ip, PyArrayObject *ap)LONGDOUBLE_nonzero13030,322394
DATETIME_nonzero (char *ip, PyArrayObject *ap)DATETIME_nonzero13049,322869
TIMEDELTA_nonzero (char *ip, PyArrayObject *ap)TIMEDELTA_nonzero13068,323334
CFLOAT_nonzero (char *ip, PyArrayObject *ap)CFLOAT_nonzero13088,323806
CDOUBLE_nonzero (char *ip, PyArrayObject *ap)CDOUBLE_nonzero13107,324315
CLONGDOUBLE_nonzero (char *ip, PyArrayObject *ap)CLONGDOUBLE_nonzero13126,324829
#define WHITESPACE WHITESPACE13145,325342
#define WHITELEN WHITELEN13146,325376
Py_STRING_ISSPACE(char ch)Py_STRING_ISSPACE13149,325411
STRING_nonzero (char *ip, PyArrayObject *ap)STRING_nonzero13165,325684
#define PyArray_UCS4_ISSPACE PyArray_UCS4_ISSPACE13182,326004
#define PyArray_UCS4_ISSPACE(PyArray_UCS4_ISSPACE13184,326060
UNICODE_nonzero (PyArray_UCS4 *ip, PyArrayObject *ap)UNICODE_nonzero13188,326145
OBJECT_nonzero (PyObject **ip, PyArrayObject *ap)OBJECT_nonzero13219,326902
VOID_nonzero (char *ip, PyArrayObject *ap)VOID_nonzero13242,327405
#undef __ALIGNED__ALIGNED13293,328759
BOOL_compare(Bool *ip1, Bool *ip2, PyArrayObject *NPY_UNUSED(ap))BOOL_compare13306,329068
BYTE_compare (byte *pa, byte *pb, PyArrayObject *NPY_UNUSED(ap))BYTE_compare13317,329249
UBYTE_compare (ubyte *pa, ubyte *pb, PyArrayObject *NPY_UNUSED(ap))UBYTE_compare13329,329444
SHORT_compare (short *pa, short *pb, PyArrayObject *NPY_UNUSED(ap))SHORT_compare13341,329644
USHORT_compare (ushort *pa, ushort *pb, PyArrayObject *NPY_UNUSED(ap))USHORT_compare13353,329844
INT_compare (int *pa, int *pb, PyArrayObject *NPY_UNUSED(ap))INT_compare13365,330049
UINT_compare (uint *pa, uint *pb, PyArrayObject *NPY_UNUSED(ap))UINT_compare13377,330239
LONG_compare (long *pa, long *pb, PyArrayObject *NPY_UNUSED(ap))LONG_compare13389,330434
ULONG_compare (ulong *pa, ulong *pb, PyArrayObject *NPY_UNUSED(ap))ULONG_compare13401,330629
LONGLONG_compare (longlong *pa, longlong *pb, PyArrayObject *NPY_UNUSED(ap))LONGLONG_compare13413,330829
ULONGLONG_compare (ulonglong *pa, ulonglong *pb, PyArrayObject *NPY_UNUSED(ap))ULONGLONG_compare13425,331044
DATETIME_compare (datetime *pa, datetime *pb, PyArrayObject *NPY_UNUSED(ap))DATETIME_compare13437,331264
TIMEDELTA_compare (timedelta *pa, timedelta *pb, PyArrayObject *NPY_UNUSED(ap))TIMEDELTA_compare13449,331479
#define LT(LT13480,332373
FLOAT_compare(float *pa, float *pb)FLOAT_compare13483,332445
CFLOAT_compare(float *pa, float *pb)CFLOAT_compare13503,332722
#undef LTLT13548,333539
#define LT(LT13553,333568
DOUBLE_compare(double *pa, double *pb)DOUBLE_compare13556,333640
CDOUBLE_compare(double *pa, double *pb)CDOUBLE_compare13576,333922
#undef LTLT13621,334746
#define LT(LT13626,334775
LONGDOUBLE_compare(longdouble *pa, longdouble *pb)LONGDOUBLE_compare13629,334847
CLONGDOUBLE_compare(longdouble *pa, longdouble *pb)CLONGDOUBLE_compare13649,335149
#undef LTLT13694,336001
OBJECT_compare(PyObject **ip1, PyObject **ip2, PyArrayObject *NPY_UNUSED(ap))OBJECT_compare13702,336053
STRING_compare(char *ip1, char *ip2, PyArrayObject *ap)STRING_compare13737,336838
UNICODE_compare(PyArray_UCS4 *ip1, PyArray_UCS4 *ip2,UNICODE_compare13756,337247
VOID_compare(char *ip1, char *ip2, PyArrayObject *ap)VOID_compare13786,337943
BOOL_argmax(Bool *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))BOOL_argmax13867,340460
BYTE_argmax(byte *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))BYTE_argmax13886,340780
UBYTE_argmax(ubyte *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))UBYTE_argmax13905,341100
SHORT_argmax(short *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))SHORT_argmax13924,341423
USHORT_argmax(ushort *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))USHORT_argmax13943,341746
INT_argmax(int *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))INT_argmax13962,342072
UINT_argmax(uint *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))UINT_argmax13981,342389
LONG_argmax(long *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))LONG_argmax14000,342709
ULONG_argmax(ulong *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))ULONG_argmax14019,343029
LONGLONG_argmax(longlong *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))LONGLONG_argmax14038,343352
ULONGLONG_argmax(ulonglong *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))ULONGLONG_argmax14057,343684
FLOAT_argmax(float *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))FLOAT_argmax14076,344019
DOUBLE_argmax(double *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))DOUBLE_argmax14095,344342
LONGDOUBLE_argmax(longdouble *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))LONGDOUBLE_argmax14114,344668
CFLOAT_argmax(float *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))CFLOAT_argmax14133,345006
CDOUBLE_argmax(double *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))CDOUBLE_argmax14152,345331
CLONGDOUBLE_argmax(longdouble *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))CLONGDOUBLE_argmax14171,345659
DATETIME_argmax(datetime *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))DATETIME_argmax14190,345999
TIMEDELTA_argmax(timedelta *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))TIMEDELTA_argmax14209,346331
OBJECT_argmax(PyObject **ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))OBJECT_argmax14228,346656
STRING_argmax(char *ip, intp n, intp *max_ind, PyArrayObject *aip)STRING_argmax14255,347223
UNICODE_argmax(PyArray_UCS4 *ip, intp n, intp *max_ind, PyArrayObject *aip)UNICODE_argmax14278,347710
#define VOID_argmax VOID_argmax14300,348201
BOOL_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,BOOL_dot14314,348534
BYTE_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,BYTE_dot14331,348918
UBYTE_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,UBYTE_dot14346,349275
SHORT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,SHORT_dot14361,349641
USHORT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,USHORT_dot14376,350003
INT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,INT_dot14391,350374
UINT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,UINT_dot14406,350726
LONG_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,LONG_dot14421,351087
ULONG_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,ULONG_dot14436,351444
LONGLONG_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,LONGLONG_dot14451,351810
ULONGLONG_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,ULONGLONG_dot14466,352203
FLOAT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,FLOAT_dot14481,352605
DOUBLE_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,DOUBLE_dot14496,352971
LONGDOUBLE_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,LONGDOUBLE_dot14511,353346
DATETIME_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,DATETIME_dot14526,353757
TIMEDELTA_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,TIMEDELTA_dot14541,354150
static void CFLOAT_dot(char *ip1, intp is1, char *ip2, intp is2,CFLOAT_dot14557,354543
static void CDOUBLE_dot(char *ip1, intp is1, char *ip2, intp is2,CDOUBLE_dot14574,355104
static void CLONGDOUBLE_dot(char *ip1, intp is1, char *ip2, intp is2,CLONGDOUBLE_dot14591,355679
OBJECT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,OBJECT_dot14609,356313
#define BOOL_fill BOOL_fill14659,357757
OBJECT_fill(PyObject **buffer, intp length, void *NPY_UNUSED(ignored))OBJECT_fill14663,357858
BYTE_fill(byte *buffer, intp length, void *NPY_UNUSED(ignored))BYTE_fill14695,358505
UBYTE_fill(ubyte *buffer, intp length, void *NPY_UNUSED(ignored))UBYTE_fill14709,358778
SHORT_fill(short *buffer, intp length, void *NPY_UNUSED(ignored))SHORT_fill14723,359055
USHORT_fill(ushort *buffer, intp length, void *NPY_UNUSED(ignored))USHORT_fill14737,359332
INT_fill(int *buffer, intp length, void *NPY_UNUSED(ignored))INT_fill14751,359613
UINT_fill(uint *buffer, intp length, void *NPY_UNUSED(ignored))UINT_fill14765,359882
LONG_fill(long *buffer, intp length, void *NPY_UNUSED(ignored))LONG_fill14779,360155
ULONG_fill(ulong *buffer, intp length, void *NPY_UNUSED(ignored))ULONG_fill14793,360428
LONGLONG_fill(longlong *buffer, intp length, void *NPY_UNUSED(ignored))LONGLONG_fill14807,360705
ULONGLONG_fill(ulonglong *buffer, intp length, void *NPY_UNUSED(ignored))ULONGLONG_fill14821,360994
FLOAT_fill(float *buffer, intp length, void *NPY_UNUSED(ignored))FLOAT_fill14835,361287
DOUBLE_fill(double *buffer, intp length, void *NPY_UNUSED(ignored))DOUBLE_fill14849,361564
LONGDOUBLE_fill(longdouble *buffer, intp length, void *NPY_UNUSED(ignored))LONGDOUBLE_fill14863,361845
DATETIME_fill(datetime *buffer, intp length, void *NPY_UNUSED(ignored))DATETIME_fill14877,362142
TIMEDELTA_fill(timedelta *buffer, intp length, void *NPY_UNUSED(ignored))TIMEDELTA_fill14891,362431
CFLOAT_fill(cfloat *buffer, intp length, void *NPY_UNUSED(ignore))CFLOAT_fill14906,362726
CDOUBLE_fill(cdouble *buffer, intp length, void *NPY_UNUSED(ignore))CDOUBLE_fill14927,363247
CLONGDOUBLE_fill(clongdouble *buffer, intp length, void *NPY_UNUSED(ignore))CLONGDOUBLE_fill14948,363772
OBJECT_fillwithscalar(PyObject **buffer, intp length, PyObject **value, void *NPY_UNUSED(ignored))OBJECT_fillwithscalar14971,364367
BOOL_fillwithscalar(Bool *buffer, intp length, Bool *value, void *NPY_UNUSED(ignored))BOOL_fillwithscalar14983,364667
BYTE_fillwithscalar(byte *buffer, intp length, byte *value, void *NPY_UNUSED(ignored))BYTE_fillwithscalar14990,364825
UBYTE_fillwithscalar(ubyte *buffer, intp length, ubyte *value, void *NPY_UNUSED(ignored))UBYTE_fillwithscalar14997,364983
SHORT_fillwithscalar(short *buffer, intp length, short *value, void *NPY_UNUSED(ignored))SHORT_fillwithscalar15005,365146
USHORT_fillwithscalar(ushort *buffer, intp length, ushort *value, void *NPY_UNUSED(ignored))USHORT_fillwithscalar15017,365379
INT_fillwithscalar(int *buffer, intp length, int *value, void *NPY_UNUSED(ignored))INT_fillwithscalar15029,365616
UINT_fillwithscalar(uint *buffer, intp length, uint *value, void *NPY_UNUSED(ignored))UINT_fillwithscalar15041,365841
LONG_fillwithscalar(long *buffer, intp length, long *value, void *NPY_UNUSED(ignored))LONG_fillwithscalar15053,366070
ULONG_fillwithscalar(ulong *buffer, intp length, ulong *value, void *NPY_UNUSED(ignored))ULONG_fillwithscalar15065,366299
LONGLONG_fillwithscalar(longlong *buffer, intp length, longlong *value, void *NPY_UNUSED(ignored))LONGLONG_fillwithscalar15077,366532
ULONGLONG_fillwithscalar(ulonglong *buffer, intp length, ulonglong *value, void *NPY_UNUSED(ignored))ULONGLONG_fillwithscalar15089,366777
FLOAT_fillwithscalar(float *buffer, intp length, float *value, void *NPY_UNUSED(ignored))FLOAT_fillwithscalar15101,367026
DOUBLE_fillwithscalar(double *buffer, intp length, double *value, void *NPY_UNUSED(ignored))DOUBLE_fillwithscalar15113,367259
LONGDOUBLE_fillwithscalar(longdouble *buffer, intp length, longdouble *value, void *NPY_UNUSED(ignored))LONGDOUBLE_fillwithscalar15125,367496
CFLOAT_fillwithscalar(cfloat *buffer, intp length, cfloat *value, void *NPY_UNUSED(ignored))CFLOAT_fillwithscalar15137,367749
CDOUBLE_fillwithscalar(cdouble *buffer, intp length, cdouble *value, void *NPY_UNUSED(ignored))CDOUBLE_fillwithscalar15149,367986
CLONGDOUBLE_fillwithscalar(clongdouble *buffer, intp length, clongdouble *value, void *NPY_UNUSED(ignored))CLONGDOUBLE_fillwithscalar15161,368227
DATETIME_fillwithscalar(datetime *buffer, intp length, datetime *value, void *NPY_UNUSED(ignored))DATETIME_fillwithscalar15173,368484
TIMEDELTA_fillwithscalar(timedelta *buffer, intp length, timedelta *value, void *NPY_UNUSED(ignored))TIMEDELTA_fillwithscalar15185,368729
BOOL_fastclip(Bool *in, intp ni, Bool *min, Bool *max, Bool *out)BOOL_fastclip15206,369235
BYTE_fastclip(byte *in, intp ni, byte *min, byte *max, byte *out)BYTE_fastclip15245,370082
UBYTE_fastclip(ubyte *in, intp ni, ubyte *min, ubyte *max, ubyte *out)UBYTE_fastclip15284,370929
SHORT_fastclip(short *in, intp ni, short *min, short *max, short *out)SHORT_fastclip15323,371782
USHORT_fastclip(ushort *in, intp ni, ushort *min, ushort *max, ushort *out)USHORT_fastclip15362,372635
INT_fastclip(int *in, intp ni, int *min, int *max, int *out)INT_fastclip15401,373494
UINT_fastclip(uint *in, intp ni, uint *min, uint *max, uint *out)UINT_fastclip15440,374335
LONG_fastclip(long *in, intp ni, long *min, long *max, long *out)LONG_fastclip15479,375182
ULONG_fastclip(ulong *in, intp ni, ulong *min, ulong *max, ulong *out)ULONG_fastclip15518,376029
LONGLONG_fastclip(longlong *in, intp ni, longlong *min, longlong *max, longlong *out)LONGLONG_fastclip15557,376882
ULONGLONG_fastclip(ulonglong *in, intp ni, ulonglong *min, ulonglong *max, ulonglong *out)ULONGLONG_fastclip15596,377753
FLOAT_fastclip(float *in, intp ni, float *min, float *max, float *out)FLOAT_fastclip15635,378630
DOUBLE_fastclip(double *in, intp ni, double *min, double *max, double *out)DOUBLE_fastclip15674,379483
LONGDOUBLE_fastclip(longdouble *in, intp ni, longdouble *min, longdouble *max, longdouble *out)LONGDOUBLE_fastclip15713,380342
DATETIME_fastclip(datetime *in, intp ni, datetime *min, datetime *max, datetime *out)DATETIME_fastclip15752,381225
TIMEDELTA_fastclip(timedelta *in, intp ni, timedelta *min, timedelta *max, timedelta *out)TIMEDELTA_fastclip15791,382096
CFLOAT_fastclip(cfloat *in, intp ni, cfloat *min, cfloat *max, cfloat *out)CFLOAT_fastclip15831,382975
CDOUBLE_fastclip(cdouble *in, intp ni, cdouble *min, cdouble *max, cdouble *out)CDOUBLE_fastclip15873,383913
CLONGDOUBLE_fastclip(clongdouble *in, intp ni, clongdouble *min, clongdouble *max, clongdouble *out)CLONGDOUBLE_fastclip15915,384857
#define OBJECT_fastclip OBJECT_fastclip15956,385802
BOOL_fastputmask(Bool *in, Bool *mask, intp ni, Bool *vals, intp nv)BOOL_fastputmask15968,386114
BYTE_fastputmask(byte *in, Bool *mask, intp ni, byte *vals, intp nv)BYTE_fastputmask15993,386585
UBYTE_fastputmask(ubyte *in, Bool *mask, intp ni, ubyte *vals, intp nv)UBYTE_fastputmask16018,387056
SHORT_fastputmask(short *in, Bool *mask, intp ni, short *vals, intp nv)SHORT_fastputmask16043,387531
USHORT_fastputmask(ushort *in, Bool *mask, intp ni, ushort *vals, intp nv)USHORT_fastputmask16068,388006
INT_fastputmask(int *in, Bool *mask, intp ni, int *vals, intp nv)INT_fastputmask16093,388485
UINT_fastputmask(uint *in, Bool *mask, intp ni, uint *vals, intp nv)UINT_fastputmask16118,388952
LONG_fastputmask(long *in, Bool *mask, intp ni, long *vals, intp nv)LONG_fastputmask16143,389423
ULONG_fastputmask(ulong *in, Bool *mask, intp ni, ulong *vals, intp nv)ULONG_fastputmask16168,389894
LONGLONG_fastputmask(longlong *in, Bool *mask, intp ni, longlong *vals, intp nv)LONGLONG_fastputmask16193,390369
ULONGLONG_fastputmask(ulonglong *in, Bool *mask, intp ni, ulonglong *vals, intp nv)ULONGLONG_fastputmask16218,390856
FLOAT_fastputmask(float *in, Bool *mask, intp ni, float *vals, intp nv)FLOAT_fastputmask16243,391347
DOUBLE_fastputmask(double *in, Bool *mask, intp ni, double *vals, intp nv)DOUBLE_fastputmask16268,391822
LONGDOUBLE_fastputmask(longdouble *in, Bool *mask, intp ni, longdouble *vals, intp nv)LONGDOUBLE_fastputmask16293,392301
CFLOAT_fastputmask(cfloat *in, Bool *mask, intp ni, cfloat *vals, intp nv)CFLOAT_fastputmask16318,392796
CDOUBLE_fastputmask(cdouble *in, Bool *mask, intp ni, cdouble *vals, intp nv)CDOUBLE_fastputmask16343,393275
CLONGDOUBLE_fastputmask(clongdouble *in, Bool *mask, intp ni, clongdouble *vals, intp nv)CLONGDOUBLE_fastputmask16368,393758
DATETIME_fastputmask(datetime *in, Bool *mask, intp ni, datetime *vals, intp nv)DATETIME_fastputmask16393,394257
TIMEDELTA_fastputmask(timedelta *in, Bool *mask, intp ni, timedelta *vals, intp nv)TIMEDELTA_fastputmask16418,394744
#define OBJECT_fastputmask OBJECT_fastputmask16442,395212
BOOL_fasttake(Bool *dest, Bool *src, intp *indarray,BOOL_fasttake16454,395526
BYTE_fasttake(byte *dest, byte *src, intp *indarray,BYTE_fasttake16540,398156
UBYTE_fasttake(ubyte *dest, ubyte *src, intp *indarray,UBYTE_fasttake16626,400786
SHORT_fasttake(short *dest, short *src, intp *indarray,SHORT_fasttake16712,403419
USHORT_fasttake(ushort *dest, ushort *src, intp *indarray,USHORT_fasttake16798,406052
INT_fasttake(int *dest, int *src, intp *indarray,INT_fasttake16884,408688
UINT_fasttake(uint *dest, uint *src, intp *indarray,UINT_fasttake16970,411315
LONG_fasttake(long *dest, long *src, intp *indarray,LONG_fasttake17056,413945
ULONG_fasttake(ulong *dest, ulong *src, intp *indarray,ULONG_fasttake17142,416575
LONGLONG_fasttake(longlong *dest, longlong *src, intp *indarray,LONGLONG_fasttake17228,419208
ULONGLONG_fasttake(ulonglong *dest, ulonglong *src, intp *indarray,ULONGLONG_fasttake17314,421850
FLOAT_fasttake(float *dest, float *src, intp *indarray,FLOAT_fasttake17400,424495
DOUBLE_fasttake(double *dest, double *src, intp *indarray,DOUBLE_fasttake17486,427128
LONGDOUBLE_fasttake(longdouble *dest, longdouble *src, intp *indarray,LONGDOUBLE_fasttake17572,429764
CFLOAT_fasttake(cfloat *dest, cfloat *src, intp *indarray,CFLOAT_fasttake17658,432412
CDOUBLE_fasttake(cdouble *dest, cdouble *src, intp *indarray,CDOUBLE_fasttake17744,435048
CLONGDOUBLE_fasttake(clongdouble *dest, clongdouble *src, intp *indarray,CLONGDOUBLE_fasttake17830,437687
DATETIME_fasttake(datetime *dest, datetime *src, intp *indarray,DATETIME_fasttake17916,440338
TIMEDELTA_fasttake(timedelta *dest, timedelta *src, intp *indarray,TIMEDELTA_fasttake18002,442980
#define OBJECT_fasttake OBJECT_fasttake18087,445603
#define _ALIGN(_ALIGN18097,445890
static PyArray_ArrFuncs _PyVoid_ArrFuncs = {_PyVoid_ArrFuncs18108,446163
static PyArray_Descr VOID_Descr = {VOID_Descr18165,448191
static PyArray_ArrFuncs _PyString_ArrFuncs = {_PyString_ArrFuncs18185,448502
static PyArray_Descr STRING_Descr = {STRING_Descr18242,450596
static PyArray_ArrFuncs _PyUnicode_ArrFuncs = {_PyUnicode_ArrFuncs18262,450919
static PyArray_Descr UNICODE_Descr = {UNICODE_Descr18319,453046
static PyArray_ArrFuncs _PyBool_ArrFuncs = {_PyBool_ArrFuncs18341,453387
NPY_NO_EXPORT PyArray_Descr BOOL_Descr = {BOOL_Descr18398,455466
static PyArray_ArrFuncs _PyByte_ArrFuncs = {_PyByte_ArrFuncs18418,455800
NPY_NO_EXPORT PyArray_Descr BYTE_Descr = {BYTE_Descr18475,457879
static PyArray_ArrFuncs _PyUByte_ArrFuncs = {_PyUByte_ArrFuncs18495,458212
NPY_NO_EXPORT PyArray_Descr UBYTE_Descr = {UBYTE_Descr18552,460330
static PyArray_ArrFuncs _PyShort_ArrFuncs = {_PyShort_ArrFuncs18572,460672
NPY_NO_EXPORT PyArray_Descr SHORT_Descr = {SHORT_Descr18629,462790
static PyArray_ArrFuncs _PyUShort_ArrFuncs = {_PyUShort_ArrFuncs18649,463130
NPY_NO_EXPORT PyArray_Descr USHORT_Descr = {USHORT_Descr18706,465287
static PyArray_ArrFuncs _PyInt_ArrFuncs = {_PyInt_ArrFuncs18726,465636
NPY_NO_EXPORT PyArray_Descr INT_Descr = {INT_Descr18783,467676
static PyArray_ArrFuncs _PyUInt_ArrFuncs = {_PyUInt_ArrFuncs18803,468002
NPY_NO_EXPORT PyArray_Descr UINT_Descr = {UINT_Descr18860,470081
static PyArray_ArrFuncs _PyLong_ArrFuncs = {_PyLong_ArrFuncs18880,470416
NPY_NO_EXPORT PyArray_Descr LONG_Descr = {LONG_Descr18937,472495
static PyArray_ArrFuncs _PyULong_ArrFuncs = {_PyULong_ArrFuncs18957,472828
NPY_NO_EXPORT PyArray_Descr ULONG_Descr = {ULONG_Descr19014,474946
static PyArray_ArrFuncs _PyLongLong_ArrFuncs = {_PyLongLong_ArrFuncs19034,475288
NPY_NO_EXPORT PyArray_Descr LONGLONG_Descr = {LONGLONG_Descr19091,477523
static PyArray_ArrFuncs _PyULongLong_ArrFuncs = {_PyULongLong_ArrFuncs19111,477884
NPY_NO_EXPORT PyArray_Descr ULONGLONG_Descr = {ULONGLONG_Descr19168,480158
static PyArray_ArrFuncs _PyFloat_ArrFuncs = {_PyFloat_ArrFuncs19188,480528
NPY_NO_EXPORT PyArray_Descr FLOAT_Descr = {FLOAT_Descr19245,482646
static PyArray_ArrFuncs _PyDouble_ArrFuncs = {_PyDouble_ArrFuncs19265,482988
NPY_NO_EXPORT PyArray_Descr DOUBLE_Descr = {DOUBLE_Descr19322,485145
static PyArray_ArrFuncs _PyLongDouble_ArrFuncs = {_PyLongDouble_ArrFuncs19342,485494
NPY_NO_EXPORT PyArray_Descr LONGDOUBLE_Descr = {LONGDOUBLE_Descr19399,487807
static PyArray_ArrFuncs _PyCFloat_ArrFuncs = {_PyCFloat_ArrFuncs19419,488184
NPY_NO_EXPORT PyArray_Descr CFLOAT_Descr = {CFLOAT_Descr19476,490341
static PyArray_ArrFuncs _PyCDouble_ArrFuncs = {_PyCDouble_ArrFuncs19496,490687
NPY_NO_EXPORT PyArray_Descr CDOUBLE_Descr = {CDOUBLE_Descr19553,492883
static PyArray_ArrFuncs _PyCLongDouble_ArrFuncs = {_PyCLongDouble_ArrFuncs19573,493236
NPY_NO_EXPORT PyArray_Descr CLONGDOUBLE_Descr = {CLONGDOUBLE_Descr19630,495588
static PyArray_ArrFuncs _PyObject_ArrFuncs = {_PyObject_ArrFuncs19650,495969
NPY_NO_EXPORT PyArray_Descr OBJECT_Descr = {OBJECT_Descr19707,498126
static PyArray_ArrFuncs _PyDatetime_ArrFuncs = {_PyDatetime_ArrFuncs19727,498502
NPY_NO_EXPORT PyArray_Descr DATETIME_Descr = {DATETIME_Descr19784,500737
static PyArray_ArrFuncs _PyTimedelta_ArrFuncs = {_PyTimedelta_ArrFuncs19804,501100
NPY_NO_EXPORT PyArray_Descr TIMEDELTA_Descr = {TIMEDELTA_Descr19861,503374
_init_datetime_descr(PyArray_Descr *descr)_init_datetime_descr19882,503748
#define _MAX_LETTER _MAX_LETTER19904,504354
static char _letter_to_num[_MAX_LETTER];_letter_to_num19905,504379
static PyArray_Descr *_builtin_descrs[] = {_builtin_descrs19907,504423
PyArray_DescrFromType(int type)PyArray_DescrFromType19937,505035
set_typeinfo(PyObject *dict)set_typeinfo20003,506778
#define BITSOF_INTP BITSOF_INTP20163,510062
#define BITSOF_BYTE BITSOF_BYTE20164,510111
#define BITSOF_CFLOAT BITSOF_CFLOAT20375,516077
#define BITSOF_CDOUBLE BITSOF_CDOUBLE20376,516115
#define BITSOF_CLONGDOUBLE BITSOF_CLONGDOUBLE20377,516155
#define SETTYPE(SETTYPE20529,521112
#undef SETTYPESETTYPE20546,521601
#undef _MAX_LETTER_MAX_LETTER20553,521720

build/src.win32-2.6/numpy/core/src/multiarray/multiarray_tests.c,645
static int copy_double(PyArrayIterObject *itx, PyArrayNeighborhoodIterObject *niterx,copy_double22,542
static int copy_int(PyArrayIterObject *itx, PyArrayNeighborhoodIterObject *niterx,copy_int64,1669
static int copy_object(PyArrayIterObject *itx, PyArrayNeighborhoodIterObject *niterx,copy_object106,2773
copy_double_double(PyArrayNeighborhoodIterObject *itx,copy_double_double258,6826
static PyMethodDef Multiarray_TestsMethods[] = {Multiarray_TestsMethods421,11322
static struct PyModuleDef moduledef = {moduledef433,11666
#define RETVAL RETVAL447,11926
PyObject *PyInit_multiarray_tests(void)PyInit_multiarray_tests448,11944

build/src.win32-2.6/numpy/core/src/multiarray/scalartypes.c,44148
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN12,418
#define _MULTIARRAYMODULE_MULTIARRAYMODULE17,521
#define NPY_NO_PREFIXNPY_NO_PREFIX19,556
NPY_NO_EXPORT PyBoolScalarObject _PyArrayScalar_BoolValues[] = {_PyArrayScalar_BoolValues34,866
NPY_NO_EXPORT PyTypeObject PyNumberArrType_Type = {PyNumberArrType_Type45,1157
NPY_NO_EXPORT PyTypeObject PyIntegerArrType_Type = {PyIntegerArrType_Type108,4575
NPY_NO_EXPORT PyTypeObject PySignedIntegerArrType_Type = {PySignedIntegerArrType_Type171,7995
NPY_NO_EXPORT PyTypeObject PyUnsignedIntegerArrType_Type = {PyUnsignedIntegerArrType_Type234,11427
NPY_NO_EXPORT PyTypeObject PyInexactArrType_Type = {PyInexactArrType_Type297,14863
NPY_NO_EXPORT PyTypeObject PyFloatingArrType_Type = {PyFloatingArrType_Type360,18283
NPY_NO_EXPORT PyTypeObject PyComplexFloatingArrType_Type = {PyComplexFloatingArrType_Type423,21705
NPY_NO_EXPORT PyTypeObject PyFlexibleArrType_Type = {PyFlexibleArrType_Type486,25141
NPY_NO_EXPORT PyTypeObject PyCharacterArrType_Type = {PyCharacterArrType_Type549,28563
NPY_NO_EXPORT PyTypeObject PyTimeIntegerArrType_Type = {PyTimeIntegerArrType_Type612,31987
gentype_alloc(PyTypeObject *type, Py_ssize_t nitems)gentype_alloc676,35426
gentype_dealloc(PyObject *v)gentype_dealloc693,35837
gentype_power(PyObject *m1, PyObject *m2, PyObject *NPY_UNUSED(m3))gentype_power700,35925
gentype_generic_method(PyObject *self, PyObject *args, PyObject *kwds,gentype_generic_method756,37668
gentype_add(PyObject *m1, PyObject *m2)gentype_add788,38383
gentype_subtract(PyObject *m1, PyObject *m2)gentype_subtract796,38519
gentype_remainder(PyObject *m1, PyObject *m2)gentype_remainder804,38665
gentype_divmod(PyObject *m1, PyObject *m2)gentype_divmod812,38813
gentype_lshift(PyObject *m1, PyObject *m2)gentype_lshift820,38955
gentype_rshift(PyObject *m1, PyObject *m2)gentype_rshift828,39097
gentype_and(PyObject *m1, PyObject *m2)gentype_and836,39239
gentype_xor(PyObject *m1, PyObject *m2)gentype_xor844,39375
gentype_or(PyObject *m1, PyObject *m2)gentype_or852,39511
gentype_floor_divide(PyObject *m1, PyObject *m2)gentype_floor_divide860,39645
gentype_true_divide(PyObject *m1, PyObject *m2)gentype_true_divide868,39799
gentype_divide(PyObject *m1, PyObject *m2)gentype_divide878,39977
gentype_multiply(PyObject *m1, PyObject *m2)gentype_multiply886,40116
gentype_positive(PyObject *m1)gentype_positive920,41236
gentype_negative(PyObject *m1)gentype_negative935,41523
gentype_absolute(PyObject *m1)gentype_absolute950,41810
gentype_invert(PyObject *m1)gentype_invert965,42097
gentype_int(PyObject *m1)gentype_int980,42380
gentype_float(PyObject *m1)gentype_float995,42657
gentype_long(PyObject *m1)gentype_long1012,42964
gentype_oct(PyObject *m1)gentype_oct1027,43243
gentype_hex(PyObject *m1)gentype_hex1042,43520
gentype_nonzero_number(PyObject *m1)gentype_nonzero_number1058,43789
gentype_str(PyObject *self)gentype_str1077,44167
gentype_repr(PyObject *self)gentype_repr1093,44465
#undef NPY_LONGDOUBLE_FMTNPY_LONGDOUBLE_FMT1108,44783
#define NPY_LONGDOUBLE_FMT NPY_LONGDOUBLE_FMT1109,44810
#define _FMT1 _FMT11114,44876
#define _FMT2 _FMT21115,44913
format_float(char *buf, size_t buflen, float val, unsigned int prec)format_float1118,44973
format_cfloat(char *buf, size_t buflen, cfloat val, unsigned int prec)format_cfloat1144,45693
#undef _FMT1_FMT11216,48089
#undef _FMT2_FMT21217,48103
#define _FMT1 _FMT11222,48134
#define _FMT2 _FMT21223,48172
format_double(char *buf, size_t buflen, double val, unsigned int prec)format_double1226,48233
format_cdouble(char *buf, size_t buflen, cdouble val, unsigned int prec)format_cdouble1252,48955
#undef _FMT1_FMT11324,51353
#undef _FMT2_FMT21325,51367
#define _FMT1 _FMT11330,51398
#define _FMT2 _FMT21331,51440
format_longdouble(char *buf, size_t buflen, longdouble val, unsigned int prec)format_longdouble1334,51505
format_clongdouble(char *buf, size_t buflen, clongdouble val, unsigned int prec)format_clongdouble1360,52235
#undef _FMT1_FMT11432,54641
#undef _FMT2_FMT21433,54655
stringtype_repr(PyObject *self)stringtype_repr1445,54873
stringtype_str(PyObject *self)stringtype_str1469,55386
unicodetype_repr(PyObject *self)unicodetype_repr1493,55897
unicodetype_str(PyObject *self)unicodetype_str1517,56416
#define FLOATPREC_REPR FLOATPREC_REPR1541,56949
#define FLOATPREC_STR FLOATPREC_STR1542,56975
#define DOUBLEPREC_REPR DOUBLEPREC_REPR1543,57000
#define DOUBLEPREC_STR DOUBLEPREC_STR1544,57028
#define LONGDOUBLEPREC_REPR LONGDOUBLEPREC_REPR1546,57095
#define LONGDOUBLEPREC_STR LONGDOUBLEPREC_STR1547,57140
#define LONGDOUBLEPREC_REPR LONGDOUBLEPREC_REPR1549,57234
#define LONGDOUBLEPREC_STR LONGDOUBLEPREC_STR1550,57266
#define PREC PREC1562,57439
floattype_str(PyObject *self)floattype_str1565,57488
cfloattype_str(PyObject *self)cfloattype_str1575,57710
#undef PRECPREC1584,57917
#define PREC PREC1589,57947
floattype_repr(PyObject *self)floattype_repr1592,57997
cfloattype_repr(PyObject *self)cfloattype_repr1602,58220
#undef PRECPREC1611,58428
#define PREC PREC1618,58471
doubletype_str(PyObject *self)doubletype_str1621,58521
cdoubletype_str(PyObject *self)cdoubletype_str1631,58747
#undef PRECPREC1640,58958
#define PREC PREC1645,58988
doubletype_repr(PyObject *self)doubletype_repr1648,59039
cdoubletype_repr(PyObject *self)cdoubletype_repr1658,59266
#undef PRECPREC1667,59478
#define PREC PREC1674,59521
longdoubletype_str(PyObject *self)longdoubletype_str1677,59575
clongdoubletype_str(PyObject *self)clongdoubletype_str1687,59817
#undef PRECPREC1696,60044
#define PREC PREC1701,60074
longdoubletype_repr(PyObject *self)longdoubletype_repr1704,60129
clongdoubletype_repr(PyObject *self)clongdoubletype_repr1714,60372
#undef PRECPREC1723,60600
floattype_print(PyObject *v, FILE *fp, int flags)floattype_print1734,60728
cfloattype_print(PyObject *v, FILE *fp, int flags)cfloattype_print1748,61113
doubletype_print(PyObject *v, FILE *fp, int flags)doubletype_print1766,61591
cdoubletype_print(PyObject *v, FILE *fp, int flags)cdoubletype_print1780,61982
longdoubletype_print(PyObject *v, FILE *fp, int flags)longdoubletype_print1798,62466
clongdoubletype_print(PyObject *v, FILE *fp, int flags)clongdoubletype_print1812,62881
longdoubletype_int(PyObject *self)longdoubletype_int1836,63521
longdoubletype_float(PyObject *self)longdoubletype_float1850,63832
clongdoubletype_int(PyObject *self)clongdoubletype_int1864,64148
clongdoubletype_float(PyObject *self)clongdoubletype_float1878,64466
longdoubletype_long(PyObject *self)longdoubletype_long1895,64817
longdoubletype_hex(PyObject *self)longdoubletype_hex1909,65130
longdoubletype_oct(PyObject *self)longdoubletype_oct1923,65441
clongdoubletype_long(PyObject *self)clongdoubletype_long1937,65752
clongdoubletype_hex(PyObject *self)clongdoubletype_hex1951,66072
clongdoubletype_oct(PyObject *self)clongdoubletype_oct1965,66390
static PyNumberMethods gentype_as_number = {gentype_as_number1980,66715
gentype_richcompare(PyObject *self, PyObject *other, int cmp_op)gentype_richcompare2042,69630
gentype_ndim_get(PyObject *NPY_UNUSED(self))NPY_UNUSED2056,69946
gentype_flags_get(PyObject *NPY_UNUSED(self))NPY_UNUSED2062,70050
voidtype_flags_get(PyVoidScalarObject *self)voidtype_flags_get2068,70166
voidtype_dtypedescr_get(PyVoidScalarObject *self)voidtype_dtypedescr_get2081,70516
gentype_data_get(PyObject *self)gentype_data_get2089,70662
gentype_itemsize_get(PyObject *self)gentype_itemsize_get2100,70866
gentype_size_get(PyObject *NPY_UNUSED(self))NPY_UNUSED2119,71273
gentype_struct_free(PyObject *ptr)gentype_struct_free2126,71412
gentype_struct_free(void *ptr, void *arg)gentype_struct_free2140,71765
gentype_struct_get(PyObject *self)gentype_struct_get2151,72016
gentype_priority_get(PyObject *NPY_UNUSED(self))NPY_UNUSED2176,72734
gentype_shape_get(PyObject *NPY_UNUSED(self))NPY_UNUSED2182,72864
gentype_interface_get(PyObject *self)gentype_interface_get2189,72968
gentype_typedescr_get(PyObject *self)gentype_typedescr_get2209,73414
gentype_base_get(PyObject *NPY_UNUSED(self))NPY_UNUSED2216,73537
_realdescr_fromcomplexscalar(PyObject *self, int *typenum)_realdescr_fromcomplexscalar2224,73663
gentype_real_get(PyObject *self)gentype_real_get2242,74206
gentype_imag_get(PyObject *self)gentype_imag_get2269,74937
gentype_flat_get(PyObject *self)gentype_flat_get2310,76189
gentype_transpose_get(PyObject *self)gentype_transpose_get2325,76447
static PyGetSetDef gentype_getsets[] = {gentype_getsets2332,76536
static char doc_getarray[] = "sc.__array__(|type) return 0-dim array";doc_getarray2424,78802
gentype_getarray(PyObject *scalar, PyObject *args)gentype_getarray2427,78895
static char doc_sc_wraparray[] = "sc.__array_wrap__(obj) return scalar from array";doc_sc_wraparray2441,79230
gentype_tolist(PyObject *self, PyObject *args)gentype_tolist2469,79996
gentype_item(PyObject *self, PyObject *args)gentype_item2476,80147
gentype_tostring(PyObject *self, PyObject *args)gentype_tostring2483,80294
gentype_astype(PyObject *self, PyObject *args)gentype_astype2490,80449
gentype_copy(PyObject *self, PyObject *args)gentype_copy2497,80600
gentype___deepcopy__(PyObject *self, PyObject *args)gentype___deepcopy__2504,80747
gentype_searchsorted(PyObject *self, PyObject *args)gentype_searchsorted2511,80910
gentype_view(PyObject *self, PyObject *args)gentype_view2518,81073
gentype_swapaxes(PyObject *self, PyObject *args)gentype_swapaxes2525,81220
gentype_conj(PyObject *self, PyObject *args)gentype_conj2532,81375
gentype_conjugate(PyObject *self, PyObject *args)gentype_conjugate2539,81522
gentype_nonzero(PyObject *self, PyObject *args)gentype_nonzero2546,81679
gentype_flatten(PyObject *self, PyObject *args)gentype_flatten2553,81832
gentype_ravel(PyObject *self, PyObject *args)gentype_ravel2560,81985
gentype_fill(PyObject *self, PyObject *args)gentype_fill2567,82134
gentype_transpose(PyObject *self, PyObject *args)gentype_transpose2574,82281
gentype_newbyteorder(PyObject *self, PyObject *args)gentype_newbyteorder2581,82438
gentype_itemset(PyObject *NPY_UNUSED(self), PyObject *NPY_UNUSED(args))NPY_UNUSED2588,82591
gentype_squeeze(PyObject *self, PyObject *args)gentype_squeeze2595,82780
gentype_byteswap(PyObject *self, PyObject *args)gentype_byteswap2608,83040
gentype_take(PyObject *self, PyObject *args, PyObject *kwds)gentype_take2652,84225
gentype_getfield(PyObject *self, PyObject *args, PyObject *kwds)gentype_getfield2659,84388
gentype_put(PyObject *self, PyObject *args, PyObject *kwds)gentype_put2666,84559
gentype_repeat(PyObject *self, PyObject *args, PyObject *kwds)gentype_repeat2673,84720
gentype_tofile(PyObject *self, PyObject *args, PyObject *kwds)gentype_tofile2680,84887
gentype_mean(PyObject *self, PyObject *args, PyObject *kwds)gentype_mean2687,85054
gentype_trace(PyObject *self, PyObject *args, PyObject *kwds)gentype_trace2694,85217
gentype_diagonal(PyObject *self, PyObject *args, PyObject *kwds)gentype_diagonal2701,85382
gentype_clip(PyObject *self, PyObject *args, PyObject *kwds)gentype_clip2708,85553
gentype_std(PyObject *self, PyObject *args, PyObject *kwds)gentype_std2715,85716
gentype_var(PyObject *self, PyObject *args, PyObject *kwds)gentype_var2722,85877
gentype_sum(PyObject *self, PyObject *args, PyObject *kwds)gentype_sum2729,86038
gentype_cumsum(PyObject *self, PyObject *args, PyObject *kwds)gentype_cumsum2736,86199
gentype_prod(PyObject *self, PyObject *args, PyObject *kwds)gentype_prod2743,86366
gentype_cumprod(PyObject *self, PyObject *args, PyObject *kwds)gentype_cumprod2750,86529
gentype_compress(PyObject *self, PyObject *args, PyObject *kwds)gentype_compress2757,86698
gentype_sort(PyObject *self, PyObject *args, PyObject *kwds)gentype_sort2764,86869
gentype_argsort(PyObject *self, PyObject *args, PyObject *kwds)gentype_argsort2771,87032
gentype_round(PyObject *self, PyObject *args, PyObject *kwds)gentype_round2778,87201
gentype_argmax(PyObject *self, PyObject *args, PyObject *kwds)gentype_argmax2785,87366
gentype_argmin(PyObject *self, PyObject *args, PyObject *kwds)gentype_argmin2792,87533
gentype_max(PyObject *self, PyObject *args, PyObject *kwds)gentype_max2799,87700
gentype_min(PyObject *self, PyObject *args, PyObject *kwds)gentype_min2806,87861
gentype_ptp(PyObject *self, PyObject *args, PyObject *kwds)gentype_ptp2813,88022
gentype_any(PyObject *self, PyObject *args, PyObject *kwds)gentype_any2820,88183
gentype_all(PyObject *self, PyObject *args, PyObject *kwds)gentype_all2827,88344
gentype_resize(PyObject *self, PyObject *args, PyObject *kwds)gentype_resize2834,88505
gentype_reshape(PyObject *self, PyObject *args, PyObject *kwds)gentype_reshape2841,88672
gentype_choose(PyObject *self, PyObject *args, PyObject *kwds)gentype_choose2848,88841
voidtype_getfield(PyVoidScalarObject *self, PyObject *args, PyObject *kwds)voidtype_getfield2855,88998
gentype_setfield(PyObject *NPY_UNUSED(self), PyObject *NPY_UNUSED(args), PyObject *NPY_UNUSED(kwds))NPY_UNUSED2883,89792
voidtype_setfield(PyVoidScalarObject *self, PyObject *args, PyObject *kwds)voidtype_setfield2891,90039
gentype_reduce(PyObject *self, PyObject *NPY_UNUSED(args))gentype_reduce2950,91784
gentype_setstate(PyObject *NPY_UNUSED(self), PyObject *NPY_UNUSED(args))NPY_UNUSED3037,94296
gentype_dump(PyObject *self, PyObject *args)gentype_dump3044,94445
gentype_dumps(PyObject *self, PyObject *args)gentype_dumps3061,94774
        PyObject *NPY_UNUSED(kwds))NPY_UNUSED3073,95077
static PyMethodDef gentype_methods[] = {gentype_methods3082,95266
static PyGetSetDef voidtype_getsets[] = {voidtype_getsets3274,101047
static PyMethodDef voidtype_methods[] = {voidtype_methods3288,101373
voidtype_length(PyVoidScalarObject *self)voidtype_length3301,101753
voidtype_item(PyVoidScalarObject *self, Py_ssize_t n)voidtype_item3312,102001
voidtype_subscript(PyVoidScalarObject *self, PyObject *ind)voidtype_subscript3339,102739
voidtype_ass_item(PyVoidScalarObject *self, Py_ssize_t n, PyObject *val)voidtype_ass_item3376,103659
voidtype_ass_subscript(PyVoidScalarObject *self, PyObject *ind, PyObject *val)voidtype_ass_subscript3415,104653
static PyMappingMethods voidtype_as_mapping = {voidtype_as_mapping3462,105903
static PySequenceMethods voidtype_as_sequence = {voidtype_as_sequence3473,106275
gentype_getreadbuf(PyObject *self, Py_ssize_t segment, void **ptrptr)gentype_getreadbuf3497,107454
gentype_getsegcount(PyObject *self, Py_ssize_t *lenp)gentype_getsegcount3522,108048
gentype_getcharbuf(PyObject *self, Py_ssize_t segment, constchar **ptrptr)gentype_getcharbuf3540,108424
gentype_getbuffer(PyObject *self, Py_buffer *view, int flags)gentype_getbuffer3557,108908
static PyBufferProcs gentype_as_buffer = {gentype_as_buffer3572,109254
#define BASEFLAGS BASEFLAGS3587,109832
#define LEAFFLAGS LEAFFLAGS3588,109892
#define BASEFLAGS BASEFLAGS3590,109938
#define LEAFFLAGS LEAFFLAGS3591,110022
NPY_NO_EXPORT PyTypeObject PyGenericArrType_Type = {PyGenericArrType_Type3594,110095
void_dealloc(PyVoidScalarObject *v)void_dealloc3657,113517
object_arrtype_dealloc(PyObject *v)object_arrtype_dealloc3668,113730
#define _WORK(_WORK3682,114106
#define _WORK1 _WORK13695,114650
#define _WORKz _WORKz3696,114675
#define _WORK0_WORK03697,114700
#define _NPY_UNUSED2_1_NPY_UNUSED2_13701,114732
#define _NPY_UNUSED2_z_NPY_UNUSED2_z3702,114756
#define _NPY_UNUSED2_0 _NPY_UNUSED2_03703,114780
#define _NPY_UNUSED1_0_NPY_UNUSED1_03704,114815
#define _NPY_UNUSED1_1_NPY_UNUSED1_13705,114839
#define _NPY_UNUSED1_2 _NPY_UNUSED1_23706,114863
byte_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args3709,114919
byte_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_03709,114919
#define _NPY_UNUSED2_1_NPY_UNUSED2_13816,117715
#define _NPY_UNUSED2_z_NPY_UNUSED2_z3817,117739
#define _NPY_UNUSED2_0 _NPY_UNUSED2_03818,117763
#define _NPY_UNUSED1_0_NPY_UNUSED1_03819,117798
#define _NPY_UNUSED1_1_NPY_UNUSED1_13820,117822
#define _NPY_UNUSED1_2 _NPY_UNUSED1_23821,117846
short_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args3824,117902
short_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_03824,117902
#define _NPY_UNUSED2_1_NPY_UNUSED2_13931,120705
#define _NPY_UNUSED2_z_NPY_UNUSED2_z3932,120729
#define _NPY_UNUSED2_0 _NPY_UNUSED2_03933,120753
#define _NPY_UNUSED1_0_NPY_UNUSED1_03934,120788
#define _NPY_UNUSED1_1_NPY_UNUSED1_13935,120812
#define _NPY_UNUSED1_2 _NPY_UNUSED1_23936,120836
int_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_1(kwds))args3939,120892
int_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_1(kwds))_NPY_UNUSED2_13939,120892
#define _NPY_UNUSED2_1_NPY_UNUSED2_14046,123681
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4047,123705
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04048,123729
#define _NPY_UNUSED1_0_NPY_UNUSED1_04049,123764
#define _NPY_UNUSED1_1_NPY_UNUSED1_14050,123788
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24051,123812
long_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_1(kwds))args4054,123868
long_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_1(kwds))_NPY_UNUSED2_14054,123868
#define _NPY_UNUSED2_1_NPY_UNUSED2_14161,126664
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4162,126688
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04163,126712
#define _NPY_UNUSED1_0_NPY_UNUSED1_04164,126747
#define _NPY_UNUSED1_1_NPY_UNUSED1_14165,126771
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24166,126795
longlong_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_1(kwds))args4169,126851
longlong_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_1(kwds))_NPY_UNUSED2_14169,126851
#define _NPY_UNUSED2_1_NPY_UNUSED2_14276,129675
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4277,129699
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04278,129723
#define _NPY_UNUSED1_0_NPY_UNUSED1_04279,129758
#define _NPY_UNUSED1_1_NPY_UNUSED1_14280,129782
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24281,129806
ubyte_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args4284,129862
ubyte_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_04284,129862
#define _NPY_UNUSED2_1_NPY_UNUSED2_14391,132665
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4392,132689
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04393,132713
#define _NPY_UNUSED1_0_NPY_UNUSED1_04394,132748
#define _NPY_UNUSED1_1_NPY_UNUSED1_14395,132772
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24396,132796
ushort_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args4399,132852
ushort_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_04399,132852
#define _NPY_UNUSED2_1_NPY_UNUSED2_14506,135662
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4507,135686
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04508,135710
#define _NPY_UNUSED1_0_NPY_UNUSED1_04509,135745
#define _NPY_UNUSED1_1_NPY_UNUSED1_14510,135769
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24511,135793
uint_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args4514,135849
uint_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_04514,135849
#define _NPY_UNUSED2_1_NPY_UNUSED2_14621,138645
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4622,138669
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04623,138693
#define _NPY_UNUSED1_0_NPY_UNUSED1_04624,138728
#define _NPY_UNUSED1_1_NPY_UNUSED1_14625,138752
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24626,138776
ulong_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args4629,138832
ulong_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_04629,138832
#define _NPY_UNUSED2_1_NPY_UNUSED2_14736,141635
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4737,141659
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04738,141683
#define _NPY_UNUSED1_0_NPY_UNUSED1_04739,141718
#define _NPY_UNUSED1_1_NPY_UNUSED1_14740,141742
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24741,141766
ulonglong_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args4744,141822
ulonglong_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_04744,141822
#define _NPY_UNUSED2_1_NPY_UNUSED2_14851,144653
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4852,144677
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04853,144701
#define _NPY_UNUSED1_0_NPY_UNUSED1_04854,144736
#define _NPY_UNUSED1_1_NPY_UNUSED1_14855,144760
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24856,144784
float_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args4859,144840
float_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_04859,144840
#define _NPY_UNUSED2_1_NPY_UNUSED2_14966,147643
#define _NPY_UNUSED2_z_NPY_UNUSED2_z4967,147667
#define _NPY_UNUSED2_0 _NPY_UNUSED2_04968,147691
#define _NPY_UNUSED1_0_NPY_UNUSED1_04969,147726
#define _NPY_UNUSED1_1_NPY_UNUSED1_14970,147750
#define _NPY_UNUSED1_2 _NPY_UNUSED1_24971,147774
double_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_1(kwds))args4974,147830
double_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_1(kwds))_NPY_UNUSED2_14974,147830
#define _NPY_UNUSED2_1_NPY_UNUSED2_15081,150640
#define _NPY_UNUSED2_z_NPY_UNUSED2_z5082,150664
#define _NPY_UNUSED2_0 _NPY_UNUSED2_05083,150688
#define _NPY_UNUSED1_0_NPY_UNUSED1_05084,150723
#define _NPY_UNUSED1_1_NPY_UNUSED1_15085,150747
#define _NPY_UNUSED1_2 _NPY_UNUSED1_25086,150771
longdouble_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args5089,150827
longdouble_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_05089,150827
#define _NPY_UNUSED2_1_NPY_UNUSED2_15196,153665
#define _NPY_UNUSED2_z_NPY_UNUSED2_z5197,153689
#define _NPY_UNUSED2_0 _NPY_UNUSED2_05198,153713
#define _NPY_UNUSED1_0_NPY_UNUSED1_05199,153748
#define _NPY_UNUSED1_1_NPY_UNUSED1_15200,153772
#define _NPY_UNUSED1_2 _NPY_UNUSED1_25201,153796
cfloat_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args5204,153852
cfloat_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_05204,153852
#define _NPY_UNUSED2_1_NPY_UNUSED2_15311,156662
#define _NPY_UNUSED2_z_NPY_UNUSED2_z5312,156686
#define _NPY_UNUSED2_0 _NPY_UNUSED2_05313,156710
#define _NPY_UNUSED1_0_NPY_UNUSED1_05314,156745
#define _NPY_UNUSED1_1_NPY_UNUSED1_15315,156769
#define _NPY_UNUSED1_2 _NPY_UNUSED1_25316,156793
cdouble_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args5319,156849
cdouble_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_05319,156849
#define _NPY_UNUSED2_1_NPY_UNUSED2_15426,159666
#define _NPY_UNUSED2_z_NPY_UNUSED2_z5427,159690
#define _NPY_UNUSED2_0 _NPY_UNUSED2_05428,159714
#define _NPY_UNUSED1_0_NPY_UNUSED1_05429,159749
#define _NPY_UNUSED1_1_NPY_UNUSED1_15430,159773
#define _NPY_UNUSED1_2 _NPY_UNUSED1_25431,159797
clongdouble_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args5434,159853
clongdouble_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_05434,159853
#define _NPY_UNUSED2_1_NPY_UNUSED2_15541,162698
#define _NPY_UNUSED2_z_NPY_UNUSED2_z5542,162722
#define _NPY_UNUSED2_0 _NPY_UNUSED2_05543,162746
#define _NPY_UNUSED1_0_NPY_UNUSED1_05544,162781
#define _NPY_UNUSED1_1_NPY_UNUSED1_15545,162805
#define _NPY_UNUSED1_2 _NPY_UNUSED1_25546,162829
string_arrtype_new(PyTypeObject *_NPY_UNUSED1_1(type), PyObject *args, PyObject *_NPY_UNUSED2_z(kwds))args5549,162885
string_arrtype_new(PyTypeObject *_NPY_UNUSED1_1(type), PyObject *args, PyObject *_NPY_UNUSED2_z(kwds))_NPY_UNUSED2_z5549,162885
#define _NPY_UNUSED2_1_NPY_UNUSED2_15656,165695
#define _NPY_UNUSED2_z_NPY_UNUSED2_z5657,165719
#define _NPY_UNUSED2_0 _NPY_UNUSED2_05658,165743
#define _NPY_UNUSED1_0_NPY_UNUSED1_05659,165778
#define _NPY_UNUSED1_1_NPY_UNUSED1_15660,165802
#define _NPY_UNUSED1_2 _NPY_UNUSED1_25661,165826
unicode_arrtype_new(PyTypeObject *_NPY_UNUSED1_1(type), PyObject *args, PyObject *_NPY_UNUSED2_z(kwds))args5664,165882
unicode_arrtype_new(PyTypeObject *_NPY_UNUSED1_1(type), PyObject *args, PyObject *_NPY_UNUSED2_z(kwds))_NPY_UNUSED2_z5664,165882
#define _NPY_UNUSED2_1_NPY_UNUSED2_15771,168699
#define _NPY_UNUSED2_z_NPY_UNUSED2_z5772,168723
#define _NPY_UNUSED2_0 _NPY_UNUSED2_05773,168747
#define _NPY_UNUSED1_0_NPY_UNUSED1_05774,168782
#define _NPY_UNUSED1_1_NPY_UNUSED1_15775,168806
#define _NPY_UNUSED1_2 _NPY_UNUSED1_25776,168830
object_arrtype_new(PyTypeObject *_NPY_UNUSED1_2(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args5779,168886
object_arrtype_new(PyTypeObject *_NPY_UNUSED1_2(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_05779,168886
#define _NPY_UNUSED2_1_NPY_UNUSED2_15886,171696
#define _NPY_UNUSED2_z_NPY_UNUSED2_z5887,171720
#define _NPY_UNUSED2_0 _NPY_UNUSED2_05888,171744
#define _NPY_UNUSED1_0_NPY_UNUSED1_05889,171779
#define _NPY_UNUSED1_1_NPY_UNUSED1_15890,171803
#define _NPY_UNUSED1_2 _NPY_UNUSED1_25891,171827
datetime_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args5894,171883
datetime_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_05894,171883
#define _NPY_UNUSED2_1_NPY_UNUSED2_16001,174707
#define _NPY_UNUSED2_z_NPY_UNUSED2_z6002,174731
#define _NPY_UNUSED2_0 _NPY_UNUSED2_06003,174755
#define _NPY_UNUSED1_0_NPY_UNUSED1_06004,174790
#define _NPY_UNUSED1_1_NPY_UNUSED1_16005,174814
#define _NPY_UNUSED1_2 _NPY_UNUSED1_26006,174838
timedelta_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))args6009,174894
timedelta_arrtype_new(PyTypeObject *_NPY_UNUSED1_0(type), PyObject *args, PyObject *_NPY_UNUSED2_0(kwds))_NPY_UNUSED2_06009,174894
#undef _WORK1_WORK16115,177713
#undef _WORKz_WORKz6116,177728
#undef _WORK0_WORK06117,177743
#undef _WORK_WORK6118,177758
bool_arrtype_new(PyTypeObject *NPY_UNUSED(type), PyObject *args, PyObject *NPY_UNUSED(kwds))args6122,177846
bool_arrtype_new(PyTypeObject *NPY_UNUSED(type), PyObject *args, PyObject *NPY_UNUSED(kwds))NPY_UNUSED6122,177846
bool_arrtype_and(PyObject *a, PyObject *b)bool_arrtype_and6149,178587
bool_arrtype_or(PyObject *a, PyObject *b)bool_arrtype_or6159,178907
bool_arrtype_xor(PyObject *a, PyObject *b)bool_arrtype_xor6169,179225
bool_arrtype_nonzero(PyObject *a)bool_arrtype_nonzero6179,179538
static PyNumberMethods byte_arrtype_as_number;byte_arrtype_as_number6186,179664
byte_index(PyObject *self)byte_index6188,179731
static PyNumberMethods short_arrtype_as_number;short_arrtype_as_number6194,179838
short_index(PyObject *self)short_index6196,179906
static PyNumberMethods int_arrtype_as_number;int_arrtype_as_number6202,180015
int_index(PyObject *self)int_index6204,180081
static PyNumberMethods long_arrtype_as_number;long_arrtype_as_number6210,180186
long_index(PyObject *self)long_index6212,180253
static PyNumberMethods ubyte_arrtype_as_number;ubyte_arrtype_as_number6218,180360
ubyte_index(PyObject *self)ubyte_index6220,180428
static PyNumberMethods ushort_arrtype_as_number;ushort_arrtype_as_number6226,180537
ushort_index(PyObject *self)ushort_index6228,180606
static PyNumberMethods longlong_arrtype_as_number;longlong_arrtype_as_number6234,180717
longlong_index(PyObject *self)longlong_index6236,180788
static PyNumberMethods uint_arrtype_as_number;uint_arrtype_as_number6242,180908
uint_index(PyObject *self)uint_index6244,180975
static PyNumberMethods ulong_arrtype_as_number;ulong_arrtype_as_number6250,181091
ulong_index(PyObject *self)ulong_index6252,181159
static PyNumberMethods ulonglong_arrtype_as_number;ulonglong_arrtype_as_number6258,181277
ulonglong_index(PyObject *self)ulonglong_index6260,181349
bool_index(PyObject *a)bool_index6267,181488
NPY_NO_EXPORT PyNumberMethods bool_arrtype_as_number = {bool_arrtype_as_number6274,181647
void_arrtype_new(PyTypeObject *type, PyObject *args, PyObject *NPY_UNUSED(kwds))void_arrtype_new6339,184880
bool_arrtype_hash(PyObject *obj)bool_arrtype_hash6403,187002
ubyte_arrtype_hash(PyObject *obj)ubyte_arrtype_hash6410,187125
ushort_arrtype_hash(PyObject *obj)ushort_arrtype_hash6417,187250
byte_arrtype_hash(PyObject *obj)byte_arrtype_hash6425,187379
short_arrtype_hash(PyObject *obj)short_arrtype_hash6436,187563
uint_arrtype_hash(PyObject *obj)uint_arrtype_hash6447,187749
ulong_arrtype_hash(PyObject *obj)ulong_arrtype_hash6458,187933
int_arrtype_hash(PyObject *obj)int_arrtype_hash6470,188163
longlong_arrtype_hash(PyObject *obj)longlong_arrtype_hash6484,188436
longlong_arrtype_hash(PyObject *obj)longlong_arrtype_hash6509,188909
ulonglong_arrtype_hash(PyObject *obj)ulonglong_arrtype_hash6524,189194
ulonglong_arrtype_hash(PyObject *obj)ulonglong_arrtype_hash6549,189653
datetime_arrtype_hash(PyObject *obj)datetime_arrtype_hash6565,189895
datetime_arrtype_hash(PyObject *obj)datetime_arrtype_hash6575,190113
timedelta_arrtype_hash(PyObject *obj)timedelta_arrtype_hash6602,190615
timedelta_arrtype_hash(PyObject *obj)timedelta_arrtype_hash6612,190835
float_arrtype_hash(PyObject *obj)float_arrtype_hash6643,191361
cfloat_arrtype_hash(PyObject *obj)cfloat_arrtype_hash6650,191525
longdouble_arrtype_hash(PyObject *obj)longdouble_arrtype_hash6673,192069
clongdouble_arrtype_hash(PyObject *obj)clongdouble_arrtype_hash6680,192243
object_arrtype_hash(PyObject *obj)object_arrtype_hash6703,192792
void_arrtype_hash(PyObject *obj)void_arrtype_hash6710,192943
object_arrtype_getattro(PyObjectScalarObject *obj, PyObject *attr) {object_arrtype_getattro6717,193122
object_arrtype_setattro(PyObjectScalarObject *obj, PyObject *attr, PyObject *val) {object_arrtype_setattro6731,193478
object_arrtype_concat(PyObjectScalarObject *self, PyObject *other)object_arrtype_concat6744,193862
object_arrtype_length(PyObjectScalarObject *self)object_arrtype_length6750,194008
object_arrtype_repeat(PyObjectScalarObject *self, Py_ssize_t count)object_arrtype_repeat6756,194128
object_arrtype_subscript(PyObjectScalarObject *self, PyObject *key)object_arrtype_subscript6762,194275
object_arrtype_ass_subscript(PyObjectScalarObject *self, PyObject *key,object_arrtype_ass_subscript6768,194412
object_arrtype_contains(PyObjectScalarObject *self, PyObject *ob)object_arrtype_contains6775,194607
object_arrtype_inplace_concat(PyObjectScalarObject *self, PyObject *o)object_arrtype_inplace_concat6781,194751
object_arrtype_inplace_repeat(PyObjectScalarObject *self, Py_ssize_t count)object_arrtype_inplace_repeat6787,194904
static PySequenceMethods object_arrtype_as_sequence = {object_arrtype_as_sequence6792,195047
static PyMappingMethods object_arrtype_as_mapping = {object_arrtype_as_mapping6818,196499
object_arrtype_getsegcount(PyObjectScalarObject *self, Py_ssize_t *lenp)object_arrtype_getsegcount6832,196912
object_arrtype_getreadbuf(PyObjectScalarObject *self, Py_ssize_t segment, void **ptrptr)object_arrtype_getreadbuf6850,197345
object_arrtype_getwritebuf(PyObjectScalarObject *self, Py_ssize_t segment, void **ptrptr)object_arrtype_getwritebuf6865,197827
object_arrtype_getcharbuf(PyObjectScalarObject *self, Py_ssize_t segment,object_arrtype_getcharbuf6880,198313
object_arrtype_getbuffer(PyObjectScalarObject *self, Py_buffer *view, int flags)object_arrtype_getbuffer6898,198863
object_arrtype_releasebuffer(PyObjectScalarObject *self, Py_buffer *view)object_arrtype_releasebuffer6910,199269
static PyBufferProcs object_arrtype_as_buffer = {object_arrtype_as_buffer6924,199674
object_arrtype_call(PyObjectScalarObject *obj, PyObject *args, PyObject *kwds)object_arrtype_call6945,200371
NPY_NO_EXPORT PyTypeObject PyObjectArrType_Type = {PyObjectArrType_Type6950,200510
gen_arrtype_subscript(PyObject *self, PyObject *key)gen_arrtype_subscript7012,203918
#define NAME_bool NAME_bool7052,204917
#define NAME_void NAME_void7053,204943
#define NAME_string NAME_string7055,204992
#define NAME_unicode NAME_unicode7056,205021
#define NAME_string NAME_string7058,205056
#define NAME_unicode NAME_unicode7059,205086
NPY_NO_EXPORT PyTypeObject PyBoolArrType_Type = {PyBoolArrType_Type7063,205140
NPY_NO_EXPORT PyTypeObject PyStringArrType_Type = {PyStringArrType_Type7125,208532
NPY_NO_EXPORT PyTypeObject PyUnicodeArrType_Type = {PyUnicodeArrType_Type7187,211930
NPY_NO_EXPORT PyTypeObject PyVoidArrType_Type = {PyVoidArrType_Type7249,215331
#undef NAME_boolNAME_bool7311,218712
#undef NAME_voidNAME_void7312,218730
#undef NAME_stringNAME_string7313,218748
#undef NAME_unicodeNAME_unicode7314,218768
#define _THIS_SIZE _THIS_SIZE7318,218825
#define _THIS_SIZE _THIS_SIZE7320,218874
#define _THIS_SIZE _THIS_SIZE7322,218924
#define _THIS_SIZE _THIS_SIZE7324,218974
#define _THIS_SIZE _THIS_SIZE7326,219024
#define _THIS_SIZE _THIS_SIZE7328,219074
#define _THIS_SIZE _THIS_SIZE7330,219125
#define _THIS_SIZE _THIS_SIZE7332,219177
NPY_NO_EXPORT PyTypeObject PyByteArrType_Type = {PyByteArrType_Type7334,219211
#undef _THIS_SIZE_THIS_SIZE7395,222593
#define _THIS_SIZE _THIS_SIZE7399,222649
#define _THIS_SIZE _THIS_SIZE7401,222699
#define _THIS_SIZE _THIS_SIZE7403,222750
#define _THIS_SIZE _THIS_SIZE7405,222801
#define _THIS_SIZE _THIS_SIZE7407,222852
#define _THIS_SIZE _THIS_SIZE7409,222903
#define _THIS_SIZE _THIS_SIZE7411,222955
#define _THIS_SIZE _THIS_SIZE7413,223008
NPY_NO_EXPORT PyTypeObject PyShortArrType_Type = {PyShortArrType_Type7415,223042
#undef _THIS_SIZE_THIS_SIZE7476,226426
#define _THIS_SIZE _THIS_SIZE7480,226480
#define _THIS_SIZE _THIS_SIZE7482,226528
#define _THIS_SIZE _THIS_SIZE7484,226577
#define _THIS_SIZE _THIS_SIZE7486,226626
#define _THIS_SIZE _THIS_SIZE7488,226675
#define _THIS_SIZE _THIS_SIZE7490,226724
#define _THIS_SIZE _THIS_SIZE7492,226774
#define _THIS_SIZE _THIS_SIZE7494,226825
NPY_NO_EXPORT PyTypeObject PyIntArrType_Type = {PyIntArrType_Type7496,226859
#undef _THIS_SIZE_THIS_SIZE7557,230239
#define _THIS_SIZE _THIS_SIZE7561,230294
#define _THIS_SIZE _THIS_SIZE7563,230343
#define _THIS_SIZE _THIS_SIZE7565,230393
#define _THIS_SIZE _THIS_SIZE7567,230443
#define _THIS_SIZE _THIS_SIZE7569,230493
#define _THIS_SIZE _THIS_SIZE7571,230543
#define _THIS_SIZE _THIS_SIZE7573,230594
#define _THIS_SIZE _THIS_SIZE7575,230646
NPY_NO_EXPORT PyTypeObject PyLongArrType_Type = {PyLongArrType_Type7577,230680
#undef _THIS_SIZE_THIS_SIZE7638,234062
#define _THIS_SIZE _THIS_SIZE7642,234121
#define _THIS_SIZE _THIS_SIZE7644,234174
#define _THIS_SIZE _THIS_SIZE7646,234228
#define _THIS_SIZE _THIS_SIZE7648,234282
#define _THIS_SIZE _THIS_SIZE7650,234336
#define _THIS_SIZE _THIS_SIZE7652,234390
#define _THIS_SIZE _THIS_SIZE7654,234445
#define _THIS_SIZE _THIS_SIZE7656,234501
NPY_NO_EXPORT PyTypeObject PyLongLongArrType_Type = {PyLongLongArrType_Type7658,234535
#undef _THIS_SIZE_THIS_SIZE7719,237925
#define _THIS_SIZE _THIS_SIZE7723,237980
#define _THIS_SIZE _THIS_SIZE7725,238029
#define _THIS_SIZE _THIS_SIZE7727,238079
#define _THIS_SIZE _THIS_SIZE7729,238129
#define _THIS_SIZE _THIS_SIZE7731,238179
#define _THIS_SIZE _THIS_SIZE7733,238229
#define _THIS_SIZE _THIS_SIZE7735,238280
#define _THIS_SIZE _THIS_SIZE7737,238332
NPY_NO_EXPORT PyTypeObject PyUByteArrType_Type = {PyUByteArrType_Type7739,238366
#undef _THIS_SIZE_THIS_SIZE7800,241751
#define _THIS_SIZE _THIS_SIZE7804,241807
#define _THIS_SIZE _THIS_SIZE7806,241857
#define _THIS_SIZE _THIS_SIZE7808,241908
#define _THIS_SIZE _THIS_SIZE7810,241959
#define _THIS_SIZE _THIS_SIZE7812,242010
#define _THIS_SIZE _THIS_SIZE7814,242061
#define _THIS_SIZE _THIS_SIZE7816,242113
#define _THIS_SIZE _THIS_SIZE7818,242166
NPY_NO_EXPORT PyTypeObject PyUShortArrType_Type = {PyUShortArrType_Type7820,242200
#undef _THIS_SIZE_THIS_SIZE7881,245587
#define _THIS_SIZE _THIS_SIZE7885,245641
#define _THIS_SIZE _THIS_SIZE7887,245689
#define _THIS_SIZE _THIS_SIZE7889,245738
#define _THIS_SIZE _THIS_SIZE7891,245787
#define _THIS_SIZE _THIS_SIZE7893,245836
#define _THIS_SIZE _THIS_SIZE7895,245885
#define _THIS_SIZE _THIS_SIZE7897,245935
#define _THIS_SIZE _THIS_SIZE7899,245986
NPY_NO_EXPORT PyTypeObject PyUIntArrType_Type = {PyUIntArrType_Type7901,246020
#undef _THIS_SIZE_THIS_SIZE7962,249403
#define _THIS_SIZE _THIS_SIZE7966,249458
#define _THIS_SIZE _THIS_SIZE7968,249507
#define _THIS_SIZE _THIS_SIZE7970,249557
#define _THIS_SIZE _THIS_SIZE7972,249607
#define _THIS_SIZE _THIS_SIZE7974,249657
#define _THIS_SIZE _THIS_SIZE7976,249707
#define _THIS_SIZE _THIS_SIZE7978,249758
#define _THIS_SIZE _THIS_SIZE7980,249810
NPY_NO_EXPORT PyTypeObject PyULongArrType_Type = {PyULongArrType_Type7982,249844
#undef _THIS_SIZE_THIS_SIZE8043,253229
#define _THIS_SIZE _THIS_SIZE8047,253288
#define _THIS_SIZE _THIS_SIZE8049,253341
#define _THIS_SIZE _THIS_SIZE8051,253395
#define _THIS_SIZE _THIS_SIZE8053,253449
#define _THIS_SIZE _THIS_SIZE8055,253503
#define _THIS_SIZE _THIS_SIZE8057,253557
#define _THIS_SIZE _THIS_SIZE8059,253612
#define _THIS_SIZE _THIS_SIZE8061,253668
NPY_NO_EXPORT PyTypeObject PyULongLongArrType_Type = {PyULongLongArrType_Type8063,253702
#undef _THIS_SIZE_THIS_SIZE8124,257095
#define _THIS_SIZE _THIS_SIZE8128,257151
#define _THIS_SIZE _THIS_SIZE8130,257201
#define _THIS_SIZE _THIS_SIZE8132,257252
#define _THIS_SIZE _THIS_SIZE8134,257303
#define _THIS_SIZE _THIS_SIZE8136,257354
#define _THIS_SIZE _THIS_SIZE8138,257405
#define _THIS_SIZE _THIS_SIZE8140,257457
#define _THIS_SIZE _THIS_SIZE8142,257510
NPY_NO_EXPORT PyTypeObject PyFloatArrType_Type = {PyFloatArrType_Type8144,257544
#undef _THIS_SIZE_THIS_SIZE8205,260930
#define _THIS_SIZE _THIS_SIZE8209,260987
#define _THIS_SIZE _THIS_SIZE8211,261038
#define _THIS_SIZE _THIS_SIZE8213,261090
#define _THIS_SIZE _THIS_SIZE8215,261142
#define _THIS_SIZE _THIS_SIZE8217,261194
#define _THIS_SIZE _THIS_SIZE8219,261246
#define _THIS_SIZE _THIS_SIZE8221,261299
#define _THIS_SIZE _THIS_SIZE8223,261353
NPY_NO_EXPORT PyTypeObject PyDoubleArrType_Type = {PyDoubleArrType_Type8225,261387
#undef _THIS_SIZE_THIS_SIZE8286,264775
#define _THIS_SIZE _THIS_SIZE8290,264836
#define _THIS_SIZE _THIS_SIZE8292,264891
#define _THIS_SIZE _THIS_SIZE8294,264947
#define _THIS_SIZE _THIS_SIZE8296,265003
#define _THIS_SIZE _THIS_SIZE8298,265059
#define _THIS_SIZE _THIS_SIZE8300,265115
#define _THIS_SIZE _THIS_SIZE8302,265172
#define _THIS_SIZE _THIS_SIZE8304,265230
NPY_NO_EXPORT PyTypeObject PyLongDoubleArrType_Type = {PyLongDoubleArrType_Type8306,265264
#undef _THIS_SIZE_THIS_SIZE8367,268660
#define _THIS_SIZE _THIS_SIZE8371,268719
#define _THIS_SIZE _THIS_SIZE8373,268772
#define _THIS_SIZE _THIS_SIZE8375,268826
#define _THIS_SIZE _THIS_SIZE8377,268880
#define _THIS_SIZE _THIS_SIZE8379,268934
#define _THIS_SIZE _THIS_SIZE8381,268988
#define _THIS_SIZE _THIS_SIZE8383,269043
#define _THIS_SIZE _THIS_SIZE8385,269099
NPY_NO_EXPORT PyTypeObject PyDatetimeArrType_Type = {PyDatetimeArrType_Type8387,269133
#undef _THIS_SIZE_THIS_SIZE8448,272528
#define _THIS_SIZE _THIS_SIZE8452,272588
#define _THIS_SIZE _THIS_SIZE8454,272642
#define _THIS_SIZE _THIS_SIZE8456,272697
#define _THIS_SIZE _THIS_SIZE8458,272752
#define _THIS_SIZE _THIS_SIZE8460,272807
#define _THIS_SIZE _THIS_SIZE8462,272862
#define _THIS_SIZE _THIS_SIZE8464,272918
#define _THIS_SIZE _THIS_SIZE8466,272975
NPY_NO_EXPORT PyTypeObject PyTimedeltaArrType_Type = {PyTimedeltaArrType_Type8468,273009
#undef _THIS_SIZE_THIS_SIZE8529,276407
static PyMappingMethods gentype_as_mapping = {gentype_as_mapping8533,276432
#define _THIS_SIZE2 _THIS_SIZE28542,276585
#define _THIS_SIZE1 _THIS_SIZE18543,276611
#define _THIS_SIZE2 _THIS_SIZE28545,276663
#define _THIS_SIZE1 _THIS_SIZE18546,276689
#define _THIS_SIZE2 _THIS_SIZE28548,276741
#define _THIS_SIZE1 _THIS_SIZE18549,276767
#define _THIS_SIZE2 _THIS_SIZE28551,276820
#define _THIS_SIZE1 _THIS_SIZE18552,276846
#define _THIS_SIZE2 _THIS_SIZE28554,276899
#define _THIS_SIZE1 _THIS_SIZE18555,276925
#define _THIS_SIZE2 _THIS_SIZE28557,276979
#define _THIS_SIZE1 _THIS_SIZE18558,277006
#define _THIS_SIZE2 _THIS_SIZE28560,277060
#define _THIS_SIZE1 _THIS_SIZE18561,277087
#define _THIS_DOC _THIS_DOC8564,277124
NPY_NO_EXPORT PyTypeObject PyCFloatArrType_Type = {PyCFloatArrType_Type8566,277190
#undef _THIS_SIZE1_THIS_SIZE18626,280557
#undef _THIS_SIZE2_THIS_SIZE28627,280577
#undef _THIS_DOC_THIS_DOC8628,280597
#define _THIS_SIZE2 _THIS_SIZE28633,280656
#define _THIS_SIZE1 _THIS_SIZE18634,280682
#define _THIS_SIZE2 _THIS_SIZE28636,280735
#define _THIS_SIZE1 _THIS_SIZE18637,280761
#define _THIS_SIZE2 _THIS_SIZE28639,280814
#define _THIS_SIZE1 _THIS_SIZE18640,280840
#define _THIS_SIZE2 _THIS_SIZE28642,280894
#define _THIS_SIZE1 _THIS_SIZE18643,280920
#define _THIS_SIZE2 _THIS_SIZE28645,280974
#define _THIS_SIZE1 _THIS_SIZE18646,281000
#define _THIS_SIZE2 _THIS_SIZE28648,281055
#define _THIS_SIZE1 _THIS_SIZE18649,281082
#define _THIS_SIZE2 _THIS_SIZE28651,281137
#define _THIS_SIZE1 _THIS_SIZE18652,281164
#define _THIS_DOC _THIS_DOC8655,281201
NPY_NO_EXPORT PyTypeObject PyCDoubleArrType_Type = {PyCDoubleArrType_Type8657,281267
#undef _THIS_SIZE1_THIS_SIZE18717,284636
#undef _THIS_SIZE2_THIS_SIZE28718,284656
#undef _THIS_DOC_THIS_DOC8719,284676
#define _THIS_SIZE2 _THIS_SIZE28724,284739
#define _THIS_SIZE1 _THIS_SIZE18725,284765
#define _THIS_SIZE2 _THIS_SIZE28727,284822
#define _THIS_SIZE1 _THIS_SIZE18728,284848
#define _THIS_SIZE2 _THIS_SIZE28730,284905
#define _THIS_SIZE1 _THIS_SIZE18731,284931
#define _THIS_SIZE2 _THIS_SIZE28733,284989
#define _THIS_SIZE1 _THIS_SIZE18734,285015
#define _THIS_SIZE2 _THIS_SIZE28736,285073
#define _THIS_SIZE1 _THIS_SIZE18737,285099
#define _THIS_SIZE2 _THIS_SIZE28739,285158
#define _THIS_SIZE1 _THIS_SIZE18740,285185
#define _THIS_SIZE2 _THIS_SIZE28742,285244
#define _THIS_SIZE1 _THIS_SIZE18743,285271
#define _THIS_DOC _THIS_DOC8746,285308
NPY_NO_EXPORT PyTypeObject PyCLongDoubleArrType_Type = {PyCLongDoubleArrType_Type8748,285374
#undef _THIS_SIZE1_THIS_SIZE18808,288751
#undef _THIS_SIZE2_THIS_SIZE28809,288771
#undef _THIS_DOC_THIS_DOC8810,288791
static PyNumberMethods longdoubletype_as_number;longdoubletype_as_number8815,288817
static PyNumberMethods clongdoubletype_as_number;clongdoubletype_as_number8816,288867
initialize_numeric_types(void)initialize_numeric_types8820,288942
static PyTypeObject *typeobjects[] = {typeobjects9192,301406
_typenum_fromtypeobj(PyObject *type, int user)_typenum_fromtypeobj9219,302118

build/src.win32-2.6/numpy/core/src/npymath/ieee754.c,927
double npy_copysign(double x, double y)npy_copysign21,577
int _npy_signbit_f(float x)_npy_signbit_f34,847
int _npy_signbit_ld(long double x)_npy_signbit_ld39,924
double _next(double x, int p)_next52,1193
float _nextf(float x, int p)_nextf98,2433
npy_longdouble _nextl(npy_longdouble x, int p)_nextl139,3532
double npy_nextafter(double x, double y)npy_nextafter217,6124
float npy_nextafterf(float x, float y)npy_nextafterf278,8014
npy_longdouble npy_nextafterl(npy_longdouble x, npy_longdouble y)npy_nextafterl330,9541
float npy_spacingf(float x)npy_spacingf398,11878
double npy_spacing(double x)npy_spacing409,12082
npy_longdouble npy_spacingl(npy_longdouble x)npy_spacingl420,12285
float npy_nextafterf(float x, float y)npy_nextafterf436,12613
double npy_nextafter(double x, double y)npy_nextafter443,12722
npy_longdouble npy_nextafterl(npy_longdouble x, npy_longdouble y)npy_nextafterl450,12833

build/src.win32-2.6/numpy/core/src/npymath/npy_math.c,13009
double npy_expm1(double x)npy_expm176,2891
double npy_log1p(double x)npy_log1p91,3149
#define NPY_DBL_EPSILON NPY_DBL_EPSILON112,3681
double npy_atan2(double y, double x)npy_atan2113,3732
double npy_hypot(double x, double y)npy_hypot192,5952
double npy_acosh(double x)npy_acosh223,6521
double npy_asinh(double xx)npy_asinh230,6655
double npy_atanh(double x)npy_atanh252,7010
double npy_rint(double x)npy_rint264,7215
double npy_trunc(double x)npy_trunc287,7561
double npy_exp2(double x)npy_exp2294,7672
double npy_log2(double x)npy_log2301,7768
#undef sinlsinl332,8496
npy_longdouble npy_sinl(npy_longdouble x)npy_sinl335,8536
#undef coslcosl345,8672
npy_longdouble npy_cosl(npy_longdouble x)npy_cosl348,8712
#undef tanltanl358,8848
npy_longdouble npy_tanl(npy_longdouble x)npy_tanl361,8888
#undef sinhlsinhl371,9025
npy_longdouble npy_sinhl(npy_longdouble x)npy_sinhl374,9067
#undef coshlcoshl384,9206
npy_longdouble npy_coshl(npy_longdouble x)npy_coshl387,9248
#undef tanhltanhl397,9387
npy_longdouble npy_tanhl(npy_longdouble x)npy_tanhl400,9429
#undef fabslfabsl410,9568
npy_longdouble npy_fabsl(npy_longdouble x)npy_fabsl413,9610
#undef floorlfloorl423,9750
npy_longdouble npy_floorl(npy_longdouble x)npy_floorl426,9794
#undef ceillceill436,9935
npy_longdouble npy_ceill(npy_longdouble x)npy_ceill439,9977
#undef rintlrintl449,10116
npy_longdouble npy_rintl(npy_longdouble x)npy_rintl452,10158
#undef truncltruncl462,10298
npy_longdouble npy_truncl(npy_longdouble x)npy_truncl465,10342
#undef sqrtlsqrtl475,10483
npy_longdouble npy_sqrtl(npy_longdouble x)npy_sqrtl478,10525
#undef log10llog10l488,10665
npy_longdouble npy_log10l(npy_longdouble x)npy_log10l491,10709
#undef logllogl501,10849
npy_longdouble npy_logl(npy_longdouble x)npy_logl504,10889
#undef explexpl514,11025
npy_longdouble npy_expl(npy_longdouble x)npy_expl517,11065
#undef expm1lexpm1l527,11203
npy_longdouble npy_expm1l(npy_longdouble x)npy_expm1l530,11247
#undef asinlasinl540,11388
npy_longdouble npy_asinl(npy_longdouble x)npy_asinl543,11430
#undef acoslacosl553,11569
npy_longdouble npy_acosl(npy_longdouble x)npy_acosl556,11611
#undef atanlatanl566,11750
npy_longdouble npy_atanl(npy_longdouble x)npy_atanl569,11792
#undef asinhlasinhl579,11932
npy_longdouble npy_asinhl(npy_longdouble x)npy_asinhl582,11976
#undef acoshlacoshl592,12118
npy_longdouble npy_acoshl(npy_longdouble x)npy_acoshl595,12162
#undef atanhlatanhl605,12304
npy_longdouble npy_atanhl(npy_longdouble x)npy_atanhl608,12348
#undef log1pllog1pl618,12490
npy_longdouble npy_log1pl(npy_longdouble x)npy_log1pl621,12534
#undef exp2lexp2l631,12675
npy_longdouble npy_exp2l(npy_longdouble x)npy_exp2l634,12717
#undef log2llog2l644,12856
npy_longdouble npy_log2l(npy_longdouble x)npy_log2l647,12898
#undef atan2latan2l657,13038
npy_longdouble npy_atan2l(npy_longdouble x, npy_longdouble y)npy_atan2l660,13082
#undef hypotlhypotl668,13250
npy_longdouble npy_hypotl(npy_longdouble x, npy_longdouble y)npy_hypotl671,13294
#undef powlpowl679,13460
npy_longdouble npy_powl(npy_longdouble x, npy_longdouble y)npy_powl682,13500
#undef fmodlfmodl690,13663
npy_longdouble npy_fmodl(npy_longdouble x, npy_longdouble y)npy_fmodl693,13705
#undef copysignlcopysignl701,13874
npy_longdouble npy_copysignl(npy_longdouble x, npy_longdouble y)npy_copysignl704,13924
#undef modflmodfl712,14088
npy_longdouble npy_modfl(npy_longdouble x, npy_longdouble *iptr)npy_modfl715,14130
#undef sinfsinf730,14386
float npy_sinf(float x)npy_sinf733,14426
#undef cosfcosf743,14535
float npy_cosf(float x)npy_cosf746,14575
#undef tanftanf756,14684
float npy_tanf(float x)npy_tanf759,14724
#undef sinhfsinhf769,14834
float npy_sinhf(float x)npy_sinhf772,14876
#undef coshfcoshf782,14988
float npy_coshf(float x)npy_coshf785,15030
#undef tanhftanhf795,15142
float npy_tanhf(float x)npy_tanhf798,15184
#undef fabsffabsf808,15296
float npy_fabsf(float x)npy_fabsf811,15338
#undef floorffloorf821,15451
float npy_floorf(float x)npy_floorf824,15495
#undef ceilfceilf834,15609
float npy_ceilf(float x)npy_ceilf837,15651
#undef rintfrintf847,15763
float npy_rintf(float x)npy_rintf850,15805
#undef truncftruncf860,15918
float npy_truncf(float x)npy_truncf863,15962
#undef sqrtfsqrtf873,16076
float npy_sqrtf(float x)npy_sqrtf876,16118
#undef log10flog10f886,16231
float npy_log10f(float x)npy_log10f889,16275
#undef logflogf899,16388
float npy_logf(float x)npy_logf902,16428
#undef expfexpf912,16537
float npy_expf(float x)npy_expf915,16577
#undef expm1fexpm1f925,16688
float npy_expm1f(float x)npy_expm1f928,16732
#undef asinfasinf938,16846
float npy_asinf(float x)npy_asinf941,16888
#undef acosfacosf951,17000
float npy_acosf(float x)npy_acosf954,17042
#undef atanfatanf964,17154
float npy_atanf(float x)npy_atanf967,17196
#undef asinhfasinhf977,17309
float npy_asinhf(float x)npy_asinhf980,17353
#undef acoshfacoshf990,17468
float npy_acoshf(float x)npy_acoshf993,17512
#undef atanhfatanhf1003,17627
float npy_atanhf(float x)npy_atanhf1006,17671
#undef log1pflog1pf1016,17786
float npy_log1pf(float x)npy_log1pf1019,17830
#undef exp2fexp2f1029,17944
float npy_exp2f(float x)npy_exp2f1032,17986
#undef log2flog2f1042,18098
float npy_log2f(float x)npy_log2f1045,18140
#undef atan2fatan2f1055,18253
float npy_atan2f(float x, float y)npy_atan2f1058,18297
#undef hypotfhypotf1066,18429
float npy_hypotf(float x, float y)npy_hypotf1069,18473
#undef powfpowf1077,18603
float npy_powf(float x, float y)npy_powf1080,18643
#undef fmodffmodf1088,18770
float npy_fmodf(float x, float y)npy_fmodf1091,18812
#undef copysignfcopysignf1099,18945
float npy_copysignf(float x, float y)npy_copysignf1102,18995
#undef modffmodff1110,19123
float npy_modff(float x, float *iptr)npy_modff1113,19165
npy_longdouble npy_sinl(npy_longdouble x)npy_sinl1132,19472
npy_longdouble npy_cosl(npy_longdouble x)npy_cosl1141,19583
npy_longdouble npy_tanl(npy_longdouble x)npy_tanl1150,19694
npy_longdouble npy_sinhl(npy_longdouble x)npy_sinhl1159,19806
npy_longdouble npy_coshl(npy_longdouble x)npy_coshl1168,19920
npy_longdouble npy_tanhl(npy_longdouble x)npy_tanhl1177,20034
npy_longdouble npy_fabsl(npy_longdouble x)npy_fabsl1186,20148
npy_longdouble npy_floorl(npy_longdouble x)npy_floorl1195,20263
npy_longdouble npy_ceill(npy_longdouble x)npy_ceill1204,20379
npy_longdouble npy_rintl(npy_longdouble x)npy_rintl1213,20493
npy_longdouble npy_truncl(npy_longdouble x)npy_truncl1222,20608
npy_longdouble npy_sqrtl(npy_longdouble x)npy_sqrtl1231,20724
npy_longdouble npy_log10l(npy_longdouble x)npy_log10l1240,20839
npy_longdouble npy_logl(npy_longdouble x)npy_logl1249,20954
npy_longdouble npy_expl(npy_longdouble x)npy_expl1258,21065
npy_longdouble npy_expm1l(npy_longdouble x)npy_expm1l1267,21178
npy_longdouble npy_asinl(npy_longdouble x)npy_asinl1276,21294
npy_longdouble npy_acosl(npy_longdouble x)npy_acosl1285,21408
npy_longdouble npy_atanl(npy_longdouble x)npy_atanl1294,21522
npy_longdouble npy_asinhl(npy_longdouble x)npy_asinhl1303,21637
npy_longdouble npy_acoshl(npy_longdouble x)npy_acoshl1312,21754
npy_longdouble npy_atanhl(npy_longdouble x)npy_atanhl1321,21871
npy_longdouble npy_log1pl(npy_longdouble x)npy_log1pl1330,21988
npy_longdouble npy_exp2l(npy_longdouble x)npy_exp2l1339,22104
npy_longdouble npy_log2l(npy_longdouble x)npy_log2l1348,22218
npy_longdouble npy_atan2l(npy_longdouble x, npy_longdouble y)npy_atan2l1358,22335
npy_longdouble npy_hypotl(npy_longdouble x, npy_longdouble y)npy_hypotl1366,22471
npy_longdouble npy_powl(npy_longdouble x, npy_longdouble y)npy_powl1374,22605
npy_longdouble npy_fmodl(npy_longdouble x, npy_longdouble y)npy_fmodl1382,22736
npy_longdouble npy_copysignl(npy_longdouble x, npy_longdouble y)npy_copysignl1390,22873
npy_longdouble npy_modfl(npy_longdouble x, npy_longdouble *iptr)npy_modfl1398,23005
double npy_sin(double x)npy_sin1408,23156
double npy_cos(double x)npy_cos1417,23248
double npy_tan(double x)npy_tan1426,23340
double npy_sinh(double x)npy_sinh1435,23433
double npy_cosh(double x)npy_cosh1444,23528
double npy_tanh(double x)npy_tanh1453,23623
double npy_fabs(double x)npy_fabs1462,23718
double npy_floor(double x)npy_floor1471,23814
double npy_ceil(double x)npy_ceil1480,23911
double npy_rint(double x)npy_rint1489,24006
double npy_trunc(double x)npy_trunc1498,24102
double npy_sqrt(double x)npy_sqrt1507,24199
double npy_log10(double x)npy_log101516,24295
double npy_log(double x)npy_log1525,24391
double npy_exp(double x)npy_exp1534,24483
double npy_expm1(double x)npy_expm11543,24577
double npy_asin(double x)npy_asin1552,24674
double npy_acos(double x)npy_acos1561,24769
double npy_atan(double x)npy_atan1570,24864
double npy_asinh(double x)npy_asinh1579,24960
double npy_acosh(double x)npy_acosh1588,25058
double npy_atanh(double x)npy_atanh1597,25156
double npy_log1p(double x)npy_log1p1606,25254
double npy_exp2(double x)npy_exp21615,25351
double npy_log2(double x)npy_log21624,25446
double npy_atan2(double x, double y)npy_atan21634,25544
double npy_hypot(double x, double y)npy_hypot1642,25653
double npy_pow(double x, double y)npy_pow1650,25760
double npy_fmod(double x, double y)npy_fmod1658,25864
double npy_copysign(double x, double y)npy_copysign1666,25974
double npy_modf(double x, double *iptr)npy_modf1674,26079
float npy_sinf(float x)npy_sinf1684,26205
float npy_cosf(float x)npy_cosf1693,26298
float npy_tanf(float x)npy_tanf1702,26391
float npy_sinhf(float x)npy_sinhf1711,26485
float npy_coshf(float x)npy_coshf1720,26581
float npy_tanhf(float x)npy_tanhf1729,26677
float npy_fabsf(float x)npy_fabsf1738,26773
float npy_floorf(float x)npy_floorf1747,26870
float npy_ceilf(float x)npy_ceilf1756,26968
float npy_rintf(float x)npy_rintf1765,27064
float npy_truncf(float x)npy_truncf1774,27161
float npy_sqrtf(float x)npy_sqrtf1783,27259
float npy_log10f(float x)npy_log10f1792,27356
float npy_logf(float x)npy_logf1801,27453
float npy_expf(float x)npy_expf1810,27546
float npy_expm1f(float x)npy_expm1f1819,27641
float npy_asinf(float x)npy_asinf1828,27739
float npy_acosf(float x)npy_acosf1837,27835
float npy_atanf(float x)npy_atanf1846,27931
float npy_asinhf(float x)npy_asinhf1855,28028
float npy_acoshf(float x)npy_acoshf1864,28127
float npy_atanhf(float x)npy_atanhf1873,28226
float npy_log1pf(float x)npy_log1pf1882,28325
float npy_exp2f(float x)npy_exp2f1891,28423
float npy_log2f(float x)npy_log2f1900,28519
float npy_atan2f(float x, float y)npy_atan2f1910,28618
float npy_hypotf(float x, float y)npy_hypotf1918,28727
float npy_powf(float x, float y)npy_powf1926,28834
float npy_fmodf(float x, float y)npy_fmodf1934,28938
float npy_copysignf(float x, float y)npy_copysignf1942,29048
float npy_modff(float x, float *iptr)npy_modff1950,29153
#define LOGE2 LOGE21965,29293
#define LOG2E LOG2E1966,29322
#define RAD2DEG RAD2DEG1967,29351
#define DEG2RAD DEG2RAD1968,29386
float npy_rad2degf(float x)npy_rad2degf1970,29423
float npy_deg2radf(float x)npy_deg2radf1975,29483
float npy_log2_1pf(float x)npy_log2_1pf1980,29543
float npy_exp2_m1f(float x)npy_exp2_m1f1985,29613
float npy_logaddexpf(float x, float y)npy_logaddexpf1990,29683
float npy_logaddexp2f(float x, float y)npy_logaddexp2f2005,30019
#undef LOGE2LOGE22020,30362
#undef LOG2ELOG2E2021,30376
#undef RAD2DEGRAD2DEG2022,30390
#undef DEG2RADDEG2RAD2023,30406
#define LOGE2 LOGE22028,30439
#define LOG2E LOG2E2029,30467
#define RAD2DEG RAD2DEG2030,30495
#define DEG2RAD DEG2RAD2031,30528
double npy_rad2deg(double x)npy_rad2deg2033,30563
double npy_deg2rad(double x)npy_deg2rad2038,30624
double npy_log2_1p(double x)npy_log2_1p2043,30685
double npy_exp2_m1(double x)npy_exp2_m12048,30755
double npy_logaddexp(double x, double y)npy_logaddexp2053,30825
double npy_logaddexp2(double x, double y)npy_logaddexp22068,31160
#undef LOGE2LOGE22083,31502
#undef LOG2ELOG2E2084,31516
#undef RAD2DEGRAD2DEG2085,31530
#undef DEG2RADDEG2RAD2086,31546
#define LOGE2 LOGE22091,31579
#define LOG2E LOG2E2092,31608
#define RAD2DEG RAD2DEG2093,31637
#define DEG2RAD DEG2RAD2094,31672
npy_longdouble npy_rad2degl(npy_longdouble x)npy_rad2degl2096,31709
npy_longdouble npy_deg2radl(npy_longdouble x)npy_deg2radl2101,31787
npy_longdouble npy_log2_1pl(npy_longdouble x)npy_log2_1pl2106,31865
npy_longdouble npy_exp2_m1l(npy_longdouble x)npy_exp2_m1l2111,31953
npy_longdouble npy_logaddexpl(npy_longdouble x, npy_longdouble y)npy_logaddexpl2116,32041
npy_longdouble npy_logaddexp2l(npy_longdouble x, npy_longdouble y)npy_logaddexp2l2131,32413
#undef LOGE2LOGE22146,32792
#undef LOG2ELOG2E2147,32806
#undef RAD2DEGRAD2DEG2148,32820
#undef DEG2RADDEG2RAD2149,32836

build/src.win32-2.6/numpy/core/src/npymath/npy_math_complex.c,3040
float npy_cabsf(npy_cfloat z)npy_cabsf50,2265
float npy_cargf(npy_cfloat z)npy_cargf57,2386
npy_cfloat npy_cexpf(npy_cfloat z)npy_cexpf64,2507
npy_cfloat npy_clogf(npy_cfloat z)npy_clogf125,3979
#define THRESH THRESH134,4195
npy_cfloat npy_csqrtf(npy_cfloat z)npy_csqrtf136,4243
#undef THRESHTHRESH196,5955
npy_cfloat npy_cpowf (npy_cfloat x, npy_cfloat y)npy_cpowf200,6000
npy_cfloat npy_ccosf(npy_cfloat z)npy_ccosf216,6333
npy_cfloat npy_csinf(npy_cfloat z)npy_csinf226,6553
double npy_cabs(npy_cdouble z)npy_cabs237,6779
double npy_carg(npy_cdouble z)npy_carg244,6897
npy_cdouble npy_cexp(npy_cdouble z)npy_cexp251,7015
npy_cdouble npy_clog(npy_cdouble z)npy_clog312,8469
#define THRESH THRESH321,8681
npy_cdouble npy_csqrt(npy_cdouble z)npy_csqrt323,8728
#undef THRESHTHRESH383,10421
npy_cdouble npy_cpow (npy_cdouble x, npy_cdouble y)npy_cpow387,10465
npy_cdouble npy_ccos(npy_cdouble z)npy_ccos403,10794
npy_cdouble npy_csin(npy_cdouble z)npy_csin413,11008
npy_longdouble npy_cabsl(npy_clongdouble z)npy_cabsl424,11230
npy_longdouble npy_cargl(npy_clongdouble z)npy_cargl431,11365
npy_clongdouble npy_cexpl(npy_clongdouble z)npy_cexpl438,11500
npy_clongdouble npy_clogl(npy_clongdouble z)npy_clogl499,13005
#define THRESH THRESH508,13231
npy_clongdouble npy_csqrtl(npy_clongdouble z)npy_csqrtl510,13280
#undef THRESHTHRESH570,15025
npy_clongdouble npy_cpowl (npy_clongdouble x, npy_clongdouble y)npy_cpowl574,15070
npy_clongdouble npy_ccosl(npy_clongdouble z)npy_ccosl590,15432
npy_clongdouble npy_csinl(npy_clongdouble z)npy_csinl600,15671
float npy_cabsf(npy_cfloat z)npy_cabsf618,16119
float npy_cargf(npy_cfloat z)npy_cargf627,16265
npy_cfloat npy_cexpf(npy_cfloat z)npy_cexpf637,16413
npy_cfloat npy_clogf(npy_cfloat z)npy_clogf648,16627
npy_cfloat npy_csqrtf(npy_cfloat z)npy_csqrtf659,16842
npy_cfloat npy_ccosf(npy_cfloat z)npy_ccosf670,17058
npy_cfloat npy_csinf(npy_cfloat z)npy_csinf681,17272
npy_cfloat npy_cpowf(npy_cfloat x, npy_cfloat y)npy_cpowf693,17488
double npy_cabs(npy_cdouble z)npy_cabs709,17782
double npy_carg(npy_cdouble z)npy_carg718,17928
npy_cdouble npy_cexp(npy_cdouble z)npy_cexp728,18076
npy_cdouble npy_clog(npy_cdouble z)npy_clog739,18291
npy_cdouble npy_csqrt(npy_cdouble z)npy_csqrt750,18507
npy_cdouble npy_ccos(npy_cdouble z)npy_ccos761,18724
npy_cdouble npy_csin(npy_cdouble z)npy_csin772,18939
npy_cdouble npy_cpow(npy_cdouble x, npy_cdouble y)npy_cpow784,19156
npy_longdouble npy_cabsl(npy_clongdouble z)npy_cabsl800,19455
npy_longdouble npy_cargl(npy_clongdouble z)npy_cargl809,19620
npy_clongdouble npy_cexpl(npy_clongdouble z)npy_cexpl819,19787
npy_clongdouble npy_clogl(npy_clongdouble z)npy_clogl830,20021
npy_clongdouble npy_csqrtl(npy_clongdouble z)npy_csqrtl841,20256
npy_clongdouble npy_ccosl(npy_clongdouble z)npy_ccosl852,20492
npy_clongdouble npy_csinl(npy_clongdouble z)npy_csinl863,20726
npy_clongdouble npy_cpowl(npy_clongdouble x, npy_clongdouble y)npy_cpowl875,20962

build/src.win32-2.6/numpy/core/src/scalarmathmodule.c,50252
static int ulonglong_overflow(ulonglong a, ulonglong b)ulonglong_overflow29,817
static int ulonglong_overflow(ulonglong NPY_UNUSED(a), ulonglong NPY_UNUSED(b))NPY_UNUSED66,1730
static int slonglong_overflow(longlong a0, longlong b0)slonglong_overflow72,1846
byte_ctype_add(byte a, byte b, byte *out) {byte_ctype_add149,3383
byte_ctype_subtract(byte a, byte b, byte *out) {byte_ctype_subtract158,3575
short_ctype_add(short a, short b, short *out) {short_ctype_add169,3786
short_ctype_subtract(short a, short b, short *out) {short_ctype_subtract178,3982
int_ctype_add(int a, int b, int *out) {int_ctype_add189,4197
int_ctype_subtract(int a, int b, int *out) {int_ctype_subtract198,4385
long_ctype_add(long a, long b, long *out) {long_ctype_add209,4592
long_ctype_subtract(long a, long b, long *out) {long_ctype_subtract218,4784
longlong_ctype_add(longlong a, longlong b, longlong *out) {longlong_ctype_add229,4995
longlong_ctype_subtract(longlong a, longlong b, longlong *out) {longlong_ctype_subtract238,5203
ubyte_ctype_add(ubyte a, ubyte b, ubyte *out) {ubyte_ctype_add250,5432
ubyte_ctype_subtract(ubyte a, ubyte b, ubyte *out) {ubyte_ctype_subtract259,5620
ushort_ctype_add(ushort a, ushort b, ushort *out) {ushort_ctype_add270,5810
ushort_ctype_subtract(ushort a, ushort b, ushort *out) {ushort_ctype_subtract279,6002
uint_ctype_add(uint a, uint b, uint *out) {uint_ctype_add290,6196
uint_ctype_subtract(uint a, uint b, uint *out) {uint_ctype_subtract299,6380
ulong_ctype_add(ulong a, ulong b, ulong *out) {ulong_ctype_add310,6566
ulong_ctype_subtract(ulong a, ulong b, ulong *out) {ulong_ctype_subtract319,6754
ulonglong_ctype_add(ulonglong a, ulonglong b, ulonglong *out) {ulonglong_ctype_add330,6944
ulonglong_ctype_subtract(ulonglong a, ulonglong b, ulonglong *out) {ulonglong_ctype_subtract339,7148
#define SIZEOF_BYTE SIZEOF_BYTE350,7353
byte_ctype_multiply(byte a, byte b, byte *out) {byte_ctype_multiply356,7440
ubyte_ctype_multiply(ubyte a, ubyte b, ubyte *out) {ubyte_ctype_multiply373,7782
short_ctype_multiply(short a, short b, short *out) {short_ctype_multiply390,8136
ushort_ctype_multiply(ushort a, ushort b, ushort *out) {ushort_ctype_multiply407,8487
int_ctype_multiply(int a, int b, int *out) {int_ctype_multiply424,8852
uint_ctype_multiply(uint a, uint b, uint *out) {uint_ctype_multiply441,9205
long_ctype_multiply(long a, long b, long *out) {long_ctype_multiply458,9570
ulong_ctype_multiply(ulong a, ulong b, ulong *out) {ulong_ctype_multiply475,9932
int_ctype_multiply(int a, int b, int *out) {int_ctype_multiply493,10307
uint_ctype_multiply(uint a, uint b, uint *out) {uint_ctype_multiply505,10537
long_ctype_multiply(long a, long b, long *out) {long_ctype_multiply517,10772
ulong_ctype_multiply(ulong a, ulong b, ulong *out) {ulong_ctype_multiply529,11007
longlong_ctype_multiply(longlong a, longlong b, longlong *out) {longlong_ctype_multiply541,11250
ulonglong_ctype_multiply(ulonglong a, ulonglong b, ulonglong *out) {ulonglong_ctype_multiply553,11505
byte_ctype_divide(byte a, byte b, byte *out) {byte_ctype_divide565,11726
#define byte_ctype_floor_divide byte_ctype_floor_divide590,12197
byte_ctype_remainder(byte a, byte b, byte *out) {byte_ctype_remainder592,12261
ubyte_ctype_divide(ubyte a, ubyte b, ubyte *out) {ubyte_ctype_divide614,12681
#define ubyte_ctype_floor_divide ubyte_ctype_floor_divide639,13157
ubyte_ctype_remainder(ubyte a, ubyte b, ubyte *out) {ubyte_ctype_remainder641,13223
short_ctype_divide(short a, short b, short *out) {short_ctype_divide663,13647
#define short_ctype_floor_divide short_ctype_floor_divide688,14123
short_ctype_remainder(short a, short b, short *out) {short_ctype_remainder690,14189
ushort_ctype_divide(ushort a, ushort b, ushort *out) {ushort_ctype_divide712,14613
#define ushort_ctype_floor_divide ushort_ctype_floor_divide737,15094
ushort_ctype_remainder(ushort a, ushort b, ushort *out) {ushort_ctype_remainder739,15162
int_ctype_divide(int a, int b, int *out) {int_ctype_divide761,15590
#define int_ctype_floor_divide int_ctype_floor_divide786,16056
int_ctype_remainder(int a, int b, int *out) {int_ctype_remainder788,16118
uint_ctype_divide(uint a, uint b, uint *out) {uint_ctype_divide810,16534
#define uint_ctype_floor_divide uint_ctype_floor_divide835,17005
uint_ctype_remainder(uint a, uint b, uint *out) {uint_ctype_remainder837,17069
long_ctype_divide(long a, long b, long *out) {long_ctype_divide859,17489
#define long_ctype_floor_divide long_ctype_floor_divide884,17960
long_ctype_remainder(long a, long b, long *out) {long_ctype_remainder886,18024
ulong_ctype_divide(ulong a, ulong b, ulong *out) {ulong_ctype_divide908,18444
#define ulong_ctype_floor_divide ulong_ctype_floor_divide933,18920
ulong_ctype_remainder(ulong a, ulong b, ulong *out) {ulong_ctype_remainder935,18986
longlong_ctype_divide(longlong a, longlong b, longlong *out) {longlong_ctype_divide957,19410
#define longlong_ctype_floor_divide longlong_ctype_floor_divide982,19901
longlong_ctype_remainder(longlong a, longlong b, longlong *out) {longlong_ctype_remainder984,19973
ulonglong_ctype_divide(ulonglong a, ulonglong b, ulonglong *out) {ulonglong_ctype_divide1006,20409
#define ulonglong_ctype_floor_divide ulonglong_ctype_floor_divide1031,20905
ulonglong_ctype_remainder(ulonglong a, ulonglong b, ulonglong *out) {ulonglong_ctype_remainder1033,20979
#define byte_ctype_true_divide(byte_ctype_true_divide1055,21408
#define ubyte_ctype_true_divide(ubyte_ctype_true_divide1059,21515
#define short_ctype_true_divide(short_ctype_true_divide1063,21623
#define ushort_ctype_true_divide(ushort_ctype_true_divide1067,21731
#define int_ctype_true_divide(int_ctype_true_divide1071,21840
#define uint_ctype_true_divide(uint_ctype_true_divide1075,21948
#define long_ctype_true_divide(long_ctype_true_divide1079,22057
#define ulong_ctype_true_divide(ulong_ctype_true_divide1083,22166
#define longlong_ctype_true_divide(longlong_ctype_true_divide1087,22276
#define ulonglong_ctype_true_divide(ulonglong_ctype_true_divide1091,22389
byte_ctype_power(byte a, byte b, byte *out) {byte_ctype_power1098,22564
ubyte_ctype_power(ubyte a, ubyte b, ubyte *out) {ubyte_ctype_power1124,23213
short_ctype_power(short a, short b, short *out) {short_ctype_power1150,23869
ushort_ctype_power(ushort a, ushort b, ushort *out) {ushort_ctype_power1176,24525
int_ctype_power(int a, int b, int *out) {int_ctype_power1202,25188
uint_ctype_power(uint a, uint b, uint *out) {uint_ctype_power1228,25830
long_ctype_power(long a, long b, long *out) {long_ctype_power1254,26479
ulong_ctype_power(ulong a, ulong b, ulong *out) {ulong_ctype_power1280,27128
longlong_ctype_power(longlong a, longlong b, longlong *out) {longlong_ctype_power1306,27784
ulonglong_ctype_power(ulonglong a, ulonglong b, ulonglong *out) {ulonglong_ctype_power1332,28461
#define byte_ctype_and(byte_ctype_and1362,29214
#define ubyte_ctype_and(ubyte_ctype_and1365,29293
#define short_ctype_and(short_ctype_and1368,29373
#define ushort_ctype_and(ushort_ctype_and1371,29453
#define int_ctype_and(int_ctype_and1374,29534
#define uint_ctype_and(uint_ctype_and1377,29612
#define long_ctype_and(long_ctype_and1380,29691
#define ulong_ctype_and(ulong_ctype_and1383,29770
#define longlong_ctype_and(longlong_ctype_and1386,29850
#define ulonglong_ctype_and(ulonglong_ctype_and1389,29933
#define byte_ctype_xor(byte_ctype_xor1392,30017
#define ubyte_ctype_xor(ubyte_ctype_xor1395,30096
#define short_ctype_xor(short_ctype_xor1398,30176
#define ushort_ctype_xor(ushort_ctype_xor1401,30256
#define int_ctype_xor(int_ctype_xor1404,30337
#define uint_ctype_xor(uint_ctype_xor1407,30415
#define long_ctype_xor(long_ctype_xor1410,30494
#define ulong_ctype_xor(ulong_ctype_xor1413,30573
#define longlong_ctype_xor(longlong_ctype_xor1416,30653
#define ulonglong_ctype_xor(ulonglong_ctype_xor1419,30736
#define byte_ctype_or(byte_ctype_or1422,30820
#define ubyte_ctype_or(ubyte_ctype_or1425,30898
#define short_ctype_or(short_ctype_or1428,30977
#define ushort_ctype_or(ushort_ctype_or1431,31056
#define int_ctype_or(int_ctype_or1434,31136
#define uint_ctype_or(uint_ctype_or1437,31213
#define long_ctype_or(long_ctype_or1440,31291
#define ulong_ctype_or(ulong_ctype_or1443,31369
#define longlong_ctype_or(longlong_ctype_or1446,31448
#define ulonglong_ctype_or(ulonglong_ctype_or1449,31530
#define byte_ctype_lshift(byte_ctype_lshift1452,31613
#define ubyte_ctype_lshift(ubyte_ctype_lshift1455,31696
#define short_ctype_lshift(short_ctype_lshift1458,31780
#define ushort_ctype_lshift(ushort_ctype_lshift1461,31864
#define int_ctype_lshift(int_ctype_lshift1464,31949
#define uint_ctype_lshift(uint_ctype_lshift1467,32031
#define long_ctype_lshift(long_ctype_lshift1470,32114
#define ulong_ctype_lshift(ulong_ctype_lshift1473,32197
#define longlong_ctype_lshift(longlong_ctype_lshift1476,32281
#define ulonglong_ctype_lshift(ulonglong_ctype_lshift1479,32368
#define byte_ctype_rshift(byte_ctype_rshift1482,32456
#define ubyte_ctype_rshift(ubyte_ctype_rshift1485,32539
#define short_ctype_rshift(short_ctype_rshift1488,32623
#define ushort_ctype_rshift(ushort_ctype_rshift1491,32707
#define int_ctype_rshift(int_ctype_rshift1494,32792
#define uint_ctype_rshift(uint_ctype_rshift1497,32874
#define long_ctype_rshift(long_ctype_rshift1500,32957
#define ulong_ctype_rshift(ulong_ctype_rshift1503,33040
#define longlong_ctype_rshift(longlong_ctype_rshift1506,33124
#define ulonglong_ctype_rshift(ulonglong_ctype_rshift1509,33211
static float (*_basic_float_floor)(float);_basic_float_floor1513,33301
static float (*_basic_float_sqrt)(float);_basic_float_sqrt1514,33345
static float (*_basic_float_fmod)(float, float);_basic_float_fmod1515,33388
#define float_ctype_add(float_ctype_add1516,33438
#define float_ctype_subtract(float_ctype_subtract1517,33491
#define float_ctype_multiply(float_ctype_multiply1518,33549
#define float_ctype_divide(float_ctype_divide1519,33607
#define float_ctype_true_divide float_ctype_true_divide1520,33663
#define float_ctype_floor_divide(float_ctype_floor_divide1521,33715
static double (*_basic_double_floor)(double);_basic_double_floor1525,33823
static double (*_basic_double_sqrt)(double);_basic_double_sqrt1526,33870
static double (*_basic_double_fmod)(double, double);_basic_double_fmod1527,33916
#define double_ctype_add(double_ctype_add1528,33970
#define double_ctype_subtract(double_ctype_subtract1529,34024
#define double_ctype_multiply(double_ctype_multiply1530,34083
#define double_ctype_divide(double_ctype_divide1531,34142
#define double_ctype_true_divide double_ctype_true_divide1532,34199
#define double_ctype_floor_divide(double_ctype_floor_divide1533,34253
static longdouble (*_basic_longdouble_floor)(longdouble);_basic_longdouble_floor1537,34363
static longdouble (*_basic_longdouble_sqrt)(longdouble);_basic_longdouble_sqrt1538,34422
static longdouble (*_basic_longdouble_fmod)(longdouble, longdouble);_basic_longdouble_fmod1539,34480
#define longdouble_ctype_add(longdouble_ctype_add1540,34550
#define longdouble_ctype_subtract(longdouble_ctype_subtract1541,34608
#define longdouble_ctype_multiply(longdouble_ctype_multiply1542,34671
#define longdouble_ctype_divide(longdouble_ctype_divide1543,34734
#define longdouble_ctype_true_divide longdouble_ctype_true_divide1544,34795
#define longdouble_ctype_floor_divide(longdouble_ctype_floor_divide1545,34857
#define cfloat_ctype_add(cfloat_ctype_add1550,34977
#define cfloat_ctype_subtract(cfloat_ctype_subtract1554,35146
#define cfloat_ctype_multiply(cfloat_ctype_multiply1558,35315
#define cfloat_ctype_divide(cfloat_ctype_divide1562,35532
#define cfloat_ctype_true_divide cfloat_ctype_true_divide1567,35814
#define cfloat_ctype_floor_divide(cfloat_ctype_floor_divide1568,35868
#define cdouble_ctype_add(cdouble_ctype_add1576,36190
#define cdouble_ctype_subtract(cdouble_ctype_subtract1580,36360
#define cdouble_ctype_multiply(cdouble_ctype_multiply1584,36530
#define cdouble_ctype_divide(cdouble_ctype_divide1588,36748
#define cdouble_ctype_true_divide cdouble_ctype_true_divide1593,37032
#define cdouble_ctype_floor_divide(cdouble_ctype_floor_divide1594,37088
#define clongdouble_ctype_add(clongdouble_ctype_add1602,37412
#define clongdouble_ctype_subtract(clongdouble_ctype_subtract1606,37586
#define clongdouble_ctype_multiply(clongdouble_ctype_multiply1610,37760
#define clongdouble_ctype_divide(clongdouble_ctype_divide1614,37982
#define clongdouble_ctype_true_divide clongdouble_ctype_true_divide1619,38274
#define clongdouble_ctype_floor_divide(clongdouble_ctype_floor_divide1620,38338
float_ctype_remainder(float a, float b, float *out) {float_ctype_remainder1630,38685
double_ctype_remainder(double a, double b, double *out) {double_ctype_remainder1641,38908
longdouble_ctype_remainder(longdouble a, longdouble b, longdouble *out) {longdouble_ctype_remainder1652,39137
#define byte_ctype_divmod(byte_ctype_divmod1665,39383
#define ubyte_ctype_divmod(ubyte_ctype_divmod1671,39550
#define short_ctype_divmod(short_ctype_divmod1677,39720
#define ushort_ctype_divmod(ushort_ctype_divmod1683,39890
#define int_ctype_divmod(int_ctype_divmod1689,40063
#define uint_ctype_divmod(uint_ctype_divmod1695,40227
#define long_ctype_divmod(long_ctype_divmod1701,40394
#define ulong_ctype_divmod(ulong_ctype_divmod1707,40561
#define longlong_ctype_divmod(longlong_ctype_divmod1713,40731
#define ulonglong_ctype_divmod(ulonglong_ctype_divmod1719,40910
#define float_ctype_divmod(float_ctype_divmod1725,41092
#define double_ctype_divmod(double_ctype_divmod1731,41262
#define longdouble_ctype_divmod(longdouble_ctype_divmod1737,41435
#define cfloat_ctype_divmod(cfloat_ctype_divmod1743,41620
#define cdouble_ctype_divmod(cdouble_ctype_divmod1749,41793
#define clongdouble_ctype_divmod(clongdouble_ctype_divmod1755,41969
static float (*_basic_float_pow)(float a, float b);_basic_float_pow1762,42159
float_ctype_power(float a, float b, float *out) {float_ctype_power1764,42225
static double (*_basic_double_pow)(double a, double b);_basic_double_pow1769,42328
double_ctype_power(double a, double b, double *out) {double_ctype_power1771,42398
static longdouble (*_basic_longdouble_pow)(longdouble a, longdouble b);_basic_longdouble_pow1776,42506
longdouble_ctype_power(longdouble a, longdouble b, longdouble *out) {longdouble_ctype_power1778,42592
byte_ctype_negative(byte a, byte *out)byte_ctype_negative1785,42735
ubyte_ctype_negative(ubyte a, ubyte *out)ubyte_ctype_negative1795,42870
short_ctype_negative(short a, short *out)short_ctype_negative1805,43008
ushort_ctype_negative(ushort a, ushort *out)ushort_ctype_negative1815,43146
int_ctype_negative(int a, int *out)int_ctype_negative1825,43287
uint_ctype_negative(uint a, uint *out)uint_ctype_negative1835,43419
long_ctype_negative(long a, long *out)long_ctype_negative1845,43554
ulong_ctype_negative(ulong a, ulong *out)ulong_ctype_negative1855,43689
longlong_ctype_negative(longlong a, longlong *out)longlong_ctype_negative1865,43827
ulonglong_ctype_negative(ulonglong a, ulonglong *out)ulonglong_ctype_negative1875,43974
float_ctype_negative(float a, float *out)float_ctype_negative1885,44124
double_ctype_negative(double a, double *out)double_ctype_negative1895,44262
longdouble_ctype_negative(longdouble a, longdouble *out)longdouble_ctype_negative1905,44403
cfloat_ctype_negative(cfloat a, cfloat *out)cfloat_ctype_negative1917,44560
cdouble_ctype_negative(cdouble a, cdouble *out)cdouble_ctype_negative1925,44690
clongdouble_ctype_negative(clongdouble a, clongdouble *out)clongdouble_ctype_negative1933,44823
byte_ctype_positive(byte a, byte *out)byte_ctype_positive1942,44970
ubyte_ctype_positive(ubyte a, ubyte *out)ubyte_ctype_positive1949,45057
short_ctype_positive(short a, short *out)short_ctype_positive1956,45147
ushort_ctype_positive(ushort a, ushort *out)ushort_ctype_positive1963,45237
int_ctype_positive(int a, int *out)int_ctype_positive1970,45330
uint_ctype_positive(uint a, uint *out)uint_ctype_positive1977,45414
long_ctype_positive(long a, long *out)long_ctype_positive1984,45501
ulong_ctype_positive(ulong a, ulong *out)ulong_ctype_positive1991,45588
longlong_ctype_positive(longlong a, longlong *out)longlong_ctype_positive1998,45678
ulonglong_ctype_positive(ulonglong a, ulonglong *out)ulonglong_ctype_positive2005,45777
float_ctype_positive(float a, float *out)float_ctype_positive2012,45879
double_ctype_positive(double a, double *out)double_ctype_positive2019,45969
longdouble_ctype_positive(longdouble a, longdouble *out)longdouble_ctype_positive2026,46062
cfloat_ctype_positive(cfloat a, cfloat *out)cfloat_ctype_positive2039,46289
static void (*_basic_cfloat_pow)(cfloat *, cfloat *, cfloat *);_basic_cfloat_pow2044,46391
cfloat_ctype_power(cfloat a, cfloat b, cfloat *out)cfloat_ctype_power2046,46469
cdouble_ctype_positive(cdouble a, cdouble *out)cdouble_ctype_positive2053,46591
static void (*_basic_cdouble_pow)(cdouble *, cdouble *, cdouble *);_basic_cdouble_pow2058,46696
cdouble_ctype_power(cdouble a, cdouble b, cdouble *out)cdouble_ctype_power2060,46778
clongdouble_ctype_positive(clongdouble a, clongdouble *out)clongdouble_ctype_positive2067,46905
static void (*_basic_clongdouble_pow)(clongdouble *, clongdouble *, clongdouble *);_basic_clongdouble_pow2072,47022
clongdouble_ctype_power(clongdouble a, clongdouble b, clongdouble *out)clongdouble_ctype_power2074,47120
#define ubyte_ctype_absolute ubyte_ctype_absolute2082,47258
#define ushort_ctype_absolute ushort_ctype_absolute2085,47322
#define uint_ctype_absolute uint_ctype_absolute2088,47388
#define ulong_ctype_absolute ulong_ctype_absolute2091,47450
#define ulonglong_ctype_absolute ulonglong_ctype_absolute2094,47514
byte_ctype_absolute(byte a, byte *out)byte_ctype_absolute2100,47603
short_ctype_absolute(short a, short *out)short_ctype_absolute2107,47705
int_ctype_absolute(int a, int *out)int_ctype_absolute2114,47810
long_ctype_absolute(long a, long *out)long_ctype_absolute2121,47909
longlong_ctype_absolute(longlong a, longlong *out)longlong_ctype_absolute2128,48011
float_ctype_absolute(float a, float *out)float_ctype_absolute2135,48125
double_ctype_absolute(double a, double *out)double_ctype_absolute2142,48230
longdouble_ctype_absolute(longdouble a, longdouble *out)longdouble_ctype_absolute2149,48338
cfloat_ctype_absolute(cfloat a, float *out)cfloat_ctype_absolute2157,48460
cdouble_ctype_absolute(cdouble a, double *out)cdouble_ctype_absolute2164,48599
clongdouble_ctype_absolute(clongdouble a, longdouble *out)clongdouble_ctype_absolute2171,48742
#define byte_ctype_invert(byte_ctype_invert2178,48890
#define ubyte_ctype_invert(ubyte_ctype_invert2181,48951
#define short_ctype_invert(short_ctype_invert2184,49013
#define ushort_ctype_invert(ushort_ctype_invert2187,49075
#define int_ctype_invert(int_ctype_invert2190,49138
#define uint_ctype_invert(uint_ctype_invert2193,49198
#define long_ctype_invert(long_ctype_invert2196,49259
#define ulong_ctype_invert(ulong_ctype_invert2199,49320
#define longlong_ctype_invert(longlong_ctype_invert2202,49382
#define ulonglong_ctype_invert(ulonglong_ctype_invert2205,49447
_byte_convert_to_ctype(PyObject *a, byte *arg1)_byte_convert_to_ctype2228,50086
_ubyte_convert_to_ctype(PyObject *a, ubyte *arg1)_ubyte_convert_to_ctype2270,51157
_short_convert_to_ctype(PyObject *a, short *arg1)_short_convert_to_ctype2312,52235
_ushort_convert_to_ctype(PyObject *a, ushort *arg1)_ushort_convert_to_ctype2354,53313
_int_convert_to_ctype(PyObject *a, int *arg1)_int_convert_to_ctype2396,54398
_uint_convert_to_ctype(PyObject *a, uint *arg1)_uint_convert_to_ctype2438,55462
_long_convert_to_ctype(PyObject *a, long *arg1)_long_convert_to_ctype2480,56533
_ulong_convert_to_ctype(PyObject *a, ulong *arg1)_ulong_convert_to_ctype2522,57604
_longlong_convert_to_ctype(PyObject *a, longlong *arg1)_longlong_convert_to_ctype2564,58682
_ulonglong_convert_to_ctype(PyObject *a, ulonglong *arg1)_ulonglong_convert_to_ctype2606,59781
_float_convert_to_ctype(PyObject *a, float *arg1)_float_convert_to_ctype2648,60887
_double_convert_to_ctype(PyObject *a, double *arg1)_double_convert_to_ctype2690,61965
_longdouble_convert_to_ctype(PyObject *a, longdouble *arg1)_longdouble_convert_to_ctype2732,63050
_cfloat_convert_to_ctype(PyObject *a, cfloat *arg1)_cfloat_convert_to_ctype2774,64163
_cdouble_convert_to_ctype(PyObject *a, cdouble *arg1)_cdouble_convert_to_ctype2816,65248
_clongdouble_convert_to_ctype(PyObject *a, clongdouble *arg1)_clongdouble_convert_to_ctype2858,66340
_byte_convert2_to_ctypes(PyObject *a, byte *arg1,_byte_convert2_to_ctypes2901,67462
_ubyte_convert2_to_ctypes(PyObject *a, ubyte *arg1,_ubyte_convert2_to_ctypes2918,67810
_short_convert2_to_ctypes(PyObject *a, short *arg1,_short_convert2_to_ctypes2935,68163
_ushort_convert2_to_ctypes(PyObject *a, ushort *arg1,_ushort_convert2_to_ctypes2952,68516
_int_convert2_to_ctypes(PyObject *a, int *arg1,_int_convert2_to_ctypes2969,68874
_uint_convert2_to_ctypes(PyObject *a, uint *arg1,_uint_convert2_to_ctypes2986,69217
_long_convert2_to_ctypes(PyObject *a, long *arg1,_long_convert2_to_ctypes3003,69565
_ulong_convert2_to_ctypes(PyObject *a, ulong *arg1,_ulong_convert2_to_ctypes3020,69913
_longlong_convert2_to_ctypes(PyObject *a, longlong *arg1,_longlong_convert2_to_ctypes3037,70266
_ulonglong_convert2_to_ctypes(PyObject *a, ulonglong *arg1,_ulonglong_convert2_to_ctypes3054,70634
_float_convert2_to_ctypes(PyObject *a, float *arg1,_float_convert2_to_ctypes3071,71007
_double_convert2_to_ctypes(PyObject *a, double *arg1,_double_convert2_to_ctypes3088,71360
_cfloat_convert2_to_ctypes(PyObject *a, cfloat *arg1,_cfloat_convert2_to_ctypes3105,71718
_cdouble_convert2_to_ctypes(PyObject *a, cdouble *arg1,_cdouble_convert2_to_ctypes3122,72076
_longdouble_convert2_to_ctypes(PyObject *a, longdouble *arg1,_longdouble_convert2_to_ctypes3141,72443
_clongdouble_convert2_to_ctypes(PyObject *a, clongdouble *arg1,_clongdouble_convert2_to_ctypes3163,72873
#define CODEGEN_SKIP_divide_FLAGCODEGEN_SKIP_divide_FLAG3185,73310
byte_add(PyObject *a, PyObject *b)byte_add3193,73425
ubyte_add(PyObject *a, PyObject *b)ubyte_add3300,75896
short_add(PyObject *a, PyObject *b)short_add3407,78381
ushort_add(PyObject *a, PyObject *b)ushort_add3514,80866
int_add(PyObject *a, PyObject *b)int_add3621,83365
uint_add(PyObject *a, PyObject *b)uint_add3728,85822
long_add(PyObject *a, PyObject *b)long_add3835,88293
ulong_add(PyObject *a, PyObject *b)ulong_add3942,90764
longlong_add(PyObject *a, PyObject *b)longlong_add4049,93249
ulonglong_add(PyObject *a, PyObject *b)ulonglong_add4156,95776
byte_subtract(PyObject *a, PyObject *b)byte_subtract4263,98322
ubyte_subtract(PyObject *a, PyObject *b)ubyte_subtract4370,100823
short_subtract(PyObject *a, PyObject *b)short_subtract4477,103338
ushort_subtract(PyObject *a, PyObject *b)ushort_subtract4584,105853
int_subtract(PyObject *a, PyObject *b)int_subtract4691,108382
uint_subtract(PyObject *a, PyObject *b)uint_subtract4798,110869
long_subtract(PyObject *a, PyObject *b)long_subtract4905,113370
ulong_subtract(PyObject *a, PyObject *b)ulong_subtract5012,115871
longlong_subtract(PyObject *a, PyObject *b)longlong_subtract5119,118386
ulonglong_subtract(PyObject *a, PyObject *b)ulonglong_subtract5226,120943
byte_multiply(PyObject *a, PyObject *b)byte_multiply5333,123514
ubyte_multiply(PyObject *a, PyObject *b)ubyte_multiply5440,126015
short_multiply(PyObject *a, PyObject *b)short_multiply5547,128530
ushort_multiply(PyObject *a, PyObject *b)ushort_multiply5654,131045
int_multiply(PyObject *a, PyObject *b)int_multiply5761,133574
uint_multiply(PyObject *a, PyObject *b)uint_multiply5868,136061
long_multiply(PyObject *a, PyObject *b)long_multiply5975,138562
ulong_multiply(PyObject *a, PyObject *b)ulong_multiply6082,141063
longlong_multiply(PyObject *a, PyObject *b)longlong_multiply6189,143578
ulonglong_multiply(PyObject *a, PyObject *b)ulonglong_multiply6296,146135
byte_divide(PyObject *a, PyObject *b)byte_divide6403,148704
ubyte_divide(PyObject *a, PyObject *b)ubyte_divide6510,151193
short_divide(PyObject *a, PyObject *b)short_divide6617,153696
ushort_divide(PyObject *a, PyObject *b)ushort_divide6724,156199
int_divide(PyObject *a, PyObject *b)int_divide6831,158716
uint_divide(PyObject *a, PyObject *b)uint_divide6938,161191
long_divide(PyObject *a, PyObject *b)long_divide7045,163680
ulong_divide(PyObject *a, PyObject *b)ulong_divide7152,166169
longlong_divide(PyObject *a, PyObject *b)longlong_divide7259,168672
ulonglong_divide(PyObject *a, PyObject *b)ulonglong_divide7366,171217
byte_remainder(PyObject *a, PyObject *b)byte_remainder7473,173779
ubyte_remainder(PyObject *a, PyObject *b)ubyte_remainder7580,176286
short_remainder(PyObject *a, PyObject *b)short_remainder7687,178807
ushort_remainder(PyObject *a, PyObject *b)ushort_remainder7794,181328
int_remainder(PyObject *a, PyObject *b)int_remainder7901,183863
uint_remainder(PyObject *a, PyObject *b)uint_remainder8008,186356
long_remainder(PyObject *a, PyObject *b)long_remainder8115,188863
ulong_remainder(PyObject *a, PyObject *b)ulong_remainder8222,191370
longlong_remainder(PyObject *a, PyObject *b)longlong_remainder8329,193891
ulonglong_remainder(PyObject *a, PyObject *b)ulonglong_remainder8436,196454
byte_divmod(PyObject *a, PyObject *b)byte_divmod8543,199028
ubyte_divmod(PyObject *a, PyObject *b)ubyte_divmod8650,201517
short_divmod(PyObject *a, PyObject *b)short_divmod8757,204020
ushort_divmod(PyObject *a, PyObject *b)ushort_divmod8864,206523
int_divmod(PyObject *a, PyObject *b)int_divmod8971,209040
uint_divmod(PyObject *a, PyObject *b)uint_divmod9078,211515
long_divmod(PyObject *a, PyObject *b)long_divmod9185,214004
ulong_divmod(PyObject *a, PyObject *b)ulong_divmod9292,216493
longlong_divmod(PyObject *a, PyObject *b)longlong_divmod9399,218996
ulonglong_divmod(PyObject *a, PyObject *b)ulonglong_divmod9506,221541
byte_floor_divide(PyObject *a, PyObject *b)byte_floor_divide9613,224106
ubyte_floor_divide(PyObject *a, PyObject *b)ubyte_floor_divide9720,226631
short_floor_divide(PyObject *a, PyObject *b)short_floor_divide9827,229170
ushort_floor_divide(PyObject *a, PyObject *b)ushort_floor_divide9934,231709
int_floor_divide(PyObject *a, PyObject *b)int_floor_divide10041,234262
uint_floor_divide(PyObject *a, PyObject *b)uint_floor_divide10148,236773
long_floor_divide(PyObject *a, PyObject *b)long_floor_divide10255,239298
ulong_floor_divide(PyObject *a, PyObject *b)ulong_floor_divide10362,241823
longlong_floor_divide(PyObject *a, PyObject *b)longlong_floor_divide10469,244362
ulonglong_floor_divide(PyObject *a, PyObject *b)ulonglong_floor_divide10576,246943
byte_lshift(PyObject *a, PyObject *b)byte_lshift10683,249532
ubyte_lshift(PyObject *a, PyObject *b)ubyte_lshift10790,252021
short_lshift(PyObject *a, PyObject *b)short_lshift10897,254524
ushort_lshift(PyObject *a, PyObject *b)ushort_lshift11004,257027
int_lshift(PyObject *a, PyObject *b)int_lshift11111,259544
uint_lshift(PyObject *a, PyObject *b)uint_lshift11218,262019
long_lshift(PyObject *a, PyObject *b)long_lshift11325,264508
ulong_lshift(PyObject *a, PyObject *b)ulong_lshift11432,266997
longlong_lshift(PyObject *a, PyObject *b)longlong_lshift11539,269500
ulonglong_lshift(PyObject *a, PyObject *b)ulonglong_lshift11646,272045
byte_rshift(PyObject *a, PyObject *b)byte_rshift11753,274604
ubyte_rshift(PyObject *a, PyObject *b)ubyte_rshift11860,277093
short_rshift(PyObject *a, PyObject *b)short_rshift11967,279596
ushort_rshift(PyObject *a, PyObject *b)ushort_rshift12074,282099
int_rshift(PyObject *a, PyObject *b)int_rshift12181,284616
uint_rshift(PyObject *a, PyObject *b)uint_rshift12288,287091
long_rshift(PyObject *a, PyObject *b)long_rshift12395,289580
ulong_rshift(PyObject *a, PyObject *b)ulong_rshift12502,292069
longlong_rshift(PyObject *a, PyObject *b)longlong_rshift12609,294572
ulonglong_rshift(PyObject *a, PyObject *b)ulonglong_rshift12716,297117
byte_and(PyObject *a, PyObject *b)byte_and12823,299673
ubyte_and(PyObject *a, PyObject *b)ubyte_and12930,302144
short_and(PyObject *a, PyObject *b)short_and13037,304629
ushort_and(PyObject *a, PyObject *b)ushort_and13144,307114
int_and(PyObject *a, PyObject *b)int_and13251,309613
uint_and(PyObject *a, PyObject *b)uint_and13358,312070
long_and(PyObject *a, PyObject *b)long_and13465,314541
ulong_and(PyObject *a, PyObject *b)ulong_and13572,317012
longlong_and(PyObject *a, PyObject *b)longlong_and13679,319497
ulonglong_and(PyObject *a, PyObject *b)ulonglong_and13786,322024
byte_or(PyObject *a, PyObject *b)byte_or13893,324564
ubyte_or(PyObject *a, PyObject *b)ubyte_or14000,327029
short_or(PyObject *a, PyObject *b)short_or14107,329508
ushort_or(PyObject *a, PyObject *b)ushort_or14214,331987
int_or(PyObject *a, PyObject *b)int_or14321,334480
uint_or(PyObject *a, PyObject *b)uint_or14428,336931
long_or(PyObject *a, PyObject *b)long_or14535,339396
ulong_or(PyObject *a, PyObject *b)ulong_or14642,341861
longlong_or(PyObject *a, PyObject *b)longlong_or14749,344340
ulonglong_or(PyObject *a, PyObject *b)ulonglong_or14856,346861
byte_xor(PyObject *a, PyObject *b)byte_xor14963,349397
ubyte_xor(PyObject *a, PyObject *b)ubyte_xor15070,351868
short_xor(PyObject *a, PyObject *b)short_xor15177,354353
ushort_xor(PyObject *a, PyObject *b)ushort_xor15284,356838
int_xor(PyObject *a, PyObject *b)int_xor15391,359337
uint_xor(PyObject *a, PyObject *b)uint_xor15498,361794
long_xor(PyObject *a, PyObject *b)long_xor15605,364265
ulong_xor(PyObject *a, PyObject *b)ulong_xor15712,366736
longlong_xor(PyObject *a, PyObject *b)longlong_xor15819,369221
ulonglong_xor(PyObject *a, PyObject *b)ulonglong_xor15926,371748
byte_true_divide(PyObject *a, PyObject *b)byte_true_divide16033,374297
ubyte_true_divide(PyObject *a, PyObject *b)ubyte_true_divide16140,376824
short_true_divide(PyObject *a, PyObject *b)short_true_divide16247,379357
ushort_true_divide(PyObject *a, PyObject *b)ushort_true_divide16354,381890
int_true_divide(PyObject *a, PyObject *b)int_true_divide16461,384429
uint_true_divide(PyObject *a, PyObject *b)uint_true_divide16568,386958
long_true_divide(PyObject *a, PyObject *b)long_true_divide16675,389493
ulong_true_divide(PyObject *a, PyObject *b)ulong_true_divide16782,392028
longlong_true_divide(PyObject *a, PyObject *b)longlong_true_divide16889,394569
ulonglong_true_divide(PyObject *a, PyObject *b)ulonglong_true_divide16996,397128
float_add(PyObject *a, PyObject *b)float_add17103,399685
double_add(PyObject *a, PyObject *b)double_add17210,402170
longdouble_add(PyObject *a, PyObject *b)longdouble_add17317,404669
cfloat_add(PyObject *a, PyObject *b)cfloat_add17424,407224
cdouble_add(PyObject *a, PyObject *b)cdouble_add17531,409723
clongdouble_add(PyObject *a, PyObject *b)clongdouble_add17638,412236
float_subtract(PyObject *a, PyObject *b)float_subtract17745,414810
double_subtract(PyObject *a, PyObject *b)double_subtract17852,417325
longdouble_subtract(PyObject *a, PyObject *b)longdouble_subtract17959,419854
cfloat_subtract(PyObject *a, PyObject *b)cfloat_subtract18066,422439
cdouble_subtract(PyObject *a, PyObject *b)cdouble_subtract18173,424968
clongdouble_subtract(PyObject *a, PyObject *b)clongdouble_subtract18280,427511
float_multiply(PyObject *a, PyObject *b)float_multiply18387,430110
double_multiply(PyObject *a, PyObject *b)double_multiply18494,432625
longdouble_multiply(PyObject *a, PyObject *b)longdouble_multiply18601,435154
cfloat_multiply(PyObject *a, PyObject *b)cfloat_multiply18708,437739
cdouble_multiply(PyObject *a, PyObject *b)cdouble_multiply18815,440268
clongdouble_multiply(PyObject *a, PyObject *b)clongdouble_multiply18922,442811
float_divide(PyObject *a, PyObject *b)float_divide19029,445408
double_divide(PyObject *a, PyObject *b)double_divide19136,447911
longdouble_divide(PyObject *a, PyObject *b)longdouble_divide19243,450428
cfloat_divide(PyObject *a, PyObject *b)cfloat_divide19350,453001
cdouble_divide(PyObject *a, PyObject *b)cdouble_divide19457,455518
clongdouble_divide(PyObject *a, PyObject *b)clongdouble_divide19564,458049
float_floor_divide(PyObject *a, PyObject *b)float_floor_divide19671,460642
double_floor_divide(PyObject *a, PyObject *b)double_floor_divide19778,463181
longdouble_floor_divide(PyObject *a, PyObject *b)longdouble_floor_divide19885,465734
cfloat_floor_divide(PyObject *a, PyObject *b)cfloat_floor_divide19992,468343
cdouble_floor_divide(PyObject *a, PyObject *b)cdouble_floor_divide20099,470896
clongdouble_floor_divide(PyObject *a, PyObject *b)clongdouble_floor_divide20206,473463
float_true_divide(PyObject *a, PyObject *b)float_true_divide20313,476085
double_true_divide(PyObject *a, PyObject *b)double_true_divide20420,478618
longdouble_true_divide(PyObject *a, PyObject *b)longdouble_true_divide20527,481165
cfloat_true_divide(PyObject *a, PyObject *b)cfloat_true_divide20634,483768
cdouble_true_divide(PyObject *a, PyObject *b)cdouble_true_divide20741,486315
clongdouble_true_divide(PyObject *a, PyObject *b)clongdouble_true_divide20848,488876
float_divmod(PyObject *a, PyObject *b)float_divmod20955,491488
double_divmod(PyObject *a, PyObject *b)double_divmod21062,493991
longdouble_divmod(PyObject *a, PyObject *b)longdouble_divmod21169,496508
float_remainder(PyObject *a, PyObject *b)float_remainder21276,499084
double_remainder(PyObject *a, PyObject *b)double_remainder21383,501605
longdouble_remainder(PyObject *a, PyObject *b)longdouble_remainder21490,504140
#undef CODEGEN_SKIP_divide_FLAGCODEGEN_SKIP_divide_FLAG21593,506656
byte_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))byte_power21598,506723
ubyte_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))ubyte_power21708,509363
short_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))short_power21818,512015
ushort_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))ushort_power21928,514667
int_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))int_power22038,517331
uint_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))uint_power22148,519964
long_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))long_power22258,522609
ulong_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))ulong_power22368,525254
longlong_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))longlong_power22478,527911
ulonglong_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))ulonglong_power22588,530604
float_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))float_power22698,533309
double_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))double_power22808,535961
longdouble_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))longdouble_power22918,538630
cfloat_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))cfloat_power23028,541367
cdouble_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))cdouble_power23138,544036
clongdouble_power(PyObject *a, PyObject *b, PyObject *NPY_UNUSED(c))clongdouble_power23248,546722
#define cfloat_divmod cfloat_divmod23358,549459
#define cdouble_divmod cdouble_divmod23361,549500
#define clongdouble_divmod clongdouble_divmod23364,549542
#define cfloat_remainder cfloat_remainder23367,549588
#define cdouble_remainder cdouble_remainder23370,549632
#define clongdouble_remainder clongdouble_remainder23373,549677
#define float_lshift float_lshift23377,549728
#define double_lshift double_lshift23380,549768
#define longdouble_lshift longdouble_lshift23383,549809
#define cfloat_lshift cfloat_lshift23386,549854
#define cdouble_lshift cdouble_lshift23389,549895
#define clongdouble_lshift clongdouble_lshift23392,549937
#define float_rshift float_rshift23395,549983
#define double_rshift double_rshift23398,550023
#define longdouble_rshift longdouble_rshift23401,550064
#define cfloat_rshift cfloat_rshift23404,550109
#define cdouble_rshift cdouble_rshift23407,550150
#define clongdouble_rshift clongdouble_rshift23410,550192
#define float_and float_and23413,550238
#define double_and double_and23416,550275
#define longdouble_and longdouble_and23419,550313
#define cfloat_and cfloat_and23422,550355
#define cdouble_and cdouble_and23425,550393
#define clongdouble_and clongdouble_and23428,550432
#define float_or float_or23431,550475
#define double_or double_or23434,550511
#define longdouble_or longdouble_or23437,550548
#define cfloat_or cfloat_or23440,550589
#define cdouble_or cdouble_or23443,550626
#define clongdouble_or clongdouble_or23446,550664
#define float_xor float_xor23449,550706
#define double_xor double_xor23452,550743
#define longdouble_xor longdouble_xor23455,550781
#define cfloat_xor cfloat_xor23458,550823
#define cdouble_xor cdouble_xor23461,550861
#define clongdouble_xor clongdouble_xor23464,550900
byte_negative(PyObject *a)byte_negative23470,550966
ubyte_negative(PyObject *a)ubyte_negative23506,551763
short_negative(PyObject *a)short_negative23542,552567
ushort_negative(PyObject *a)ushort_negative23578,553371
int_negative(PyObject *a)int_negative23614,554182
uint_negative(PyObject *a)uint_negative23650,554972
long_negative(PyObject *a)long_negative23686,555769
ulong_negative(PyObject *a)ulong_negative23722,556566
longlong_negative(PyObject *a)longlong_negative23758,557370
ulonglong_negative(PyObject *a)ulonglong_negative23794,558195
float_negative(PyObject *a)float_negative23830,559027
double_negative(PyObject *a)double_negative23866,559831
longdouble_negative(PyObject *a)longdouble_negative23902,560642
cfloat_negative(PyObject *a)cfloat_negative23938,561481
cdouble_negative(PyObject *a)cdouble_negative23974,562292
clongdouble_negative(PyObject *a)clongdouble_negative24010,563110
byte_positive(PyObject *a)byte_positive24046,563956
ubyte_positive(PyObject *a)ubyte_positive24082,564753
short_positive(PyObject *a)short_positive24118,565557
ushort_positive(PyObject *a)ushort_positive24154,566361
int_positive(PyObject *a)int_positive24190,567172
uint_positive(PyObject *a)uint_positive24226,567962
long_positive(PyObject *a)long_positive24262,568759
ulong_positive(PyObject *a)ulong_positive24298,569556
longlong_positive(PyObject *a)longlong_positive24334,570360
ulonglong_positive(PyObject *a)ulonglong_positive24370,571185
float_positive(PyObject *a)float_positive24406,572017
double_positive(PyObject *a)double_positive24442,572821
longdouble_positive(PyObject *a)longdouble_positive24478,573632
cfloat_positive(PyObject *a)cfloat_positive24514,574471
cdouble_positive(PyObject *a)cdouble_positive24550,575282
clongdouble_positive(PyObject *a)clongdouble_positive24586,576100
byte_absolute(PyObject *a)byte_absolute24622,576946
ubyte_absolute(PyObject *a)ubyte_absolute24658,577743
short_absolute(PyObject *a)short_absolute24694,578547
ushort_absolute(PyObject *a)ushort_absolute24730,579351
int_absolute(PyObject *a)int_absolute24766,580162
uint_absolute(PyObject *a)uint_absolute24802,580952
long_absolute(PyObject *a)long_absolute24838,581749
ulong_absolute(PyObject *a)ulong_absolute24874,582546
longlong_absolute(PyObject *a)longlong_absolute24910,583350
ulonglong_absolute(PyObject *a)ulonglong_absolute24946,584175
float_absolute(PyObject *a)float_absolute24982,585007
double_absolute(PyObject *a)double_absolute25018,585811
longdouble_absolute(PyObject *a)longdouble_absolute25054,586622
cfloat_absolute(PyObject *a)cfloat_absolute25090,587461
cdouble_absolute(PyObject *a)cdouble_absolute25126,588269
clongdouble_absolute(PyObject *a)clongdouble_absolute25162,589084
byte_invert(PyObject *a)byte_invert25198,589927
ubyte_invert(PyObject *a)ubyte_invert25234,590718
short_invert(PyObject *a)short_invert25270,591516
ushort_invert(PyObject *a)ushort_invert25306,592314
int_invert(PyObject *a)int_invert25342,593119
uint_invert(PyObject *a)uint_invert25378,593903
long_invert(PyObject *a)long_invert25414,594694
ulong_invert(PyObject *a)ulong_invert25450,595485
longlong_invert(PyObject *a)longlong_invert25486,596283
ulonglong_invert(PyObject *a)ulonglong_invert25522,597102
#define float_invert float_invert25558,597911
#define double_invert double_invert25561,597951
#define longdouble_invert longdouble_invert25564,597992
#define cfloat_invert cfloat_invert25567,598037
#define cdouble_invert cdouble_invert25570,598078
#define clongdouble_invert clongdouble_invert25573,598120
#define NONZERO_NAME(NONZERO_NAME25577,598180
#define NONZERO_NAME(NONZERO_NAME25579,598246
NONZERO_NAME(byte_,)(PyObject *a)NONZERO_NAME25584,598341
NONZERO_NAME(ubyte_,)(PyObject *a)NONZERO_NAME25612,598869
NONZERO_NAME(short_,)(PyObject *a)NONZERO_NAME25640,599400
NONZERO_NAME(ushort_,)(PyObject *a)NONZERO_NAME25668,599931
NONZERO_NAME(int_,)(PyObject *a)NONZERO_NAME25696,600465
NONZERO_NAME(uint_,)(PyObject *a)NONZERO_NAME25724,600990
NONZERO_NAME(long_,)(PyObject *a)NONZERO_NAME25752,601518
NONZERO_NAME(ulong_,)(PyObject *a)NONZERO_NAME25780,602046
NONZERO_NAME(longlong_,)(PyObject *a)NONZERO_NAME25808,602577
NONZERO_NAME(ulonglong_,)(PyObject *a)NONZERO_NAME25836,603117
NONZERO_NAME(float_,)(PyObject *a)NONZERO_NAME25864,603660
NONZERO_NAME(double_,)(PyObject *a)NONZERO_NAME25892,604191
NONZERO_NAME(longdouble_,)(PyObject *a)NONZERO_NAME25920,604725
NONZERO_NAME(cfloat_,)(PyObject *a)NONZERO_NAME25948,605271
NONZERO_NAME(cdouble_,)(PyObject *a)NONZERO_NAME25976,605805
NONZERO_NAME(clongdouble_,)(PyObject *a)NONZERO_NAME26004,606342
byte_int(PyObject *obj)byte_int26033,606900
ubyte_int(PyObject *obj)ubyte_int26058,607394
short_int(PyObject *obj)short_int26083,607900
ushort_int(PyObject *obj)ushort_int26108,608396
int_int(PyObject *obj)int_int26133,608904
uint_int(PyObject *obj)uint_int26158,609396
long_int(PyObject *obj)long_int26183,609900
ulong_int(PyObject *obj)ulong_int26208,610394
longlong_int(PyObject *obj)longlong_int26233,610900
ulonglong_int(PyObject *obj)ulonglong_int26258,611438
float_int(PyObject *obj)float_int26283,611988
double_int(PyObject *obj)double_int26308,612488
longdouble_int(PyObject *obj)longdouble_int26333,612990
cfloat_int(PyObject *obj)cfloat_int26358,613500
cdouble_int(PyObject *obj)cdouble_int26383,614007
clongdouble_int(PyObject *obj)clongdouble_int26408,614516
byte_long(PyObject *obj)byte_long26434,615036
ubyte_long(PyObject *obj)ubyte_long26441,615166
short_long(PyObject *obj)short_long26448,615306
ushort_long(PyObject *obj)ushort_long26455,615438
int_long(PyObject *obj)int_long26462,615580
uint_long(PyObject *obj)uint_long26469,615708
long_long(PyObject *obj)long_long26476,615846
ulong_long(PyObject *obj)ulong_long26483,615976
longlong_long(PyObject *obj)longlong_long26490,616116
ulonglong_long(PyObject *obj)ulonglong_long26497,616254
float_long(PyObject *obj)float_long26504,616402
double_long(PyObject *obj)double_long26511,616532
longdouble_long(PyObject *obj)longdouble_long26518,616664
cfloat_long(PyObject *obj)cfloat_long26525,616804
cdouble_long(PyObject *obj)cdouble_long26532,616941
clongdouble_long(PyObject *obj)clongdouble_long26539,617080
byte_float(PyObject *obj)byte_float26546,617227
ubyte_float(PyObject *obj)ubyte_float26553,617357
short_float(PyObject *obj)short_float26560,617489
ushort_float(PyObject *obj)ushort_float26567,617621
int_float(PyObject *obj)int_float26574,617755
uint_float(PyObject *obj)uint_float26581,617883
long_float(PyObject *obj)long_float26588,618013
ulong_float(PyObject *obj)ulong_float26595,618143
longlong_float(PyObject *obj)longlong_float26602,618275
ulonglong_float(PyObject *obj)ulonglong_float26609,618413
float_float(PyObject *obj)float_float26616,618553
double_float(PyObject *obj)double_float26623,618685
longdouble_float(PyObject *obj)longdouble_float26630,618819
cfloat_float(PyObject *obj)cfloat_float26637,618961
cdouble_float(PyObject *obj)cdouble_float26644,619100
clongdouble_float(PyObject *obj)clongdouble_float26651,619241
byte_oct(PyObject *obj)byte_oct26661,619418
ubyte_oct(PyObject *obj)ubyte_oct26671,619621
short_oct(PyObject *obj)short_oct26681,619826
ushort_oct(PyObject *obj)ushort_oct26691,620031
int_oct(PyObject *obj)int_oct26701,620238
uint_oct(PyObject *obj)uint_oct26711,620439
long_oct(PyObject *obj)long_oct26721,620644
ulong_oct(PyObject *obj)ulong_oct26731,620849
longlong_oct(PyObject *obj)longlong_oct26741,621056
ulonglong_oct(PyObject *obj)ulonglong_oct26751,621269
float_oct(PyObject *obj)float_oct26761,621484
double_oct(PyObject *obj)double_oct26771,621689
longdouble_oct(PyObject *obj)longdouble_oct26781,621898
cfloat_oct(PyObject *obj)cfloat_oct26791,622115
cdouble_oct(PyObject *obj)cdouble_oct26801,622322
clongdouble_oct(PyObject *obj)clongdouble_oct26811,622533
byte_hex(PyObject *obj)byte_hex26821,622752
ubyte_hex(PyObject *obj)ubyte_hex26831,622955
short_hex(PyObject *obj)short_hex26841,623160
ushort_hex(PyObject *obj)ushort_hex26851,623365
int_hex(PyObject *obj)int_hex26861,623572
uint_hex(PyObject *obj)uint_hex26871,623773
long_hex(PyObject *obj)long_hex26881,623978
ulong_hex(PyObject *obj)ulong_hex26891,624183
longlong_hex(PyObject *obj)longlong_hex26901,624390
ulonglong_hex(PyObject *obj)ulonglong_hex26911,624603
float_hex(PyObject *obj)float_hex26921,624818
double_hex(PyObject *obj)double_hex26931,625023
longdouble_hex(PyObject *obj)longdouble_hex26941,625232
cfloat_hex(PyObject *obj)cfloat_hex26951,625449
cdouble_hex(PyObject *obj)cdouble_hex26961,625656
clongdouble_hex(PyObject *obj)clongdouble_hex26971,625867
#define def_cmp_le(def_cmp_le26983,626079
#define cmplx_cmp_le(cmplx_cmp_le26984,626126
#define def_cmp_ge(def_cmp_ge26989,626347
#define cmplx_cmp_ge(cmplx_cmp_ge26990,626394
#define def_cmp_lt(def_cmp_lt26995,626615
#define cmplx_cmp_lt(cmplx_cmp_lt26996,626661
#define def_cmp_gt(def_cmp_gt27001,626880
#define cmplx_cmp_gt(cmplx_cmp_gt27002,626926
#define def_cmp_eq(def_cmp_eq27007,627145
#define cmplx_cmp_eq(cmplx_cmp_eq27008,627192
#define def_cmp_ne(def_cmp_ne27013,627413
#define cmplx_cmp_ne(cmplx_cmp_ne27014,627460
byte_richcompare(PyObject *self, PyObject *other, int cmp_op)byte_richcompare27021,627701
ubyte_richcompare(PyObject *self, PyObject *other, int cmp_op)ubyte_richcompare27071,629017
short_richcompare(PyObject *self, PyObject *other, int cmp_op)short_richcompare27121,630336
ushort_richcompare(PyObject *self, PyObject *other, int cmp_op)ushort_richcompare27171,631655
int_richcompare(PyObject *self, PyObject *other, int cmp_op)int_richcompare27221,632977
uint_richcompare(PyObject *self, PyObject *other, int cmp_op)uint_richcompare27271,634290
long_richcompare(PyObject *self, PyObject *other, int cmp_op)long_richcompare27321,635606
ulong_richcompare(PyObject *self, PyObject *other, int cmp_op)ulong_richcompare27371,636922
longlong_richcompare(PyObject *self, PyObject *other, int cmp_op)longlong_richcompare27421,638241
ulonglong_richcompare(PyObject *self, PyObject *other, int cmp_op)ulonglong_richcompare27471,639569
float_richcompare(PyObject *self, PyObject *other, int cmp_op)float_richcompare27521,640900
double_richcompare(PyObject *self, PyObject *other, int cmp_op)double_richcompare27571,642219
longdouble_richcompare(PyObject *self, PyObject *other, int cmp_op)longdouble_richcompare27621,643541
cfloat_richcompare(PyObject *self, PyObject *other, int cmp_op)cfloat_richcompare27671,644875
cdouble_richcompare(PyObject *self, PyObject *other, int cmp_op)cdouble_richcompare27721,646209
clongdouble_richcompare(PyObject *self, PyObject *other, int cmp_op)clongdouble_richcompare27771,647546
static PyNumberMethods byte_as_number = {byte_as_number27822,648881
static PyNumberMethods ubyte_as_number = {ubyte_as_number27887,651610
static PyNumberMethods short_as_number = {short_as_number27952,654365
static PyNumberMethods ushort_as_number = {ushort_as_number28017,657120
static PyNumberMethods int_as_number = {int_as_number28082,659901
static PyNumberMethods uint_as_number = {uint_as_number28147,662604
static PyNumberMethods long_as_number = {long_as_number28212,665333
static PyNumberMethods ulong_as_number = {ulong_as_number28277,668062
static PyNumberMethods longlong_as_number = {longlong_as_number28342,670817
static PyNumberMethods ulonglong_as_number = {ulonglong_as_number28407,673650
static PyNumberMethods float_as_number = {float_as_number28472,676509
static PyNumberMethods double_as_number = {double_as_number28537,679264
static PyNumberMethods longdouble_as_number = {longdouble_as_number28602,682045
static PyNumberMethods cfloat_as_number = {cfloat_as_number28667,684930
static PyNumberMethods cdouble_as_number = {cdouble_as_number28732,687711
static PyNumberMethods clongdouble_as_number = {clongdouble_as_number28797,690518
static void *saved_tables_arrtype[9];saved_tables_arrtype28862,693419
add_scalarmath(void)add_scalarmath28865,693473
get_functions(void)get_functions28998,698428
static void *saved_tables[9];saved_tables29073,700635
char doc_alterpyscalars[] = "";doc_alterpyscalars29075,700668
char doc_restorepyscalars[] = "";doc_restorepyscalars29118,702157
char doc_usepythonmath[] = "";doc_usepythonmath29159,703458
char doc_usescalarmath[] = "";doc_usescalarmath29200,704822
static struct PyMethodDef methods[] = {methods29241,706258
static struct PyModuleDef moduledef = {moduledef29254,706745
#define RETVAL RETVAL29268,706983
PyObject *PyInit_scalarmath(void)PyInit_scalarmath29269,707001

build/src.win32-2.6/numpy/core/src/umath/loops.c,71334
#define _UMATHMODULE_UMATHMODULE13,409
#define PY_ARRAY_UNIQUE_SYMBOL PY_ARRAY_UNIQUE_SYMBOL19,518
#define NO_IMPORT_ARRAYNO_IMPORT_ARRAY20,577
#define IS_BINARY_REDUCE IS_BINARY_REDUCE37,1013
#define OUTPUT_LOOP\OUTPUT_LOOP41,1129
#define UNARY_LOOP\UNARY_LOOP48,1291
#define UNARY_LOOP_TWO_OUT\UNARY_LOOP_TWO_OUT55,1496
#define BINARY_LOOP\BINARY_LOOP62,1753
#define BINARY_REDUCE_LOOP(BINARY_REDUCE_LOOP69,2003
#define BINARY_LOOP_TWO_OUT\BINARY_LOOP_TWO_OUT77,2232
typedef float floatUnaryFunc(float x);floatUnaryFunc89,2781
typedef double doubleUnaryFunc(double x);doubleUnaryFunc90,2821
typedef longdouble longdoubleUnaryFunc(longdouble x);longdoubleUnaryFunc91,2864
typedef float floatBinaryFunc(float x, float y);floatBinaryFunc92,2919
typedef double doubleBinaryFunc(double x, double y);doubleBinaryFunc93,2969
typedef longdouble longdoubleBinaryFunc(longdouble x, longdouble y);longdoubleBinaryFunc94,3023
PyUFunc_f_f(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_f_f99,3132
PyUFunc_f_f_As_d_d(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_f_f_As_d_d110,3393
PyUFunc_ff_f(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_ff_f121,3678
PyUFunc_ff_f_As_dd_d(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_ff_f_As_dd_d133,3978
PyUFunc_d_d(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_d_d145,4312
PyUFunc_dd_d(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_dd_d156,4572
PyUFunc_g_g(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_g_g168,4879
PyUFunc_gg_g(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_gg_g179,5159
typedef void cdoubleUnaryFunc(cdouble *x, cdouble *r);cdoubleUnaryFunc196,5710
typedef void cfloatUnaryFunc(cfloat *x, cfloat *r);cfloatUnaryFunc197,5766
typedef void clongdoubleUnaryFunc(clongdouble *x, clongdouble *r);clongdoubleUnaryFunc198,5819
typedef void cdoubleBinaryFunc(cdouble *x, cdouble *y, cdouble *r);cdoubleBinaryFunc199,5887
typedef void cfloatBinaryFunc(cfloat *x, cfloat *y, cfloat *r);cfloatBinaryFunc200,5956
typedef void clongdoubleBinaryFunc(clongdouble *x, clongdouble *y,clongdoubleBinaryFunc201,6021
PyUFunc_F_F(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_F_F206,6179
PyUFunc_F_F_As_D_D(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_F_F_As_D_D218,6466
PyUFunc_FF_F(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_FF_F233,6900
PyUFunc_FF_F_As_DD_D(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_FF_F_As_DD_D246,7235
PyUFunc_D_D(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_D_D263,7787
PyUFunc_DD_D(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_DD_D275,8080
PyUFunc_G_G(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_G_G288,8423
PyUFunc_GG_G(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_GG_G300,8740
PyUFunc_O_O(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_O_O318,9362
PyUFunc_O_O_method(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_O_O_method335,9786
PyUFunc_OO_O(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_OO_O352,10221
PyUFunc_OO_O_method(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_OO_O_method370,10681
PyUFunc_On_Om(char **args, intp *dimensions, intp *steps, void *func)PyUFunc_On_Om393,11327
BOOL_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_equal462,13272
BOOL_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_not_equal474,13538
BOOL_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_greater486,13808
BOOL_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_greater_equal498,14075
BOOL_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_less510,14349
BOOL_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_less_equal522,14613
BOOL_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_logical_and536,14888
BOOL_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_logical_or560,15455
BOOL_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_logical_xor584,16012
BOOL_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_maximum595,16302
BOOL_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_minimum606,16582
BOOL_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_absolute618,16864
BOOL_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BOOL_logical_not628,17081
BOOL_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))BOOL_ones_like638,17292
#define BYTE_floor_divide BYTE_floor_divide656,17683
#define BYTE_fmax BYTE_fmax657,17722
#define BYTE_fmin BYTE_fmin658,17754
BYTE_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))BYTE_ones_like661,17808
BYTE_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))BYTE_square669,17975
BYTE_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))BYTE_reciprocal678,18184
BYTE_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_conjugate687,18405
BYTE_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_negative696,18613
BYTE_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_logical_not705,18835
BYTE_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_invert714,19046
BYTE_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_add724,19263
BYTE_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_subtract743,19710
BYTE_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_multiply762,20162
BYTE_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_bitwise_and781,20614
BYTE_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_bitwise_or800,21069
BYTE_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_bitwise_xor819,21523
BYTE_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_left_shift838,21978
BYTE_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_right_shift857,22434
BYTE_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_equal877,22893
BYTE_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_not_equal888,23156
BYTE_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_greater899,23423
BYTE_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_greater_equal910,23687
BYTE_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_less921,23958
BYTE_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_less_equal932,24219
BYTE_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_logical_and943,24487
BYTE_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_logical_or954,24756
BYTE_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_logical_xor965,25015
BYTE_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_maximum976,25303
BYTE_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_minimum987,25581
BYTE_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_true_divide998,25850
BYTE_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_power1008,26131
BYTE_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_fmod1018,26409
#define UBYTE_floor_divide UBYTE_floor_divide1037,26796
#define UBYTE_fmax UBYTE_fmax1038,26837
#define UBYTE_fmin UBYTE_fmin1039,26871
UBYTE_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))UBYTE_ones_like1042,26927
UBYTE_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))UBYTE_square1050,27096
UBYTE_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))UBYTE_reciprocal1059,27309
UBYTE_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_conjugate1068,27535
UBYTE_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_negative1077,27747
UBYTE_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_logical_not1086,27974
UBYTE_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_invert1095,28188
UBYTE_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_add1105,28409
UBYTE_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_subtract1124,28865
UBYTE_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_multiply1143,29326
UBYTE_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_bitwise_and1162,29787
UBYTE_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_bitwise_or1181,30251
UBYTE_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_bitwise_xor1200,30714
UBYTE_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_left_shift1219,31178
UBYTE_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_right_shift1238,31643
UBYTE_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_equal1258,32111
UBYTE_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_not_equal1269,32379
UBYTE_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_greater1280,32651
UBYTE_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_greater_equal1291,32920
UBYTE_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_less1302,33196
UBYTE_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_less_equal1313,33462
UBYTE_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_logical_and1324,33735
UBYTE_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_logical_or1335,34009
UBYTE_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_logical_xor1346,34273
UBYTE_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_maximum1357,34566
UBYTE_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_minimum1368,34850
UBYTE_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_true_divide1379,35125
UBYTE_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_power1389,35409
UBYTE_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_fmod1399,35692
UBYTE_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_absolute1418,36095
BYTE_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_absolute1427,36306
UBYTE_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_sign1436,36533
BYTE_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_sign1445,36752
BYTE_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_divide1454,36984
UBYTE_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_divide1480,37933
BYTE_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))BYTE_remainder1496,38330
UBYTE_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UBYTE_remainder1519,38972
#define SHORT_floor_divide SHORT_floor_divide1539,39381
#define SHORT_fmax SHORT_fmax1540,39422
#define SHORT_fmin SHORT_fmin1541,39456
SHORT_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))SHORT_ones_like1544,39512
SHORT_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))SHORT_square1552,39681
SHORT_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))SHORT_reciprocal1561,39894
SHORT_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_conjugate1570,40120
SHORT_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_negative1579,40332
SHORT_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_logical_not1588,40560
SHORT_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_invert1597,40774
SHORT_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_add1607,40995
SHORT_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_subtract1626,41451
SHORT_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_multiply1645,41912
SHORT_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_bitwise_and1664,42373
SHORT_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_bitwise_or1683,42837
SHORT_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_bitwise_xor1702,43300
SHORT_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_left_shift1721,43764
SHORT_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_right_shift1740,44229
SHORT_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_equal1760,44697
SHORT_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_not_equal1771,44965
SHORT_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_greater1782,45237
SHORT_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_greater_equal1793,45506
SHORT_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_less1804,45782
SHORT_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_less_equal1815,46048
SHORT_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_logical_and1826,46321
SHORT_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_logical_or1837,46595
SHORT_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_logical_xor1848,46859
SHORT_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_maximum1859,47152
SHORT_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_minimum1870,47436
SHORT_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_true_divide1881,47711
SHORT_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_power1891,47995
SHORT_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_fmod1901,48278
#define USHORT_floor_divide USHORT_floor_divide1920,48672
#define USHORT_fmax USHORT_fmax1921,48715
#define USHORT_fmin USHORT_fmin1922,48751
USHORT_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))USHORT_ones_like1925,48809
USHORT_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))USHORT_square1933,48980
USHORT_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))USHORT_reciprocal1942,49197
USHORT_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_conjugate1951,49428
USHORT_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_negative1960,49644
USHORT_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_logical_not1969,49877
USHORT_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_invert1978,50094
USHORT_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_add1988,50319
USHORT_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_subtract2007,50784
USHORT_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_multiply2026,51254
USHORT_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_bitwise_and2045,51724
USHORT_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_bitwise_or2064,52197
USHORT_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_bitwise_xor2083,52669
USHORT_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_left_shift2102,53142
USHORT_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_right_shift2121,53616
USHORT_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_equal2141,54093
USHORT_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_not_equal2152,54366
USHORT_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_greater2163,54643
USHORT_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_greater_equal2174,54917
USHORT_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_less2185,55198
USHORT_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_less_equal2196,55469
USHORT_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_logical_and2207,55747
USHORT_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_logical_or2218,56026
USHORT_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_logical_xor2229,56295
USHORT_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_maximum2240,56593
USHORT_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_minimum2251,56883
USHORT_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_true_divide2262,57164
USHORT_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_power2272,57451
USHORT_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_fmod2282,57739
USHORT_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_absolute2301,58149
SHORT_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_absolute2310,58364
USHORT_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_sign2319,58595
SHORT_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_sign2328,58818
SHORT_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_divide2337,59054
USHORT_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_divide2363,60012
SHORT_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))SHORT_remainder2379,60416
USHORT_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))USHORT_remainder2402,61067
#define INT_floor_divide INT_floor_divide2422,61483
#define INT_fmax INT_fmax2423,61520
#define INT_fmin INT_fmin2424,61550
INT_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))INT_ones_like2427,61602
INT_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))INT_square2435,61767
INT_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))INT_reciprocal2444,61972
INT_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_conjugate2453,62188
INT_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_negative2462,62392
INT_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_logical_not2471,62608
INT_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_invert2480,62816
INT_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_add2490,63029
INT_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_subtract2509,63467
INT_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_multiply2528,63910
INT_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_bitwise_and2547,64353
INT_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_bitwise_or2566,64799
INT_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_bitwise_xor2585,65244
INT_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_left_shift2604,65690
INT_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_right_shift2623,66137
INT_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_equal2643,66587
INT_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_not_equal2654,66845
INT_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_greater2665,67107
INT_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_greater_equal2676,67366
INT_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_less2687,67632
INT_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_less_equal2698,67888
INT_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_logical_and2709,68151
INT_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_logical_or2720,68415
INT_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_logical_xor2731,68669
INT_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_maximum2742,68952
INT_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_minimum2753,69224
INT_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_true_divide2764,69487
INT_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_power2774,69765
INT_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_fmod2784,70042
#define UINT_floor_divide UINT_floor_divide2803,70422
#define UINT_fmax UINT_fmax2804,70461
#define UINT_fmin UINT_fmin2805,70493
UINT_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))UINT_ones_like2808,70547
UINT_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))UINT_square2816,70714
UINT_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))UINT_reciprocal2825,70923
UINT_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_conjugate2834,71144
UINT_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_negative2843,71352
UINT_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_logical_not2852,71573
UINT_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_invert2861,71784
UINT_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_add2871,72001
UINT_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_subtract2890,72448
UINT_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_multiply2909,72900
UINT_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_bitwise_and2928,73352
UINT_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_bitwise_or2947,73807
UINT_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_bitwise_xor2966,74261
UINT_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_left_shift2985,74716
UINT_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_right_shift3004,75172
UINT_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_equal3024,75631
UINT_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_not_equal3035,75894
UINT_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_greater3046,76161
UINT_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_greater_equal3057,76425
UINT_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_less3068,76696
UINT_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_less_equal3079,76957
UINT_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_logical_and3090,77225
UINT_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_logical_or3101,77494
UINT_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_logical_xor3112,77753
UINT_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_maximum3123,78041
UINT_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_minimum3134,78319
UINT_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_true_divide3145,78588
UINT_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_power3155,78869
UINT_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_fmod3165,79151
UINT_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_absolute3184,79547
INT_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_absolute3193,79754
UINT_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_sign3202,79977
INT_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_sign3211,80192
INT_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_divide3220,80420
UINT_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_divide3246,81360
INT_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))INT_remainder3262,81750
UINT_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))UINT_remainder3285,82383
#define LONG_floor_divide LONG_floor_divide3305,82785
#define LONG_fmax LONG_fmax3306,82824
#define LONG_fmin LONG_fmin3307,82856
LONG_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONG_ones_like3310,82910
LONG_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONG_square3318,83077
LONG_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONG_reciprocal3327,83286
LONG_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_conjugate3336,83507
LONG_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_negative3345,83715
LONG_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_logical_not3354,83937
LONG_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_invert3363,84148
LONG_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_add3373,84365
LONG_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_subtract3392,84812
LONG_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_multiply3411,85264
LONG_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_bitwise_and3430,85716
LONG_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_bitwise_or3449,86171
LONG_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_bitwise_xor3468,86625
LONG_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_left_shift3487,87080
LONG_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_right_shift3506,87536
LONG_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_equal3526,87995
LONG_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_not_equal3537,88258
LONG_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_greater3548,88525
LONG_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_greater_equal3559,88789
LONG_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_less3570,89060
LONG_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_less_equal3581,89321
LONG_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_logical_and3592,89589
LONG_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_logical_or3603,89858
LONG_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_logical_xor3614,90117
LONG_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_maximum3625,90405
LONG_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_minimum3636,90683
LONG_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_true_divide3647,90952
LONG_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_power3657,91233
LONG_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_fmod3667,91515
#define ULONG_floor_divide ULONG_floor_divide3686,91902
#define ULONG_fmax ULONG_fmax3687,91943
#define ULONG_fmin ULONG_fmin3688,91977
ULONG_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))ULONG_ones_like3691,92033
ULONG_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))ULONG_square3699,92202
ULONG_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))ULONG_reciprocal3708,92415
ULONG_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_conjugate3717,92641
ULONG_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_negative3726,92853
ULONG_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_logical_not3735,93080
ULONG_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_invert3744,93294
ULONG_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_add3754,93515
ULONG_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_subtract3773,93971
ULONG_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_multiply3792,94432
ULONG_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_bitwise_and3811,94893
ULONG_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_bitwise_or3830,95357
ULONG_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_bitwise_xor3849,95820
ULONG_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_left_shift3868,96284
ULONG_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_right_shift3887,96749
ULONG_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_equal3907,97217
ULONG_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_not_equal3918,97485
ULONG_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_greater3929,97757
ULONG_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_greater_equal3940,98026
ULONG_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_less3951,98302
ULONG_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_less_equal3962,98568
ULONG_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_logical_and3973,98841
ULONG_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_logical_or3984,99115
ULONG_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_logical_xor3995,99379
ULONG_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_maximum4006,99672
ULONG_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_minimum4017,99956
ULONG_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_true_divide4028,100231
ULONG_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_power4038,100515
ULONG_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_fmod4048,100802
ULONG_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_absolute4067,101205
LONG_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_absolute4076,101416
ULONG_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_sign4085,101643
LONG_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_sign4094,101862
LONG_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_divide4103,102094
ULONG_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_divide4129,103043
LONG_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_remainder4145,103440
ULONG_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONG_remainder4168,104082
#define LONGLONG_floor_divide LONGLONG_floor_divide4188,104491
#define LONGLONG_fmax LONGLONG_fmax4189,104538
#define LONGLONG_fmin LONGLONG_fmin4190,104578
LONGLONG_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONGLONG_ones_like4193,104640
LONGLONG_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONGLONG_square4201,104815
LONGLONG_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONGLONG_reciprocal4210,105040
LONGLONG_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_conjugate4219,105281
LONGLONG_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_negative4228,105505
LONGLONG_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_logical_not4237,105751
LONGLONG_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_invert4246,105974
LONGLONG_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_add4256,106207
LONGLONG_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_subtract4275,106690
LONGLONG_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_multiply4294,107178
LONGLONG_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_bitwise_and4313,107666
LONGLONG_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_bitwise_or4332,108157
LONGLONG_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_bitwise_xor4351,108647
LONGLONG_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_left_shift4370,109138
LONGLONG_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_right_shift4389,109630
LONGLONG_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_equal4409,110125
LONGLONG_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_not_equal4420,110408
LONGLONG_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_greater4431,110695
LONGLONG_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_greater_equal4442,110979
LONGLONG_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_less4453,111270
LONGLONG_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_less_equal4464,111551
LONGLONG_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_logical_and4475,111839
LONGLONG_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_logical_or4486,112128
LONGLONG_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_logical_xor4497,112407
LONGLONG_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_maximum4508,112715
LONGLONG_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_minimum4519,113017
LONGLONG_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_true_divide4530,113310
LONGLONG_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_power4540,113603
LONGLONG_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_fmod4550,113905
#define ULONGLONG_floor_divide ULONGLONG_floor_divide4569,114320
#define ULONGLONG_fmax ULONGLONG_fmax4570,114369
#define ULONGLONG_fmin ULONGLONG_fmin4571,114411
ULONGLONG_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))ULONGLONG_ones_like4574,114475
ULONGLONG_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))ULONGLONG_square4582,114652
ULONGLONG_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))ULONGLONG_reciprocal4591,114881
ULONGLONG_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_conjugate4600,115127
ULONGLONG_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_negative4609,115355
ULONGLONG_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_logical_not4618,115606
ULONGLONG_invert(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_invert4627,115832
ULONGLONG_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_add4637,116069
ULONGLONG_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_subtract4656,116561
ULONGLONG_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_multiply4675,117058
ULONGLONG_bitwise_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_bitwise_and4694,117555
ULONGLONG_bitwise_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_bitwise_or4713,118055
ULONGLONG_bitwise_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_bitwise_xor4732,118554
ULONGLONG_left_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_left_shift4751,119054
ULONGLONG_right_shift(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_right_shift4770,119555
ULONGLONG_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_equal4790,120059
ULONGLONG_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_not_equal4801,120347
ULONGLONG_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_greater4812,120639
ULONGLONG_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_greater_equal4823,120928
ULONGLONG_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_less4834,121224
ULONGLONG_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_less_equal4845,121510
ULONGLONG_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_logical_and4856,121803
ULONGLONG_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_logical_or4867,122097
ULONGLONG_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_logical_xor4878,122381
ULONGLONG_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_maximum4889,122694
ULONGLONG_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_minimum4900,123002
ULONGLONG_true_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_true_divide4911,123301
ULONGLONG_power(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_power4921,123597
ULONGLONG_fmod(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_fmod4931,123904
ULONGLONG_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_absolute4950,124335
LONGLONG_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_absolute4959,124562
ULONGLONG_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_sign4968,124805
LONGLONG_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_sign4977,125040
LONGLONG_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_divide4986,125288
ULONGLONG_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_divide5012,126273
LONGLONG_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGLONG_remainder5028,126698
ULONGLONG_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))ULONGLONG_remainder5051,127376
DATETIME_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))DATETIME_ones_like5077,128073
DATETIME_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_negative5085,128248
DATETIME_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_logical_not5094,128494
DATETIME_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_equal5105,128730
DATETIME_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_not_equal5116,129013
DATETIME_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_greater5127,129300
DATETIME_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_greater_equal5138,129584
DATETIME_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_less5149,129875
DATETIME_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_less_equal5160,130156
DATETIME_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_logical_and5171,130444
DATETIME_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_logical_or5182,130733
DATETIME_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_logical_xor5193,131012
DATETIME_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_maximum5204,131320
DATETIME_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_minimum5215,131622
DATETIME_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_absolute5226,131915
DATETIME_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_sign5235,132158
TIMEDELTA_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))TIMEDELTA_ones_like5247,132421
TIMEDELTA_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_negative5255,132598
TIMEDELTA_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_logical_not5264,132850
TIMEDELTA_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_equal5275,133089
TIMEDELTA_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_not_equal5286,133377
TIMEDELTA_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_greater5297,133669
TIMEDELTA_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_greater_equal5308,133958
TIMEDELTA_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_less5319,134254
TIMEDELTA_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_less_equal5330,134540
TIMEDELTA_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_logical_and5341,134833
TIMEDELTA_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_logical_or5352,135127
TIMEDELTA_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_logical_xor5363,135411
TIMEDELTA_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_maximum5374,135724
TIMEDELTA_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_minimum5385,136032
TIMEDELTA_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_absolute5396,136331
TIMEDELTA_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_sign5405,136578
DATETIME_Mm_M_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))DATETIME_Mm_M_add5419,136970
DATETIME_mM_M_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_mM_M_add5429,137250
TIMEDELTA_mm_m_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_mm_m_add5439,137530
DATETIME_Mm_M_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_Mm_M_subtract5449,137814
DATETIME_MM_m_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DATETIME_MM_m_subtract5459,138099
TIMEDELTA_mm_m_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))TIMEDELTA_mm_m_subtract5469,138383
FLOAT_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_add5491,138955
FLOAT_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_subtract5510,139412
FLOAT_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_multiply5529,139874
FLOAT_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_divide5548,140336
FLOAT_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_equal5570,140819
FLOAT_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_not_equal5581,141088
FLOAT_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_less5592,141361
FLOAT_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_less_equal5603,141628
FLOAT_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_greater5614,141902
FLOAT_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_greater_equal5625,142172
FLOAT_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_logical_and5636,142449
FLOAT_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_logical_or5647,142724
FLOAT_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_logical_xor5658,142988
FLOAT_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_logical_not5668,143270
FLOAT_isnan(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_isnan5678,143496
FLOAT_isinf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_isinf5688,143731
FLOAT_isfinite(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_isfinite5698,143966
FLOAT_signbit(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_signbit5708,144207
FLOAT_spacing(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_spacing5718,144436
FLOAT_copysign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_copysign5727,144660
FLOAT_nextafter(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_nextafter5737,144933
FLOAT_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_maximum5748,145220
FLOAT_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_minimum5760,145536
FLOAT_fmax(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_fmax5773,145854
FLOAT_fmin(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_fmin5785,146167
FLOAT_floor_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_floor_divide5797,146470
FLOAT_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_remainder5807,146744
FLOAT_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))FLOAT_square5823,147178
FLOAT_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))FLOAT_reciprocal5832,147391
FLOAT_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))FLOAT_ones_like5841,147606
FLOAT_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_conjugate5849,147775
FLOAT_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_absolute5858,147987
FLOAT_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_negative5869,148286
FLOAT_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_sign5878,148498
FLOAT_modf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_modf5888,148783
FLOAT_frexp(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_frexp5898,149043
FLOAT_ldexp(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_ldexp5909,149307
#define FLOAT_true_divide FLOAT_true_divide5919,149555
DOUBLE_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_add5927,149647
DOUBLE_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_subtract5946,150113
DOUBLE_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_multiply5965,150584
DOUBLE_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_divide5984,151055
DOUBLE_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_equal6006,151547
DOUBLE_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_not_equal6017,151821
DOUBLE_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_less6028,152099
DOUBLE_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_less_equal6039,152371
DOUBLE_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_greater6050,152650
DOUBLE_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_greater_equal6061,152925
DOUBLE_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_logical_and6072,153207
DOUBLE_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_logical_or6083,153487
DOUBLE_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_logical_xor6094,153756
DOUBLE_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_logical_not6104,154043
DOUBLE_isnan(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_isnan6114,154272
DOUBLE_isinf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_isinf6124,154510
DOUBLE_isfinite(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_isfinite6134,154748
DOUBLE_signbit(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_signbit6144,154992
DOUBLE_spacing(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_spacing6154,155224
DOUBLE_copysign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_copysign6163,155451
DOUBLE_nextafter(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_nextafter6173,155729
DOUBLE_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_maximum6184,156021
DOUBLE_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_minimum6196,156343
DOUBLE_fmax(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_fmax6209,156667
DOUBLE_fmin(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_fmin6221,156986
DOUBLE_floor_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_floor_divide6233,157295
DOUBLE_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_remainder6243,157574
DOUBLE_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))DOUBLE_square6259,158015
DOUBLE_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))DOUBLE_reciprocal6268,158232
DOUBLE_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))DOUBLE_ones_like6277,158451
DOUBLE_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_conjugate6285,158622
DOUBLE_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_absolute6294,158838
DOUBLE_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_negative6305,159142
DOUBLE_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_sign6314,159358
DOUBLE_modf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_modf6324,159647
DOUBLE_frexp(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_frexp6334,159910
DOUBLE_ldexp(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_ldexp6345,160176
#define DOUBLE_true_divide DOUBLE_true_divide6355,160427
LONGDOUBLE_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_add6363,160521
LONGDOUBLE_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_subtract6382,161023
LONGDOUBLE_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_multiply6401,161530
LONGDOUBLE_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_divide6420,162037
LONGDOUBLE_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_equal6442,162565
LONGDOUBLE_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_not_equal6453,162859
LONGDOUBLE_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_less6464,163157
LONGDOUBLE_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_less_equal6475,163449
LONGDOUBLE_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_greater6486,163748
LONGDOUBLE_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_greater_equal6497,164043
LONGDOUBLE_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_logical_and6508,164345
LONGDOUBLE_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_logical_or6519,164645
LONGDOUBLE_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_logical_xor6530,164934
LONGDOUBLE_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_logical_not6540,165241
LONGDOUBLE_isnan(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_isnan6550,165482
LONGDOUBLE_isinf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_isinf6560,165732
LONGDOUBLE_isfinite(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_isfinite6570,165982
LONGDOUBLE_signbit(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_signbit6580,166238
LONGDOUBLE_spacing(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_spacing6590,166482
LONGDOUBLE_copysign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_copysign6599,166726
LONGDOUBLE_nextafter(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_nextafter6609,167029
LONGDOUBLE_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_maximum6620,167346
LONGDOUBLE_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_minimum6632,167692
LONGDOUBLE_fmax(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_fmax6645,168040
LONGDOUBLE_fmin(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_fmin6657,168383
LONGDOUBLE_floor_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_floor_divide6669,168716
LONGDOUBLE_remainder(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_remainder6679,169020
LONGDOUBLE_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONGDOUBLE_square6695,169494
LONGDOUBLE_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONGDOUBLE_reciprocal6704,169727
LONGDOUBLE_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))LONGDOUBLE_ones_like6713,169962
LONGDOUBLE_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_conjugate6721,170141
LONGDOUBLE_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_absolute6730,170373
LONGDOUBLE_negative(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_negative6741,170697
LONGDOUBLE_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_sign6750,170929
LONGDOUBLE_modf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_modf6760,171234
LONGDOUBLE_frexp(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_frexp6770,171519
LONGDOUBLE_ldexp(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONGDOUBLE_ldexp6781,171803
#define LONGDOUBLE_true_divide LONGDOUBLE_true_divide6791,172071
#define CGE(CGE6802,172380
#define CLE(CLE6803,172442
#define CGT(CGT6804,172504
#define CLT(CLT6805,172565
#define CEQ(CEQ6806,172626
#define CNE(CNE6807,172675
CFLOAT_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_add6813,172772
CFLOAT_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_subtract6827,173190
CFLOAT_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_multiply6841,173603
CFLOAT_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_divide6854,174034
CFLOAT_floor_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_floor_divide6877,174866
CFLOAT_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_greater6899,175618
CFLOAT_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_greater_equal6912,176008
CFLOAT_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_less6925,176404
CFLOAT_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_less_equal6938,176791
CFLOAT_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_equal6951,177184
CFLOAT_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_not_equal6964,177572
CFLOAT_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_logical_and6978,177966
CFLOAT_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_logical_or6991,178368
CFLOAT_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_logical_xor7004,178759
CFLOAT_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_logical_not7018,179237
CFLOAT_isnan(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_isnan7029,179527
CFLOAT_isinf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_isinf7040,179830
CFLOAT_isfinite(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_isfinite7051,180133
CFLOAT_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CFLOAT_square7062,180435
CFLOAT_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CFLOAT_reciprocal7073,180769
CFLOAT_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CFLOAT_ones_like7093,181405
CFLOAT_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {CFLOAT_conjugate7102,181609
CFLOAT_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_absolute7112,181912
CFLOAT__arg(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT__arg7122,182195
CFLOAT_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_sign7132,182474
CFLOAT_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_maximum7147,182979
CFLOAT_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_minimum7167,183593
CFLOAT_fmax(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_fmax7188,184209
CFLOAT_fmin(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CFLOAT_fmin7208,184820
#define CFLOAT_true_divide CFLOAT_true_divide7227,185401
CDOUBLE_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_add7234,185493
CDOUBLE_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_subtract7248,185922
CDOUBLE_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_multiply7262,186346
CDOUBLE_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_divide7275,186788
CDOUBLE_floor_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_floor_divide7298,187633
CDOUBLE_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_greater7320,188396
CDOUBLE_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_greater_equal7333,188795
CDOUBLE_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_less7346,189200
CDOUBLE_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_less_equal7359,189596
CDOUBLE_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_equal7372,189998
CDOUBLE_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_not_equal7385,190395
CDOUBLE_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_logical_and7399,190798
CDOUBLE_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_logical_or7412,191209
CDOUBLE_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_logical_xor7425,191609
CDOUBLE_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_logical_not7439,192096
CDOUBLE_isnan(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_isnan7450,192391
CDOUBLE_isinf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_isinf7461,192699
CDOUBLE_isfinite(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_isfinite7472,193007
CDOUBLE_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CDOUBLE_square7483,193314
CDOUBLE_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CDOUBLE_reciprocal7494,193655
CDOUBLE_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CDOUBLE_ones_like7514,194302
CDOUBLE_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {CDOUBLE_conjugate7523,194509
CDOUBLE_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_absolute7533,194819
CDOUBLE__arg(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE__arg7543,195107
CDOUBLE_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_sign7553,195391
CDOUBLE_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_maximum7568,195902
CDOUBLE_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_minimum7588,196529
CDOUBLE_fmax(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_fmax7609,197158
CDOUBLE_fmin(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CDOUBLE_fmin7629,197782
#define CDOUBLE_true_divide CDOUBLE_true_divide7648,198376
CLONGDOUBLE_add(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_add7655,198470
CLONGDOUBLE_subtract(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_subtract7669,198943
CLONGDOUBLE_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_multiply7683,199411
CLONGDOUBLE_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_divide7696,199897
CLONGDOUBLE_floor_divide(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_floor_divide7719,200814
CLONGDOUBLE_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_greater7741,201641
CLONGDOUBLE_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_greater_equal7754,202076
CLONGDOUBLE_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_less7767,202517
CLONGDOUBLE_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_less_equal7780,202949
CLONGDOUBLE_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_equal7793,203387
CLONGDOUBLE_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_not_equal7806,203820
CLONGDOUBLE_logical_and(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_logical_and7820,204259
CLONGDOUBLE_logical_or(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_logical_or7833,204706
CLONGDOUBLE_logical_xor(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_logical_xor7846,205142
CLONGDOUBLE_logical_not(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_logical_not7860,205665
CLONGDOUBLE_isnan(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_isnan7871,205980
CLONGDOUBLE_isinf(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_isinf7882,206308
CLONGDOUBLE_isfinite(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_isfinite7893,206636
CLONGDOUBLE_square(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CLONGDOUBLE_square7904,206963
CLONGDOUBLE_reciprocal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CLONGDOUBLE_reciprocal7915,207332
CLONGDOUBLE_ones_like(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(data))CLONGDOUBLE_ones_like7935,208033
CLONGDOUBLE_conjugate(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {CLONGDOUBLE_conjugate7944,208252
CLONGDOUBLE_absolute(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_absolute7954,208590
CLONGDOUBLE__arg(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE__arg7964,208903
CLONGDOUBLE_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_sign7974,209212
CLONGDOUBLE_maximum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_maximum7989,209752
CLONGDOUBLE_minimum(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_minimum8009,210431
CLONGDOUBLE_fmax(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_fmax8030,211112
CLONGDOUBLE_fmin(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))CLONGDOUBLE_fmin8050,211788
#define CLONGDOUBLE_true_divide CLONGDOUBLE_true_divide8069,212434
#undef CGECGE8073,212492
#undef CLECLE8074,212504
#undef CGTCGT8075,212516
#undef CLTCLT8076,212528
#undef CEQCEQ8077,212540
#undef CNECNE8078,212552
OBJECT_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {OBJECT_equal8088,212849
OBJECT_not_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {OBJECT_not_equal8102,213241
OBJECT_greater(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {OBJECT_greater8116,213637
OBJECT_greater_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {OBJECT_greater_equal8130,214031
OBJECT_less(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {OBJECT_less8144,214431
OBJECT_less_equal(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func)) {OBJECT_less_equal8158,214822
OBJECT_sign(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))OBJECT_sign8172,215209

build/src.win32-2.6/numpy/core/src/umath/umathmodule.c,1200
#define _UMATHMODULE_UMATHMODULE28,878
#define PY_ARRAY_UNIQUE_SYMBOL PY_ARRAY_UNIQUE_SYMBOL34,986
static PyUFuncGenericFunction pyfunc_functions[] = {PyUFunc_On_Om};pyfunc_functions54,1550
ufunc_frompyfunc(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *NPY_UNUSED(kwds)) {args57,1640
ufunc_frompyfunc(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *NPY_UNUSED(kwds)) {NPY_UNUSED57,1640
static PyUFuncGenericFunction frexp_functions[] = {frexp_functions166,4918
static void * blank3_data[] = { (void *)NULL, (void *)NULL, (void *)NULL};blank3_data176,5092
static char frexp_signatures[] = {frexp_signatures177,5168
static PyUFuncGenericFunction ldexp_functions[] = {ldexp_functions187,5421
static char ldexp_signatures[] = {ldexp_signatures197,5595
InitOtherOperators(PyObject *dictionary) {InitOtherOperators208,5863
static struct PyMethodDef methods[] = {methods250,7104
static struct PyModuleDef moduledef = {moduledef262,7476
#define RETVAL RETVAL278,7731
PyObject *PyInit_umath(void)PyInit_umath279,7749
#define ADDCONST(ADDCONST341,9340
#define ADDSCONST(ADDSCONST342,9409
#undef ADDCONSTADDCONST367,10029
#undef ADDSCONSTADDSCONST368,10046

build/src.win32-2.6/numpy/core/src/umath/umath_tests.c,2947
typedef npy_intp intp;intp32,1058
#define INIT_OUTER_LOOP_1 INIT_OUTER_LOOP_134,1084
#define INIT_OUTER_LOOP_2 INIT_OUTER_LOOP_239,1216
#define INIT_OUTER_LOOP_3 INIT_OUTER_LOOP_343,1313
#define INIT_OUTER_LOOP_4 INIT_OUTER_LOOP_447,1410
#define BEGIN_OUTER_LOOP_3 BEGIN_OUTER_LOOP_351,1507
#define BEGIN_OUTER_LOOP_4 BEGIN_OUTER_LOOP_454,1624
#define END_OUTER_LOOP END_OUTER_LOOP57,1756
char *inner1d_signature = "(i),(i)->()";inner1d_signature66,2038
LONG_inner1d(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_inner1d75,2203
DOUBLE_inner1d(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_inner1d101,2836
char *innerwt_signature = "(i),(i),(i)->()";innerwt_signature121,3360
LONG_innerwt(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_innerwt132,3545
DOUBLE_innerwt(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_innerwt161,4268
char *matrix_multiply_signature = "(m,n),(n,p)->(m,p)";matrix_multiply_signature182,4868
FLOAT_matrix_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))FLOAT_matrix_multiply193,5065
DOUBLE_matrix_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))DOUBLE_matrix_multiply241,6437
LONG_matrix_multiply(char **args, intp *dimensions, intp *steps, void *NPY_UNUSED(func))LONG_matrix_multiply289,7815
static PyUFuncGenericFunction inner1d_functions[] = { LONG_inner1d, DOUBLE_inner1d };inner1d_functions350,9574
static void * inner1d_data[] = { (void *)NULL, (void *)NULL };inner1d_data351,9661
static char inner1d_signatures[] = { PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE };inner1d_signatures352,9725
static PyUFuncGenericFunction innerwt_functions[] = { LONG_innerwt, DOUBLE_innerwt };innerwt_functions353,9855
static void * innerwt_data[] = { (void *)NULL, (void *)NULL };innerwt_data354,9942
static char innerwt_signatures[] = { PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_LONG, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE };innerwt_signatures355,10006
static PyUFuncGenericFunction matrix_multiply_functions[] = { LONG_matrix_multiply, FLOAT_matrix_multiply, DOUBLE_matrix_multiply };matrix_multiply_functions356,10166
static void *matrix_multiply_data[] = { (void *)NULL, (void *)NULL, (void *)NULL };matrix_multiply_data357,10300
static char matrix_multiply_signatures[] = { PyArray_LONG, PyArray_LONG, PyArray_LONG,  PyArray_FLOAT, PyArray_FLOAT, PyArray_FLOAT,  PyArray_DOUBLE, PyArray_DOUBLE, PyArray_DOUBLE };matrix_multiply_signatures358,10385
addUfuncs(PyObject *dictionary) {addUfuncs361,10585
static PyMethodDef UMath_TestsMethods[] = {UMath_TestsMethods426,13090
static struct PyModuleDef moduledef = {moduledef437,13496
#define RETVAL RETVAL451,13746
PyObject *PyInit_umath_tests(void)PyInit_umath_tests452,13764

build/src.win32-2.6/numpy/core/src/_sortmodule.c,17292
#define NOT_USED NOT_USED46,1465
#define PYA_QS_STACK PYA_QS_STACK47,1502
#define SMALL_QUICKSORT SMALL_QUICKSORT48,1528
#define SMALL_MERGESORT SMALL_MERGESORT49,1556
#define SMALL_STRING SMALL_STRING50,1584
#define BOOL_SWAP(BOOL_SWAP59,1872
#define BYTE_SWAP(BYTE_SWAP63,1952
#define UBYTE_SWAP(UBYTE_SWAP67,2032
#define SHORT_SWAP(SHORT_SWAP71,2114
#define USHORT_SWAP(USHORT_SWAP75,2196
#define INT_SWAP(INT_SWAP79,2280
#define UINT_SWAP(UINT_SWAP83,2358
#define LONG_SWAP(LONG_SWAP87,2438
#define ULONG_SWAP(ULONG_SWAP91,2518
#define LONGLONG_SWAP(LONGLONG_SWAP95,2600
#define ULONGLONG_SWAP(ULONGLONG_SWAP99,2688
#define FLOAT_SWAP(FLOAT_SWAP103,2778
#define DOUBLE_SWAP(DOUBLE_SWAP107,2860
#define LONGDOUBLE_SWAP(LONGDOUBLE_SWAP111,2944
#define CFLOAT_SWAP(CFLOAT_SWAP115,3036
#define CDOUBLE_SWAP(CDOUBLE_SWAP119,3120
#define CLONGDOUBLE_SWAP(CLONGDOUBLE_SWAP123,3206
#define INTP_SWAP(INTP_SWAP127,3300
BOOL_LT(Bool a, Bool b)BOOL_LT139,3656
BYTE_LT(byte a, byte b)BYTE_LT146,3741
UBYTE_LT(ubyte a, ubyte b)UBYTE_LT153,3826
SHORT_LT(short a, short b)SHORT_LT160,3914
USHORT_LT(ushort a, ushort b)USHORT_LT167,4002
INT_LT(int a, int b)INT_LT174,4093
UINT_LT(uint a, uint b)UINT_LT181,4175
LONG_LT(long a, long b)LONG_LT188,4260
ULONG_LT(ulong a, ulong b)ULONG_LT195,4345
LONGLONG_LT(longlong a, longlong b)LONGLONG_LT202,4433
ULONGLONG_LT(ulonglong a, ulonglong b)ULONGLONG_LT209,4530
FLOAT_LT(float a, float b)FLOAT_LT218,4634
DOUBLE_LT(double a, double b)DOUBLE_LT225,4744
LONGDOUBLE_LT(longdouble a, longdouble b)LONGDOUBLE_LT232,4857
CFLOAT_LT(cfloat a, cfloat b)CFLOAT_LT247,5179
CDOUBLE_LT(cdouble a, cdouble b)CDOUBLE_LT269,5678
CLONGDOUBLE_LT(clongdouble a, clongdouble b)CLONGDOUBLE_LT291,6180
PyObject_LT(PyObject *pa, PyObject *pb)PyObject_LT315,6741
STRING_COPY(char *s1, char *s2, size_t len)STRING_COPY322,6831
STRING_SWAP(char *s1, char *s2, size_t len)STRING_SWAP329,6936
STRING_LT(char *s1, char *s2, size_t len)STRING_LT340,7112
UNICODE_COPY(npy_ucs4 *s1, npy_ucs4 *s2, size_t len)UNICODE_COPY358,7481
UNICODE_SWAP(npy_ucs4 *s1, npy_ucs4 *s2, size_t len)UNICODE_SWAP367,7620
UNICODE_LT(npy_ucs4 *s1, npy_ucs4 *s2, size_t len)UNICODE_LT378,7809
BOOL_quicksort(Bool *start, npy_intp num, void *NOT_USED)BOOL_quicksort404,8339
BOOL_aquicksort(Bool *v, npy_intp* tosort, npy_intp num, void *NOT_USED)BOOL_aquicksort466,10054
BOOL_heapsort(Bool *start, npy_intp n, void *NOT_USED)BOOL_heapsort532,11853
BOOL_aheapsort(Bool *v, npy_intp *tosort, npy_intp n, void *NOT_USED)BOOL_aheapsort582,12940
BOOL_mergesort0(Bool *pl, Bool *pr, Bool *pw)BOOL_mergesort0630,14056
BOOL_mergesort(Bool *start, npy_intp num, void *NOT_USED)BOOL_mergesort672,15037
BOOL_amergesort0(npy_intp *pl, npy_intp *pr, Bool *v, npy_intp *pw)BOOL_amergesort0690,15383
BOOL_amergesort(Bool *v, npy_intp *tosort, npy_intp num, void *NOT_USED)BOOL_amergesort731,16452
BYTE_quicksort(byte *start, npy_intp num, void *NOT_USED)BYTE_quicksort755,16821
BYTE_aquicksort(byte *v, npy_intp* tosort, npy_intp num, void *NOT_USED)BYTE_aquicksort817,18536
BYTE_heapsort(byte *start, npy_intp n, void *NOT_USED)BYTE_heapsort883,20335
BYTE_aheapsort(byte *v, npy_intp *tosort, npy_intp n, void *NOT_USED)BYTE_aheapsort933,21422
BYTE_mergesort0(byte *pl, byte *pr, byte *pw)BYTE_mergesort0981,22538
BYTE_mergesort(byte *start, npy_intp num, void *NOT_USED)BYTE_mergesort1023,23519
BYTE_amergesort0(npy_intp *pl, npy_intp *pr, byte *v, npy_intp *pw)BYTE_amergesort01041,23865
BYTE_amergesort(byte *v, npy_intp *tosort, npy_intp num, void *NOT_USED)BYTE_amergesort1082,24934
UBYTE_quicksort(ubyte *start, npy_intp num, void *NOT_USED)UBYTE_quicksort1106,25303
UBYTE_aquicksort(ubyte *v, npy_intp* tosort, npy_intp num, void *NOT_USED)UBYTE_aquicksort1168,27036
UBYTE_heapsort(ubyte *start, npy_intp n, void *NOT_USED)UBYTE_heapsort1234,28844
UBYTE_aheapsort(ubyte *v, npy_intp *tosort, npy_intp n, void *NOT_USED)UBYTE_aheapsort1284,29938
UBYTE_mergesort0(ubyte *pl, ubyte *pr, ubyte *pw)UBYTE_mergesort01332,31060
UBYTE_mergesort(ubyte *start, npy_intp num, void *NOT_USED)UBYTE_mergesort1374,32050
UBYTE_amergesort0(npy_intp *pl, npy_intp *pr, ubyte *v, npy_intp *pw)UBYTE_amergesort01392,32402
UBYTE_amergesort(ubyte *v, npy_intp *tosort, npy_intp num, void *NOT_USED)UBYTE_amergesort1433,33478
SHORT_quicksort(short *start, npy_intp num, void *NOT_USED)SHORT_quicksort1457,33850
SHORT_aquicksort(short *v, npy_intp* tosort, npy_intp num, void *NOT_USED)SHORT_aquicksort1519,35583
SHORT_heapsort(short *start, npy_intp n, void *NOT_USED)SHORT_heapsort1585,37391
SHORT_aheapsort(short *v, npy_intp *tosort, npy_intp n, void *NOT_USED)SHORT_aheapsort1635,38485
SHORT_mergesort0(short *pl, short *pr, short *pw)SHORT_mergesort01683,39607
SHORT_mergesort(short *start, npy_intp num, void *NOT_USED)SHORT_mergesort1725,40597
SHORT_amergesort0(npy_intp *pl, npy_intp *pr, short *v, npy_intp *pw)SHORT_amergesort01743,40949
SHORT_amergesort(short *v, npy_intp *tosort, npy_intp num, void *NOT_USED)SHORT_amergesort1784,42025
USHORT_quicksort(ushort *start, npy_intp num, void *NOT_USED)USHORT_quicksort1808,42397
USHORT_aquicksort(ushort *v, npy_intp* tosort, npy_intp num, void *NOT_USED)USHORT_aquicksort1870,44148
USHORT_heapsort(ushort *start, npy_intp n, void *NOT_USED)USHORT_heapsort1936,45965
USHORT_aheapsort(ushort *v, npy_intp *tosort, npy_intp n, void *NOT_USED)USHORT_aheapsort1986,47066
USHORT_mergesort0(ushort *pl, ushort *pr, ushort *pw)USHORT_mergesort02034,48194
USHORT_mergesort(ushort *start, npy_intp num, void *NOT_USED)USHORT_mergesort2076,49193
USHORT_amergesort0(npy_intp *pl, npy_intp *pr, ushort *v, npy_intp *pw)USHORT_amergesort02094,49551
USHORT_amergesort(ushort *v, npy_intp *tosort, npy_intp num, void *NOT_USED)USHORT_amergesort2135,50634
INT_quicksort(int *start, npy_intp num, void *NOT_USED)INT_quicksort2159,51009
INT_aquicksort(int *v, npy_intp* tosort, npy_intp num, void *NOT_USED)INT_aquicksort2221,52706
INT_heapsort(int *start, npy_intp n, void *NOT_USED)INT_heapsort2287,54496
INT_aheapsort(int *v, npy_intp *tosort, npy_intp n, void *NOT_USED)INT_aheapsort2337,55576
INT_mergesort0(int *pl, int *pr, int *pw)INT_mergesort02385,56686
INT_mergesort(int *start, npy_intp num, void *NOT_USED)INT_mergesort2427,57658
INT_amergesort0(npy_intp *pl, npy_intp *pr, int *v, npy_intp *pw)INT_amergesort02445,57998
INT_amergesort(int *v, npy_intp *tosort, npy_intp num, void *NOT_USED)INT_amergesort2486,59060
UINT_quicksort(uint *start, npy_intp num, void *NOT_USED)UINT_quicksort2510,59426
UINT_aquicksort(uint *v, npy_intp* tosort, npy_intp num, void *NOT_USED)UINT_aquicksort2572,61141
UINT_heapsort(uint *start, npy_intp n, void *NOT_USED)UINT_heapsort2638,62940
UINT_aheapsort(uint *v, npy_intp *tosort, npy_intp n, void *NOT_USED)UINT_aheapsort2688,64027
UINT_mergesort0(uint *pl, uint *pr, uint *pw)UINT_mergesort02736,65143
UINT_mergesort(uint *start, npy_intp num, void *NOT_USED)UINT_mergesort2778,66124
UINT_amergesort0(npy_intp *pl, npy_intp *pr, uint *v, npy_intp *pw)UINT_amergesort02796,66470
UINT_amergesort(uint *v, npy_intp *tosort, npy_intp num, void *NOT_USED)UINT_amergesort2837,67539
LONG_quicksort(long *start, npy_intp num, void *NOT_USED)LONG_quicksort2861,67908
LONG_aquicksort(long *v, npy_intp* tosort, npy_intp num, void *NOT_USED)LONG_aquicksort2923,69623
LONG_heapsort(long *start, npy_intp n, void *NOT_USED)LONG_heapsort2989,71422
LONG_aheapsort(long *v, npy_intp *tosort, npy_intp n, void *NOT_USED)LONG_aheapsort3039,72509
LONG_mergesort0(long *pl, long *pr, long *pw)LONG_mergesort03087,73625
LONG_mergesort(long *start, npy_intp num, void *NOT_USED)LONG_mergesort3129,74606
LONG_amergesort0(npy_intp *pl, npy_intp *pr, long *v, npy_intp *pw)LONG_amergesort03147,74952
LONG_amergesort(long *v, npy_intp *tosort, npy_intp num, void *NOT_USED)LONG_amergesort3188,76021
ULONG_quicksort(ulong *start, npy_intp num, void *NOT_USED)ULONG_quicksort3212,76390
ULONG_aquicksort(ulong *v, npy_intp* tosort, npy_intp num, void *NOT_USED)ULONG_aquicksort3274,78123
ULONG_heapsort(ulong *start, npy_intp n, void *NOT_USED)ULONG_heapsort3340,79931
ULONG_aheapsort(ulong *v, npy_intp *tosort, npy_intp n, void *NOT_USED)ULONG_aheapsort3390,81025
ULONG_mergesort0(ulong *pl, ulong *pr, ulong *pw)ULONG_mergesort03438,82147
ULONG_mergesort(ulong *start, npy_intp num, void *NOT_USED)ULONG_mergesort3480,83137
ULONG_amergesort0(npy_intp *pl, npy_intp *pr, ulong *v, npy_intp *pw)ULONG_amergesort03498,83489
ULONG_amergesort(ulong *v, npy_intp *tosort, npy_intp num, void *NOT_USED)ULONG_amergesort3539,84565
LONGLONG_quicksort(longlong *start, npy_intp num, void *NOT_USED)LONGLONG_quicksort3563,84937
LONGLONG_aquicksort(longlong *v, npy_intp* tosort, npy_intp num, void *NOT_USED)LONGLONG_aquicksort3625,86724
LONGLONG_heapsort(longlong *start, npy_intp n, void *NOT_USED)LONGLONG_heapsort3691,88559
LONGLONG_aheapsort(longlong *v, npy_intp *tosort, npy_intp n, void *NOT_USED)LONGLONG_aheapsort3741,89674
LONGLONG_mergesort0(longlong *pl, longlong *pr, longlong *pw)LONGLONG_mergesort03789,90814
LONGLONG_mergesort(longlong *start, npy_intp num, void *NOT_USED)LONGLONG_mergesort3831,91831
LONGLONG_amergesort0(npy_intp *pl, npy_intp *pr, longlong *v, npy_intp *pw)LONGLONG_amergesort03849,92201
LONGLONG_amergesort(longlong *v, npy_intp *tosort, npy_intp num, void *NOT_USED)LONGLONG_amergesort3890,93298
ULONGLONG_quicksort(ulonglong *start, npy_intp num, void *NOT_USED)ULONGLONG_quicksort3914,93679
ULONGLONG_aquicksort(ulonglong *v, npy_intp* tosort, npy_intp num, void *NOT_USED)ULONGLONG_aquicksort3976,95484
ULONGLONG_heapsort(ulonglong *start, npy_intp n, void *NOT_USED)ULONGLONG_heapsort4042,97328
ULONGLONG_aheapsort(ulonglong *v, npy_intp *tosort, npy_intp n, void *NOT_USED)ULONGLONG_aheapsort4092,98450
ULONGLONG_mergesort0(ulonglong *pl, ulonglong *pr, ulonglong *pw)ULONGLONG_mergesort04140,99596
ULONGLONG_mergesort(ulonglong *start, npy_intp num, void *NOT_USED)ULONGLONG_mergesort4182,100622
ULONGLONG_amergesort0(npy_intp *pl, npy_intp *pr, ulonglong *v, npy_intp *pw)ULONGLONG_amergesort04200,100998
ULONGLONG_amergesort(ulonglong *v, npy_intp *tosort, npy_intp num, void *NOT_USED)ULONGLONG_amergesort4241,102102
FLOAT_quicksort(float *start, npy_intp num, void *NOT_USED)FLOAT_quicksort4265,102486
FLOAT_aquicksort(float *v, npy_intp* tosort, npy_intp num, void *NOT_USED)FLOAT_aquicksort4327,104219
FLOAT_heapsort(float *start, npy_intp n, void *NOT_USED)FLOAT_heapsort4393,106027
FLOAT_aheapsort(float *v, npy_intp *tosort, npy_intp n, void *NOT_USED)FLOAT_aheapsort4443,107121
FLOAT_mergesort0(float *pl, float *pr, float *pw)FLOAT_mergesort04491,108243
FLOAT_mergesort(float *start, npy_intp num, void *NOT_USED)FLOAT_mergesort4533,109233
FLOAT_amergesort0(npy_intp *pl, npy_intp *pr, float *v, npy_intp *pw)FLOAT_amergesort04551,109585
FLOAT_amergesort(float *v, npy_intp *tosort, npy_intp num, void *NOT_USED)FLOAT_amergesort4592,110661
DOUBLE_quicksort(double *start, npy_intp num, void *NOT_USED)DOUBLE_quicksort4616,111033
DOUBLE_aquicksort(double *v, npy_intp* tosort, npy_intp num, void *NOT_USED)DOUBLE_aquicksort4678,112784
DOUBLE_heapsort(double *start, npy_intp n, void *NOT_USED)DOUBLE_heapsort4744,114601
DOUBLE_aheapsort(double *v, npy_intp *tosort, npy_intp n, void *NOT_USED)DOUBLE_aheapsort4794,115702
DOUBLE_mergesort0(double *pl, double *pr, double *pw)DOUBLE_mergesort04842,116830
DOUBLE_mergesort(double *start, npy_intp num, void *NOT_USED)DOUBLE_mergesort4884,117829
DOUBLE_amergesort0(npy_intp *pl, npy_intp *pr, double *v, npy_intp *pw)DOUBLE_amergesort04902,118187
DOUBLE_amergesort(double *v, npy_intp *tosort, npy_intp num, void *NOT_USED)DOUBLE_amergesort4943,119270
LONGDOUBLE_quicksort(longdouble *start, npy_intp num, void *NOT_USED)LONGDOUBLE_quicksort4967,119645
LONGDOUBLE_aquicksort(longdouble *v, npy_intp* tosort, npy_intp num, void *NOT_USED)LONGDOUBLE_aquicksort5029,121468
LONGDOUBLE_heapsort(longdouble *start, npy_intp n, void *NOT_USED)LONGDOUBLE_heapsort5095,123321
LONGDOUBLE_aheapsort(longdouble *v, npy_intp *tosort, npy_intp n, void *NOT_USED)LONGDOUBLE_aheapsort5145,124450
LONGDOUBLE_mergesort0(longdouble *pl, longdouble *pr, longdouble *pw)LONGDOUBLE_mergesort05193,125602
LONGDOUBLE_mergesort(longdouble *start, npy_intp num, void *NOT_USED)LONGDOUBLE_mergesort5235,126637
LONGDOUBLE_amergesort0(npy_intp *pl, npy_intp *pr, longdouble *v, npy_intp *pw)LONGDOUBLE_amergesort05253,127019
LONGDOUBLE_amergesort(longdouble *v, npy_intp *tosort, npy_intp num, void *NOT_USED)LONGDOUBLE_amergesort5294,128130
CFLOAT_quicksort(cfloat *start, npy_intp num, void *NOT_USED)CFLOAT_quicksort5318,128517
CFLOAT_aquicksort(cfloat *v, npy_intp* tosort, npy_intp num, void *NOT_USED)CFLOAT_aquicksort5380,130268
CFLOAT_heapsort(cfloat *start, npy_intp n, void *NOT_USED)CFLOAT_heapsort5446,132085
CFLOAT_aheapsort(cfloat *v, npy_intp *tosort, npy_intp n, void *NOT_USED)CFLOAT_aheapsort5496,133186
CFLOAT_mergesort0(cfloat *pl, cfloat *pr, cfloat *pw)CFLOAT_mergesort05544,134314
CFLOAT_mergesort(cfloat *start, npy_intp num, void *NOT_USED)CFLOAT_mergesort5586,135313
CFLOAT_amergesort0(npy_intp *pl, npy_intp *pr, cfloat *v, npy_intp *pw)CFLOAT_amergesort05604,135671
CFLOAT_amergesort(cfloat *v, npy_intp *tosort, npy_intp num, void *NOT_USED)CFLOAT_amergesort5645,136754
CDOUBLE_quicksort(cdouble *start, npy_intp num, void *NOT_USED)CDOUBLE_quicksort5669,137129
CDOUBLE_aquicksort(cdouble *v, npy_intp* tosort, npy_intp num, void *NOT_USED)CDOUBLE_aquicksort5731,138898
CDOUBLE_heapsort(cdouble *start, npy_intp n, void *NOT_USED)CDOUBLE_heapsort5797,140724
CDOUBLE_aheapsort(cdouble *v, npy_intp *tosort, npy_intp n, void *NOT_USED)CDOUBLE_aheapsort5847,141832
CDOUBLE_mergesort0(cdouble *pl, cdouble *pr, cdouble *pw)CDOUBLE_mergesort05895,142966
CDOUBLE_mergesort(cdouble *start, npy_intp num, void *NOT_USED)CDOUBLE_mergesort5937,143974
CDOUBLE_amergesort0(npy_intp *pl, npy_intp *pr, cdouble *v, npy_intp *pw)CDOUBLE_amergesort05955,144338
CDOUBLE_amergesort(cdouble *v, npy_intp *tosort, npy_intp num, void *NOT_USED)CDOUBLE_amergesort5996,145428
CLONGDOUBLE_quicksort(clongdouble *start, npy_intp num, void *NOT_USED)CLONGDOUBLE_quicksort6020,145806
CLONGDOUBLE_aquicksort(clongdouble *v, npy_intp* tosort, npy_intp num, void *NOT_USED)CLONGDOUBLE_aquicksort6082,147647
CLONGDOUBLE_heapsort(clongdouble *start, npy_intp n, void *NOT_USED)CLONGDOUBLE_heapsort6148,149509
CLONGDOUBLE_aheapsort(clongdouble *v, npy_intp *tosort, npy_intp n, void *NOT_USED)CLONGDOUBLE_aheapsort6198,150645
CLONGDOUBLE_mergesort0(clongdouble *pl, clongdouble *pr, clongdouble *pw)CLONGDOUBLE_mergesort06246,151803
CLONGDOUBLE_mergesort(clongdouble *start, npy_intp num, void *NOT_USED)CLONGDOUBLE_mergesort6288,152847
CLONGDOUBLE_amergesort0(npy_intp *pl, npy_intp *pr, clongdouble *v, npy_intp *pw)CLONGDOUBLE_amergesort06306,153235
CLONGDOUBLE_amergesort(clongdouble *v, npy_intp *tosort, npy_intp num, void *NOT_USED)CLONGDOUBLE_amergesort6347,154353
STRING_mergesort0(char *pl, char *pr, char *pw, char *vp, size_t len)STRING_mergesort06378,154997
STRING_mergesort(char *start, npy_intp num, PyArrayObject *arr)STRING_mergesort6421,156212
STRING_quicksort(char *start, npy_intp num, PyArrayObject *arr)STRING_quicksort6452,156888
STRING_heapsort(char *start, npy_intp n, PyArrayObject *arr)STRING_heapsort6519,158951
STRING_aheapsort(char *v, npy_intp *tosort, npy_intp n, PyArrayObject *arr)STRING_aheapsort6568,160271
STRING_aquicksort(char *v, npy_intp* tosort, npy_intp num, PyArrayObject *arr)STRING_aquicksort6617,161481
STRING_amergesort0(npy_intp *pl, npy_intp *pr, char *v, npy_intp *pw, int len)STRING_amergesort06684,163486
STRING_amergesort(char *v, npy_intp *tosort, npy_intp num, PyArrayObject *arr)STRING_amergesort6727,164593
UNICODE_mergesort0(PyArray_UCS4 *pl, PyArray_UCS4 *pr, PyArray_UCS4 *pw, PyArray_UCS4 *vp, size_t len)UNICODE_mergesort06749,165057
UNICODE_mergesort(PyArray_UCS4 *start, npy_intp num, PyArrayObject *arr)UNICODE_mergesort6792,166324
UNICODE_quicksort(PyArray_UCS4 *start, npy_intp num, PyArrayObject *arr)UNICODE_quicksort6823,167042
UNICODE_heapsort(PyArray_UCS4 *start, npy_intp n, PyArrayObject *arr)UNICODE_heapsort6890,169170
UNICODE_aheapsort(PyArray_UCS4 *v, npy_intp *tosort, npy_intp n, PyArrayObject *arr)UNICODE_aheapsort6939,170534
UNICODE_aquicksort(PyArray_UCS4 *v, npy_intp* tosort, npy_intp num, PyArrayObject *arr)UNICODE_aquicksort6988,171765
UNICODE_amergesort0(npy_intp *pl, npy_intp *pr, PyArray_UCS4 *v, npy_intp *pw, int len)UNICODE_amergesort07055,173801
UNICODE_amergesort(PyArray_UCS4 *v, npy_intp *tosort, npy_intp num, PyArrayObject *arr)UNICODE_amergesort7098,174929
add_sortfuncs(void)add_sortfuncs7119,175400
static struct PyMethodDef methods[] = {methods7411,187137
static struct PyModuleDef moduledef = {moduledef7417,187236
PyObject *PyInit__sort(void) {PyInit__sort7432,187515
init_sort(void) {init_sort7444,187731

doc/newdtype_example/floatint.c,744
typedef struct _floatint {_floatint10,176
    npy_int32 first;first12,221
    npy_int32 last;last13,242
} PyFloatIntObject;PyFloatIntObject14,262
static PyTypeObject PyFloatInt_Type = {PyFloatInt_Type16,283
static PyArray_ArrFuncs _PyFloatInt_Funcs;_PyFloatInt_Funcs23,558
#define _ALIGN(_ALIGN25,602
static PyArray_Descr _PyFloatInt_Dtype = {_PyFloatInt_Dtype29,684
twoint_copyswap(void *dst, void *src, int swap, void *arr)twoint_copyswap46,928
twoint_getitem(char *ip, PyArrayObject *ap) {twoint_getitem63,1271
twoint_setitem(PyObject *op, char *ov, PyArrayObject *ap) {twoint_setitem78,1605
static PyArray_Descr * _register_dtype(void)_register_dtype97,2041
PyMODINIT_FUNC initfloatint(void) {initfloatint115,2637

doc/numpybook/comparison/ctypes/code.c,705
typedef struct {double real; double imag;} cdouble;real2,1
typedef struct {double real; double imag;} cdouble;imag2,1
typedef struct {double real; double imag;} cdouble;cdouble2,1
typedef struct {double real; double imag;} cfloat;real3,53
typedef struct {double real; double imag;} cfloat;imag3,53
typedef struct {double real; double imag;} cfloat;cfloat3,53
void zadd(cdouble *a, cdouble *b, cdouble *c, long n)zadd6,141
void cadd(cfloat *a, cfloat *b, cfloat *c, long n) cadd15,299
void dadd(double *a, double *b, double *c, long n) dadd24,455
void sadd(float *a, float *b, float *c, long n) sadd31,553
void dfilter2d(double *a, double *b, int *astrides, int *dims)dfilter2d41,736

doc/numpybook/comparison/f2py/filtermodule.c,1344
static PyObject *filter_error;filter_error21,666
static PyObject *filter_module;filter_module22,697
#define F_FUNC(F_FUNC34,1111
#define F_FUNC(F_FUNC36,1142
#define F_FUNC(F_FUNC40,1211
#define F_FUNC(F_FUNC42,1245
#define F_FUNC(F_FUNC48,1355
#define F_FUNC(F_FUNC50,1383
#define F_FUNC(F_FUNC54,1449
#define F_FUNC(F_FUNC56,1480
#define F_FUNC_US(F_FUNC_US61,1554
#define F_FUNC_US(F_FUNC_US63,1601
#define rank(rank66,1644
#define shape(shape67,1675
#define old_rank(old_rank68,1716
#define old_shape(old_shape69,1786
#define fshape(fshape70,1874
#define len(len71,1925
#define flen(flen72,1955
#define size(size73,1987
#define slen(slen75,2094
#define CHECKSCALAR(CHECKSCALAR77,2134
#define CFUNCSMESS(CFUNCSMESS84,2356
#define CFUNCSMESSPY(CFUNCSMESSPY85,2416
#define CFUNCSMESS(CFUNCSMESS89,2552
#define CFUNCSMESSPY(CFUNCSMESSPY90,2577
#define MAX(MAX94,2628
#define MIN(MIN97,2686
static char doc_f2py_rout_filter_dfilter2d[] = "\doc_f2py_rout_filter_dfilter2d123,3480
static PyObject *f2py_rout_filter_dfilter2d(const PyObject *capi_self,f2py_rout_filter_dfilter2d131,3789
static FortranDataDef f2py_routine_defs[] = {f2py_routine_defs247,7369
static PyMethodDef f2py_module_methods[] = {f2py_module_methods254,7589
PyMODINIT_FUNC initfilter(void) {initfilter259,7653

doc/numpybook/comparison/pyrex/add.c,2737
  #define PY_LONG_LONG PY_LONG_LONG6,129
#define __PYX_EXTERN_C __PYX_EXTERN_C9,188
#define __PYX_EXTERN_C __PYX_EXTERN_C11,228
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/p17,341
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/s17,341
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/__Pyx_InternTabEntry17,341
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/p18,413
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/s18,413
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/n18,413
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/__Pyx_StringTabEntry18,413
static PyObject *__pyx_m;__pyx_m40,1945
static PyObject *__pyx_b;__pyx_b41,1971
static int __pyx_lineno;__pyx_lineno42,1997
static char *__pyx_filename;__pyx_filename43,2022
static char **__pyx_f;__pyx_f44,2051
static PyTypeObject *__pyx_ptype_7c_numpy_dtype = 0;__pyx_ptype_7c_numpy_dtype48,2108
static PyTypeObject *__pyx_ptype_7c_numpy_ndarray = 0;__pyx_ptype_7c_numpy_ndarray49,2161
static PyObject *__pyx_n_c_numpy;__pyx_n_c_numpy56,2276
static PyObject *__pyx_n_zadd;__pyx_n_zadd57,2310
static PyObject *__pyx_n_cadd;__pyx_n_cadd58,2341
static PyObject *__pyx_n_dadd;__pyx_n_dadd59,2372
static PyObject *__pyx_n_sadd;__pyx_n_sadd60,2403
static PyObject *__pyx_f_3add_zadd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_f_3add_zadd63,2547
static PyObject *__pyx_f_3add_cadd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_f_3add_cadd136,5769
static PyObject *__pyx_f_3add_dadd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_f_3add_dadd209,8983
static PyObject *__pyx_f_3add_sadd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_f_3add_sadd279,11947
static __Pyx_InternTabEntry __pyx_intern_tab[] = {__pyx_intern_tab348,14794
static struct PyMethodDef __pyx_methods[] = {__pyx_methods357,14999
PyMODINIT_FUNC initadd(void) {initadd368,15455
static char *__pyx_filenames[] = {__pyx_filenames388,16606
static void __pyx_init_filenames(void) {__pyx_init_filenames395,16703
static int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {__Pyx_TypeTest399,16776
static int __Pyx_InternStrings(__Pyx_InternTabEntry *t) {__Pyx_InternStrings411,17144
static PyTypeObject *__Pyx_ImportType(char *module_name, char *class_name, __Pyx_ImportType421,17349
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {__Pyx_Import471,18768
static void __Pyx_AddTraceback(char *funcname) {__Pyx_AddTraceback508,19716

doc/numpybook/comparison/pyrex/filter.c,2202
  #define PY_LONG_LONG PY_LONG_LONG6,129
#define __PYX_EXTERN_C __PYX_EXTERN_C9,188
#define __PYX_EXTERN_C __PYX_EXTERN_C11,228
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/p17,341
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/s17,341
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/__Pyx_InternTabEntry17,341
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/p18,413
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/s18,413
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/n18,413
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/__Pyx_StringTabEntry18,413
static PyObject *__pyx_m;__pyx_m40,1945
static PyObject *__pyx_b;__pyx_b41,1971
static int __pyx_lineno;__pyx_lineno42,1997
static char *__pyx_filename;__pyx_filename43,2022
static char **__pyx_f;__pyx_f44,2051
static PyTypeObject *__pyx_ptype_7c_numpy_dtype = 0;__pyx_ptype_7c_numpy_dtype48,2108
static PyTypeObject *__pyx_ptype_7c_numpy_ndarray = 0;__pyx_ptype_7c_numpy_ndarray49,2161
static PyObject *__pyx_n_c_numpy;__pyx_n_c_numpy56,2282
static PyObject *__pyx_n_filter;__pyx_n_filter57,2316
static PyObject *__pyx_f_6filter_filter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_f_6filter_filter60,2467
static __Pyx_InternTabEntry __pyx_intern_tab[] = {__pyx_intern_tab182,7598
static struct PyMethodDef __pyx_methods[] = {__pyx_methods188,7726
PyMODINIT_FUNC initfilter(void) {initfilter196,7967
static char *__pyx_filenames[] = {__pyx_filenames216,9133
static void __pyx_init_filenames(void) {__pyx_init_filenames223,9233
static int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {__Pyx_TypeTest227,9306
static int __Pyx_InternStrings(__Pyx_InternTabEntry *t) {__Pyx_InternStrings239,9674
static PyTypeObject *__Pyx_ImportType(char *module_name, char *class_name, __Pyx_ImportType249,9879
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {__Pyx_Import299,11298
static void __Pyx_AddTraceback(char *funcname) {__Pyx_AddTraceback336,12246

doc/pyrex/numpyx.c,7215
  #define PY_LONG_LONG PY_LONG_LONG6,129
#define __PYX_EXTERN_C __PYX_EXTERN_C9,188
#define __PYX_EXTERN_C __PYX_EXTERN_C11,228
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/p18,361
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/s18,361
typedef struct {PyObject **p; char *s;} __Pyx_InternTabEntry; /*proto*/__Pyx_InternTabEntry18,361
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/p19,433
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/s19,433
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/n19,433
typedef struct {PyObject **p; char *s; long n;} __Pyx_StringTabEntry; /*proto*/__Pyx_StringTabEntry19,433
static PyObject *__pyx_m;__pyx_m21,514
static PyObject *__pyx_b;__pyx_b22,540
static int __pyx_lineno;__pyx_lineno23,566
static char *__pyx_filename;__pyx_filename24,591
static char **__pyx_f;__pyx_f25,620
static PyTypeObject *__pyx_ptype_7c_numpy_dtype = 0;__pyx_ptype_7c_numpy_dtype49,1362
static PyTypeObject *__pyx_ptype_7c_numpy_ndarray = 0;__pyx_ptype_7c_numpy_ndarray50,1415
static PyTypeObject *__pyx_ptype_7c_numpy_flatiter = 0;__pyx_ptype_7c_numpy_flatiter51,1470
static PyTypeObject *__pyx_ptype_7c_numpy_broadcast = 0;__pyx_ptype_7c_numpy_broadcast52,1526
static PyObject *__pyx_n_c_python;__pyx_n_c_python62,1775
static PyObject *__pyx_n_c_numpy;__pyx_n_c_numpy63,1810
static PyObject *__pyx_n_numpy;__pyx_n_numpy64,1844
static PyObject *__pyx_n_print_array_info;__pyx_n_print_array_info65,1876
static PyObject *__pyx_n_test_methods;__pyx_n_test_methods66,1919
static PyObject *__pyx_n_test;__pyx_n_test67,1958
static PyObject *__pyx_n_dtype;__pyx_n_dtype69,1990
static PyObject *__pyx_k2p;__pyx_k2p71,2023
static PyObject *__pyx_k3p;__pyx_k3p72,2051
static PyObject *__pyx_k4p;__pyx_k4p73,2079
static PyObject *__pyx_k5p;__pyx_k5p74,2107
static PyObject *__pyx_k6p;__pyx_k6p75,2135
static PyObject *__pyx_k7p;__pyx_k7p76,2163
static PyObject *__pyx_k8p;__pyx_k8p77,2191
static PyObject *__pyx_k9p;__pyx_k9p78,2219
static char (__pyx_k2[]) = "-=";__pyx_k280,2248
static char (__pyx_k3[]) = "printing array info for ndarray at 0x%0lx";__pyx_k381,2281
static char (__pyx_k4[]) = "print number of dimensions:";__pyx_k482,2353
static char (__pyx_k5[]) = "address of strides: 0x%0lx";__pyx_k583,2411
static char (__pyx_k6[]) = "strides:";__pyx_k684,2468
static char (__pyx_k7[]) = "  stride %d:";__pyx_k785,2507
static char (__pyx_k8[]) = "memory dump:";__pyx_k886,2550
static char (__pyx_k9[]) = "-=";__pyx_k987,2593
static PyObject *__pyx_f_6numpyx_print_array_info(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_f_6numpyx_print_array_info90,2754
static PyObject *__pyx_n_object_;__pyx_n_object_192,9017
static PyObject *__pyx_n_float64;__pyx_n_float64193,9051
static PyObject *__pyx_n_name;__pyx_n_name194,9085
static PyObject *__pyx_k10p;__pyx_k10p196,9117
static PyObject *__pyx_k11p;__pyx_k11p197,9146
static PyObject *__pyx_k12p;__pyx_k12p198,9175
static PyObject *__pyx_k13p;__pyx_k13p199,9204
static PyObject *__pyx_k14p;__pyx_k14p200,9233
static char (__pyx_k10[]) = "   print_elements() not (yet) implemented for dtype %s";__pyx_k10202,9263
static char (__pyx_k11[]) = "  ";__pyx_k11203,9349
static char (__pyx_k12[]) = "  ";__pyx_k12204,9383
static char (__pyx_k13[]) = "  ";__pyx_k13205,9417
static char (__pyx_k14[]) = "  ";__pyx_k14206,9451
static PyObject *__pyx_f_6numpyx_print_elements(char (*__pyx_v_data),Py_intptr_t (*__pyx_v_strides),Py_intptr_t (*__pyx_v_dimensions),int __pyx_v_nd,int __pyx_v_elsize,PyObject *__pyx_v_dtype) {__pyx_f_6numpyx_print_elements208,9486
static PyObject *__pyx_n_any;__pyx_n_any431,22094
static PyObject *__pyx_k15p;__pyx_k15p433,22125
static PyObject *__pyx_k16p;__pyx_k16p434,22154
static PyObject *__pyx_k17p;__pyx_k17p435,22183
static char (__pyx_k15[]) = "arr.any() :";__pyx_k15437,22213
static char (__pyx_k16[]) = "arr.nd    :";__pyx_k16438,22256
static char (__pyx_k17[]) = "arr.flags :";__pyx_k17439,22299
static char __pyx_doc_6numpyx_test_methods[] = "Test a few attribute accesses for an array.\n    \n    This illustrates how the pyrex-visible object is in practice a strange\n    hybrid of the C PyArrayObject struct and the python object.  Some\n    properties (like .nd) are visible here but not in python, while others\n    like flags behave very differently: in python flags appears as a separate,\n    object while here we see the raw int holding the bit pattern.\n\n    This makes sense when we think of how pyrex resolves arr.foo: if foo is\n    listed as a field in the c_numpy.ndarray struct description, it will be\n    directly accessed as a C variable without going through Python at all.\n    This is why for arr.flags, we see the actual int which holds all the flags\n    as bit fields.  However, for any other attribute not listed in the struct,\n    it simply forwards the attribute lookup to python at runtime, just like\n    python would (which means that AttributeError can  be raised for\n    non-existent attributes, for example).";__pyx_doc_6numpyx_test_methods442,22466
static PyObject *__pyx_f_6numpyx_test_methods(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_f_6numpyx_test_methods443,23519
static PyObject *__pyx_n_array;__pyx_n_array488,26072
static PyObject *__pyx_n_arange;__pyx_n_arange489,26104
static PyObject *__pyx_n_shape;__pyx_n_shape490,26137
static PyObject *__pyx_n_one;__pyx_n_one491,26169
static PyObject *__pyx_n_two;__pyx_n_two492,26199
static char __pyx_doc_6numpyx_test[] = "this function is pure Python";__pyx_doc_6numpyx_test496,26346
static PyObject *__pyx_f_6numpyx_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_f_6numpyx_test497,26417
static __Pyx_InternTabEntry __pyx_intern_tab[] = {__pyx_intern_tab725,38655
static __Pyx_StringTabEntry __pyx_string_tab[] = {__pyx_string_tab745,39223
static struct PyMethodDef __pyx_methods[] = {__pyx_methods765,40018
PyMODINIT_FUNC initnumpyx(void) {initnumpyx775,40501
static char *__pyx_filenames[] = {__pyx_filenames805,42596
static void __pyx_init_filenames(void) {__pyx_init_filenames812,42696
static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed, char *name) {__Pyx_ArgTypeTest816,42769
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {__Pyx_Import829,43233
static PyObject *__Pyx_GetStdout(void) {__Pyx_GetStdout862,44111
static int __Pyx_PrintItem(PyObject *v) {__Pyx_PrintItem870,44298
static int __Pyx_PrintNewline(void) {__Pyx_PrintNewline892,44859
static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {__Pyx_GetName903,45077
static int __Pyx_InternStrings(__Pyx_InternTabEntry *t) {__Pyx_InternStrings911,45294
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {__Pyx_InitStrings921,45499
static PyTypeObject *__Pyx_ImportType(char *module_name, char *class_name, __Pyx_ImportType931,45713
static void __Pyx_AddTraceback(char *funcname) {__Pyx_AddTraceback985,47202

doc/swig/test/Array1.h,152
#define ARRAY1_HARRAY1_H2,17
class Array1Array17,75
  bool _ownData;_ownData46,762
  int _length;_length47,779
  long * _buffer;_buffer48,794

doc/swig/test/Array2.h,209
#define ARRAY2_HARRAY2_H2,17
class Array2Array28,95
  bool _ownData;_ownData51,858
  int _nrows;_nrows52,875
  int _ncols;_ncols53,889
  long * _buffer;_buffer54,903
  Array1 * _rows;_rows55,921

doc/swig/test/Farray.h,145
#define FARRAY_HFARRAY_H2,17
class FarrayFarray7,75
  int _nrows;_nrows44,720
  int _ncols;_ncols45,734
  long * _buffer;_buffer46,748

doc/swig/test/Fortran.h,81
#define FORTRAN_HFORTRAN_H2,18
#define TEST_FUNC_PROTOS(TEST_FUNC_PROTOS4,37

doc/swig/test/Matrix.h,82
#define MATRIX_HMATRIX_H2,17
#define TEST_FUNC_PROTOS(TEST_FUNC_PROTOS29,1146

doc/swig/test/Tensor.h,82
#define TENSOR_HTENSOR_H2,17
#define TEST_FUNC_PROTOS(TEST_FUNC_PROTOS29,1197

doc/swig/test/Vector.h,82
#define VECTOR_HVECTOR_H2,17
#define TEST_FUNC_PROTOS(TEST_FUNC_PROTOS33,1226

numpy/core/blasdot/cblas.h,1304
#define CBLAS_HCBLAS_H2,16
#define CBLAS_INDEX CBLAS_INDEX14,166
enum CBLAS_ORDER {CblasRowMajor=101, CblasColMajor=102};CBLAS_ORDER16,233
enum CBLAS_ORDER {CblasRowMajor=101, CblasColMajor=102};CblasRowMajor16,233
enum CBLAS_ORDER {CblasRowMajor=101, CblasColMajor=102};CblasColMajor16,233
enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113};CBLAS_TRANSPOSE17,290
enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113};CblasNoTrans17,290
enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113};CblasTrans17,290
enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113};CblasConjTrans17,290
enum CBLAS_UPLO {CblasUpper=121, CblasLower=122};CBLAS_UPLO18,367
enum CBLAS_UPLO {CblasUpper=121, CblasLower=122};CblasUpper18,367
enum CBLAS_UPLO {CblasUpper=121, CblasLower=122};CblasLower18,367
enum CBLAS_DIAG {CblasNonUnit=131, CblasUnit=132};CBLAS_DIAG19,417
enum CBLAS_DIAG {CblasNonUnit=131, CblasUnit=132};CblasNonUnit19,417
enum CBLAS_DIAG {CblasNonUnit=131, CblasUnit=132};CblasUnit19,417
enum CBLAS_SIDE {CblasLeft=141, CblasRight=142};CBLAS_SIDE20,468
enum CBLAS_SIDE {CblasLeft=141, CblasRight=142};CblasLeft20,468
enum CBLAS_SIDE {CblasLeft=141, CblasRight=142};CblasRight20,468

numpy/core/blasdot/_dotblas.c,1349
static char module_doc[] =module_doc1,0
#define CBLAS_HEADER CBLAS_HEADER7,200
#define Py_TYPE(Py_TYPE14,315
#define Py_REFCNT(Py_REFCNT15,365
#define Py_SIZE(Py_SIZE16,417
static PyArray_DotFunc *oldFunctions[PyArray_NTYPES];oldFunctions19,478
FLOAT_dot(void *a, npy_intp stridea, void *b, npy_intp strideb, void *res,FLOAT_dot22,545
DOUBLE_dot(void *a, npy_intp stridea, void *b, npy_intp strideb, void *res,DOUBLE_dot38,1079
CFLOAT_dot(void *a, npy_intp stridea, void *b, npy_intp strideb, void *res,CFLOAT_dot53,1612
CDOUBLE_dot(void *a, npy_intp stridea, void *b, npy_intp strideb, void *res,CDOUBLE_dot69,2160
static npy_bool altered=NPY_FALSE;altered84,2706
typedef enum {_scalar, _column, _row, _matrix} MatrixShape;_scalar160,4874
typedef enum {_scalar, _column, _row, _matrix} MatrixShape;_column160,4874
typedef enum {_scalar, _column, _row, _matrix} MatrixShape;_row160,4874
typedef enum {_scalar, _column, _row, _matrix} MatrixShape;_matrix160,4874
typedef enum {_scalar, _column, _row, _matrix} MatrixShape;MatrixShape160,4874
_select_matrix_shape(PyArrayObject *array)_select_matrix_shape163,4954
_bad_strides(PyArrayObject *ap)_bad_strides191,5603
static struct PyMethodDef dotblas_module_methods[] = {dotblas_module_methods1168,40982
PyMODINIT_FUNC init_dotblas(void) {init_dotblas1178,41432

numpy/core/include/numpy/arrayobject.h,49
#define Py_ARRAYOBJECT_HPy_ARRAYOBJECT_H13,370

numpy/core/include/numpy/arrayscalars.h,3009
#define _NPY_ARRAYSCALARS_H__NPY_ARRAYSCALARS_H_2,29
        npy_bool obval;obval7,124
} PyBoolScalarObject;PyBoolScalarObject8,148
        signed char obval;obval14,218
} PyByteScalarObject;PyByteScalarObject15,245
        short obval;obval20,308
} PyShortScalarObject;PyShortScalarObject21,329
        int obval;obval26,393
} PyIntScalarObject;PyIntScalarObject27,412
        long obval;obval32,474
} PyLongScalarObject;PyLongScalarObject33,494
        npy_longlong obval;obval38,557
} PyLongLongScalarObject;PyLongLongScalarObject39,585
        unsigned char obval;obval44,652
} PyUByteScalarObject;PyUByteScalarObject45,681
        unsigned short obval;obval50,745
} PyUShortScalarObject;PyUShortScalarObject51,775
        unsigned int obval;obval56,840
} PyUIntScalarObject;PyUIntScalarObject57,868
        unsigned long obval;obval62,931
} PyULongScalarObject;PyULongScalarObject63,960
        npy_ulonglong obval;obval68,1024
} PyULongLongScalarObject;PyULongLongScalarObject69,1053
        float obval;obval74,1121
} PyFloatScalarObject;PyFloatScalarObject75,1142
        double obval;obval80,1206
} PyDoubleScalarObject;PyDoubleScalarObject81,1228
        npy_longdouble obval;obval86,1293
} PyLongDoubleScalarObject;PyLongDoubleScalarObject87,1323
        npy_cfloat obval;obval92,1392
} PyCFloatScalarObject;PyCFloatScalarObject93,1418
        npy_cdouble obval;obval98,1483
} PyCDoubleScalarObject;PyCDoubleScalarObject99,1510
        npy_clongdouble obval;obval104,1576
} PyCLongDoubleScalarObject;PyCLongDoubleScalarObject105,1607
        PyObject * obval;obval110,1677
} PyObjectScalarObject;PyObjectScalarObject111,1703
        npy_datetime obval;obval115,1767
        PyArray_DatetimeMetaData obmeta;obmeta116,1795
} PyDatetimeScalarObject;PyDatetimeScalarObject117,1836
        npy_timedelta obval;obval121,1902
        PyArray_DatetimeMetaData obmeta;obmeta122,1931
} PyTimedeltaScalarObject;PyTimedeltaScalarObject123,1972
        char obval;obval128,2040
} PyScalarObject;PyScalarObject129,2060
#define PyStringScalarObject PyStringScalarObject131,2079
#define PyUnicodeScalarObject PyUnicodeScalarObject132,2123
        char *obval;obval136,2213
        PyArray_Descr *descr;descr137,2234
        int flags;flags138,2264
        PyObject *base;base139,2283
} PyVoidScalarObject;PyVoidScalarObject140,2307
#define PyArrayScalar_False PyArrayScalar_False148,2446
#define PyArrayScalar_True PyArrayScalar_True149,2522
#define PyArrayScalar_FromLong(PyArrayScalar_FromLong150,2597
#define PyArrayScalar_RETURN_BOOL_FROM_LONG(PyArrayScalar_RETURN_BOOL_FROM_LONG152,2696
#define PyArrayScalar_RETURN_FALSE PyArrayScalar_RETURN_FALSE155,2859
#define PyArrayScalar_RETURN_TRUE PyArrayScalar_RETURN_TRUE158,2995
#define PyArrayScalar_New(PyArrayScalar_New162,3131
#define PyArrayScalar_VAL(PyArrayScalar_VAL164,3230
#define PyArrayScalar_ASSIGN(PyArrayScalar_ASSIGN166,3326

numpy/core/include/numpy/fenv/fenv.c,57
const fenv_t npy__fe_dfl_env = {npy__fe_dfl_env32,1432

numpy/core/include/numpy/fenv/fenv.h,1759
#define _FENV_H__FENV_H_30,1407
        __uint32_t      __control;__control36,1489
        __uint32_t      __status;__status37,1524
        __uint32_t      __tag;__tag38,1558
        char            __other[16];__other39,1589
} fenv_t;fenv_t40,1626
typedef __uint16_t      fexcept_t;fexcept_t42,1637
#define FE_INVALID FE_INVALID45,1695
#define FE_DENORMAL FE_DENORMAL46,1724
#define FE_DIVBYZERO FE_DIVBYZERO47,1753
#define FE_OVERFLOW FE_OVERFLOW48,1782
#define FE_UNDERFLOW FE_UNDERFLOW49,1811
#define FE_INEXACT FE_INEXACT50,1840
#define FE_ALL_EXCEPT FE_ALL_EXCEPT51,1869
#define FE_TONEAREST FE_TONEAREST55,2026
#define FE_DOWNWARD FE_DOWNWARD56,2057
#define FE_UPWARD FE_UPWARD57,2088
#define FE_TOWARDZERO FE_TOWARDZERO58,2119
#define _ROUND_MASK _ROUND_MASK59,2150
#define FE_DFL_ENV FE_DFL_ENV66,2356
#define __fldcw(__fldcw68,2400
#define __fldenv(__fldenv69,2476
#define __fnclex(__fnclex70,2554
#define __fnstenv(__fnstenv71,2613
#define __fnstcw(__fnstcw72,2694
#define __fnstsw(__fnstsw73,2773
#define __fwait(__fwait74,2853
feclearexcept(int __excepts)feclearexcept77,2932
fegetexceptflag(fexcept_t *__flagp, int __excepts)fegetexceptflag92,3240
fesetexceptflag(const fexcept_t *__flagp, int __excepts)fesetexceptflag102,3436
feraiseexcept(int __excepts)feraiseexcept114,3699
fetestexcept(int __excepts)fetestexcept124,3872
fegetround(void)fegetround133,4023
fesetround(int __round)fesetround142,4161
fegetenv(fenv_t *__envp)fegetenv156,4442
feholdexcept(fenv_t *__envp)feholdexcept171,4771
fesetenv(const fenv_t *__envp)fesetenv180,4893
feupdateenv(const fenv_t *__envp)feupdateenv188,4997
fesetmask(int __mask)fesetmask201,5230
fegetmask(void)fegetmask212,5457

numpy/core/include/numpy/ndarrayobject.h,3022
#define NPY_NDARRAYOBJECT_HNPY_NDARRAYOBJECT_H6,68
#define CONFUSE_EMACS CONFUSE_EMACS8,115
#define CONFUSE_EMACS2 CONFUSE_EMACS29,139
#undef CONFUSE_EMACSCONFUSE_EMACS11,189
#undef CONFUSE_EMACS2CONFUSE_EMACS212,210
#define PyArray_DescrCheck(PyArray_DescrCheck31,667
#define PyArray_Check(PyArray_Check33,748
#define PyArray_CheckExact(PyArray_CheckExact34,812
#define PyArray_HasArrayInterfaceType(PyArray_HasArrayInterfaceType36,890
#define PyArray_HasArrayInterface(PyArray_HasArrayInterface42,1241
#define PyArray_IsZeroDim(PyArray_IsZeroDim45,1381
#define PyArray_IsScalar(PyArray_IsScalar47,1459
#define PyArray_CheckScalar(PyArray_CheckScalar50,1598
#define PyArray_IsPythonNumber(PyArray_IsPythonNumber53,1733
#define PyArray_IsPythonScalar(PyArray_IsPythonScalar57,1943
#define PyArray_IsAnyScalar(PyArray_IsAnyScalar61,2135
#define PyArray_CheckAnyScalar(PyArray_CheckAnyScalar64,2288
#define PyArray_IsIntegerScalar(PyArray_IsIntegerScalar67,2432
#define PyArray_GETCONTIGUOUS(PyArray_GETCONTIGUOUS72,2645
#define PyArray_SAMESHAPE(PyArray_SAMESHAPE76,2876
#define PyArray_SIZE(PyArray_SIZE81,3191
#define PyArray_NBYTES(PyArray_NBYTES82,3270
#define PyArray_FROM_O(PyArray_FROM_O83,3336
#define PyArray_FROM_OF(PyArray_FROM_OF85,3403
#define PyArray_FROM_OT(PyArray_FROM_OT88,3544
#define PyArray_FROM_OTF(PyArray_FROM_OTF91,3702
#define PyArray_FROMANY(PyArray_FROMANY96,4010
#define PyArray_ZEROS(PyArray_ZEROS101,4316
#define PyArray_EMPTY(PyArray_EMPTY104,4466
#define PyArray_FILLWBYTE(PyArray_FILLWBYTE107,4616
#define PyArray_REFCOUNT(PyArray_REFCOUNT110,4761
#define NPY_REFCOUNT NPY_REFCOUNT111,4824
#define NPY_MAX_ELSIZE NPY_MAX_ELSIZE112,4862
#define PyArray_ContiguousFromAny(PyArray_ContiguousFromAny114,4914
#define PyArray_EquivArrTypes(PyArray_EquivArrTypes118,5135
#define PyArray_EquivByteorders(PyArray_EquivByteorders121,5281
#define PyArray_SimpleNew(PyArray_SimpleNew124,5431
#define PyArray_SimpleNewFromData(PyArray_SimpleNewFromData127,5590
#define PyArray_SimpleNewFromDescr(PyArray_SimpleNewFromDescr131,5798
#define PyArray_ToScalar(PyArray_ToScalar135,6009
#define PyArray_GETPTR1(PyArray_GETPTR1144,6346
#define PyArray_GETPTR2(PyArray_GETPTR2147,6498
#define PyArray_GETPTR3(PyArray_GETPTR3151,6733
#define PyArray_GETPTR4(PyArray_GETPTR4156,7048
#define PyArray_XDECREF_ERR(PyArray_XDECREF_ERR162,7443
#define PyArray_DESCR_REPLACE(PyArray_DESCR_REPLACE169,7823
#define PyArray_Copy(PyArray_Copy177,8292
#define PyArray_FromObject(PyArray_FromObject179,8352
#define PyArray_ContiguousFromObject(PyArray_ContiguousFromObject183,8591
#define PyArray_CopyFromObject(PyArray_CopyFromObject187,8830
#define PyArray_Cast(PyArray_Cast192,9118
#define PyArray_Take(PyArray_Take195,9266
#define PyArray_Put(PyArray_Put198,9406
#define PyArray_FromDimsAndData(PyArray_FromDimsAndData203,9608
#define NPY_TITLE_KEY(NPY_TITLE_KEY215,9989
#define DEPRECATE(DEPRECATE222,10230

numpy/core/include/numpy/ndarraytypes.h,32906
#define NDARRAYTYPES_HNDARRAYTYPES_H2,23
        #define NPY_NO_EXPORT NPY_NO_EXPORT12,226
        #define NPY_NO_EXPORT NPY_NO_EXPORT14,284
        #define NPY_ALLOW_THREADS NPY_ALLOW_THREADS19,437
        #define NPY_ALLOW_THREADS NPY_ALLOW_THREADS21,479
#define NPY_MAXDIMS NPY_MAXDIMS36,876
#define NPY_MAXARGS NPY_MAXARGS37,899
#define NPY_FAIL NPY_FAIL40,982
#define NPY_SUCCEED NPY_SUCCEED41,1001
#define NPY_VERSION NPY_VERSION48,1233
#define NPY_FEATURE_VERSION NPY_FEATURE_VERSION59,1752
enum NPY_TYPES {    NPY_BOOL=0,NPY_TYPES61,1797
enum NPY_TYPES {    NPY_BOOL=0,NPY_BOOL61,1797
                    NPY_BYTE, NPY_UBYTE,NPY_BYTE62,1829
                    NPY_BYTE, NPY_UBYTE,NPY_UBYTE62,1829
                    NPY_SHORT, NPY_USHORT,NPY_SHORT63,1870
                    NPY_SHORT, NPY_USHORT,NPY_USHORT63,1870
                    NPY_INT, NPY_UINT,NPY_INT64,1913
                    NPY_INT, NPY_UINT,NPY_UINT64,1913
                    NPY_LONG, NPY_ULONG,NPY_LONG65,1952
                    NPY_LONG, NPY_ULONG,NPY_ULONG65,1952
                    NPY_LONGLONG, NPY_ULONGLONG,NPY_LONGLONG66,1993
                    NPY_LONGLONG, NPY_ULONGLONG,NPY_ULONGLONG66,1993
                    NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE,NPY_FLOAT67,2042
                    NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE,NPY_DOUBLE67,2042
                    NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE,NPY_LONGDOUBLE67,2042
                    NPY_CFLOAT, NPY_CDOUBLE, NPY_CLONGDOUBLE,NPY_CFLOAT68,2101
                    NPY_CFLOAT, NPY_CDOUBLE, NPY_CLONGDOUBLE,NPY_CDOUBLE68,2101
                    NPY_CFLOAT, NPY_CDOUBLE, NPY_CLONGDOUBLE,NPY_CLONGDOUBLE68,2101
                    NPY_DATETIME, NPY_TIMEDELTA,NPY_DATETIME69,2163
                    NPY_DATETIME, NPY_TIMEDELTA,NPY_TIMEDELTA69,2163
                    NPY_OBJECT=19,NPY_OBJECT70,2212
                    NPY_STRING, NPY_UNICODE,NPY_STRING71,2247
                    NPY_STRING, NPY_UNICODE,NPY_UNICODE71,2247
                    NPY_VOID,NPY_VOID72,2292
                    NPY_NTYPES,NPY_NTYPES73,2322
                    NPY_NOTYPE,NPY_NOTYPE74,2354
                    NPY_CHAR,      /* special flag */NPY_CHAR75,2386
                    NPY_USERDEF=256  /* leave room for characters */NPY_USERDEF76,2440
#define NPY_METADATA_DTSTR NPY_METADATA_DTSTR79,2513
#define NPY_PRIORITY NPY_PRIORITY82,2587
#define NPY_SUBTYPE_PRIORITY NPY_SUBTYPE_PRIORITY85,2644
#define NPY_SCALAR_PRIORITY NPY_SCALAR_PRIORITY88,2708
#define NPY_NUM_FLOATTYPE NPY_NUM_FLOATTYPE91,2794
enum NPY_TYPECHAR { NPY_BOOLLTR = '?',NPY_TYPECHAR106,3105
enum NPY_TYPECHAR { NPY_BOOLLTR = '?',NPY_BOOLLTR106,3105
                        NPY_BYTELTR = 'b',NPY_BYTELTR107,3144
                        NPY_UBYTELTR = 'B',NPY_UBYTELTR108,3187
                        NPY_SHORTLTR = 'h',NPY_SHORTLTR109,3231
                        NPY_USHORTLTR = 'H',NPY_USHORTLTR110,3275
                        NPY_INTLTR = 'i',NPY_INTLTR111,3320
                        NPY_UINTLTR = 'I',NPY_UINTLTR112,3362
                        NPY_LONGLTR = 'l',NPY_LONGLTR113,3405
                        NPY_ULONGLTR = 'L',NPY_ULONGLTR114,3448
                        NPY_LONGLONGLTR = 'q',NPY_LONGLONGLTR115,3492
                        NPY_ULONGLONGLTR = 'Q',NPY_ULONGLONGLTR116,3539
                        NPY_FLOATLTR = 'f',NPY_FLOATLTR117,3587
                        NPY_DOUBLELTR = 'd',NPY_DOUBLELTR118,3631
                        NPY_LONGDOUBLELTR = 'g',NPY_LONGDOUBLELTR119,3676
                        NPY_CFLOATLTR = 'F',NPY_CFLOATLTR120,3725
                        NPY_CDOUBLELTR = 'D',NPY_CDOUBLELTR121,3770
                        NPY_CLONGDOUBLELTR = 'G',NPY_CLONGDOUBLELTR122,3816
                        NPY_OBJECTLTR = 'O',NPY_OBJECTLTR123,3866
                        NPY_STRINGLTR = 'S',NPY_STRINGLTR124,3911
                        NPY_STRINGLTR2 = 'a',NPY_STRINGLTR2125,3956
                        NPY_UNICODELTR = 'U',NPY_UNICODELTR126,4002
                        NPY_VOIDLTR = 'V',NPY_VOIDLTR127,4048
                        NPY_DATETIMELTR = 'M',NPY_DATETIMELTR128,4091
                        NPY_TIMEDELTALTR = 'm',NPY_TIMEDELTALTR129,4138
                        NPY_CHARLTR = 'c',NPY_CHARLTR130,4186
                        NPY_INTPLTR = 'p',NPY_INTPLTR138,4525
                        NPY_UINTPLTR = 'P',NPY_UINTPLTR139,4568
                        NPY_GENBOOLLTR ='b',NPY_GENBOOLLTR141,4613
                        NPY_SIGNEDLTR = 'i',NPY_SIGNEDLTR142,4658
                        NPY_UNSIGNEDLTR = 'u',NPY_UNSIGNEDLTR143,4703
                        NPY_FLOATINGLTR = 'f',NPY_FLOATINGLTR144,4750
                        NPY_COMPLEXLTR = 'c'NPY_COMPLEXLTR145,4797
        NPY_QUICKSORT=0,NPY_QUICKSORT149,4861
        NPY_HEAPSORT=1,NPY_HEAPSORT150,4886
        NPY_MERGESORT=2NPY_MERGESORT151,4910
} NPY_SORTKIND;NPY_SORTKIND152,4934
#define NPY_NSORTS NPY_NSORTS153,4950
        NPY_SEARCHLEFT=0,NPY_SEARCHLEFT157,5006
        NPY_SEARCHRIGHT=1NPY_SEARCHRIGHT158,5032
} NPY_SEARCHSIDE;NPY_SEARCHSIDE159,5058
#define NPY_NSEARCHSIDES NPY_NSEARCHSIDES160,5076
        NPY_NOSCALAR=-1,NPY_NOSCALAR164,5140
        NPY_BOOL_SCALAR,NPY_BOOL_SCALAR165,5165
        NPY_INTPOS_SCALAR,NPY_INTPOS_SCALAR166,5190
        NPY_INTNEG_SCALAR,NPY_INTNEG_SCALAR167,5217
        NPY_FLOAT_SCALAR,NPY_FLOAT_SCALAR168,5244
        NPY_COMPLEX_SCALAR,NPY_COMPLEX_SCALAR169,5270
        NPY_OBJECT_SCALARNPY_OBJECT_SCALAR170,5298
} NPY_SCALARKIND;NPY_SCALARKIND171,5324
#define NPY_NSCALARKINDS NPY_NSCALARKINDS172,5342
        NPY_ANYORDER=-1,NPY_ANYORDER175,5407
        NPY_CORDER=0,NPY_CORDER176,5432
        NPY_FORTRANORDER=1NPY_FORTRANORDER177,5454
} NPY_ORDER;NPY_ORDER178,5481
        NPY_CLIP=0,NPY_CLIP182,5511
        NPY_WRAP=1,NPY_WRAP183,5531
        NPY_RAISE=2NPY_RAISE184,5551
} NPY_CLIPMODE;NPY_CLIPMODE185,5571
        NPY_FR_Y,NPY_FR_Y188,5603
        NPY_FR_M,NPY_FR_M189,5621
        NPY_FR_W,NPY_FR_W190,5639
        NPY_FR_B,NPY_FR_B191,5657
        NPY_FR_D,NPY_FR_D192,5675
        NPY_FR_h,NPY_FR_h193,5693
        NPY_FR_m,NPY_FR_m194,5711
        NPY_FR_s,NPY_FR_s195,5729
        NPY_FR_ms,NPY_FR_ms196,5747
        NPY_FR_us,NPY_FR_us197,5766
        NPY_FR_ns,NPY_FR_ns198,5785
        NPY_FR_ps,NPY_FR_ps199,5804
        NPY_FR_fs,NPY_FR_fs200,5823
        NPY_FR_asNPY_FR_as201,5842
} NPY_DATETIMEUNIT;NPY_DATETIMEUNIT202,5860
#define NPY_DATETIME_NUMUNITS NPY_DATETIME_NUMUNITS204,5881
#define NPY_DATETIME_DEFAULTUNIT NPY_DATETIME_DEFAULTUNIT205,5927
#define NPY_STR_Y NPY_STR_Y207,5971
#define NPY_STR_M NPY_STR_M208,5993
#define NPY_STR_W NPY_STR_W209,6015
#define NPY_STR_B NPY_STR_B210,6037
#define NPY_STR_D NPY_STR_D211,6059
#define NPY_STR_h NPY_STR_h212,6081
#define NPY_STR_m NPY_STR_m213,6103
#define NPY_STR_s NPY_STR_s214,6125
#define NPY_STR_ms NPY_STR_ms215,6147
#define NPY_STR_us NPY_STR_us216,6171
#define NPY_STR_ns NPY_STR_ns217,6195
#define NPY_STR_ps NPY_STR_ps218,6219
#define NPY_STR_fs NPY_STR_fs219,6243
#define NPY_STR_as NPY_STR_as220,6267
typedef Py_intptr_t npy_intp;npy_intp227,6437
typedef Py_uintptr_t npy_uintp;npy_uintp228,6467
#define NPY_SIZEOF_INTP NPY_SIZEOF_INTP229,6499
#define NPY_SIZEOF_UINTP NPY_SIZEOF_UINTP230,6546
#undef constcharconstchar233,6612
    typedef int Py_ssize_t;Py_ssize_t238,6696
    #define PY_SSIZE_T_MAX PY_SSIZE_T_MAX239,6724
    #define PY_SSIZE_T_MIN PY_SSIZE_T_MIN240,6759
#define NPY_SSIZE_T_PYFMT NPY_SSIZE_T_PYFMT242,6803
#undef PyIndex_CheckPyIndex_Check243,6833
#define constchar constchar244,6854
#define PyIndex_Check(PyIndex_Check245,6883
#define NPY_SSIZE_T_PYFMT NPY_SSIZE_T_PYFMT247,6917
#define constchar constchar248,6947
        #define NPY_INTP NPY_INTP252,7023
        #define NPY_UINTP NPY_UINTP253,7056
        #define PyIntpArrType_Type PyIntpArrType_Type254,7091
        #define PyUIntpArrType_Type PyUIntpArrType_Type255,7144
        #define NPY_MAX_INTP NPY_MAX_INTP256,7199
        #define NPY_MIN_INTP NPY_MIN_INTP257,7240
        #define NPY_MAX_UINTP NPY_MAX_UINTP258,7281
        #define NPY_INTP_FMT NPY_INTP_FMT259,7324
        #define NPY_INTP NPY_INTP261,7405
        #define NPY_UINTP NPY_UINTP262,7439
        #define PyIntpArrType_Type PyIntpArrType_Type263,7475
        #define PyUIntpArrType_Type PyUIntpArrType_Type264,7529
        #define NPY_MAX_INTP NPY_MAX_INTP265,7585
        #define NPY_MIN_INTP NPY_MIN_INTP266,7627
        #define NPY_MAX_UINTP NPY_MAX_UINTP267,7665
        #define NPY_INTP_FMT NPY_INTP_FMT268,7709
        #define NPY_INTP NPY_INTP270,7822
        #define NPY_UINTP NPY_UINTP271,7860
        #define PyIntpArrType_Type PyIntpArrType_Type272,7900
        #define PyUIntpArrType_Type PyUIntpArrType_Type273,7958
        #define NPY_MAX_INTP NPY_MAX_INTP274,8018
        #define NPY_MIN_INTP NPY_MIN_INTP275,8064
        #define NPY_MAX_UINTP NPY_MAX_UINTP276,8110
        #define NPY_INTP_FMT NPY_INTP_FMT277,8158
        #undef NPY_INTP_FMTNPY_INTP_FMT288,8460
        #define NPY_INTP_FMT NPY_INTP_FMT289,8488
#define NPY_ERR(NPY_ERR292,8533
#define NPY_ERR2(NPY_ERR2293,8593
#define NPY_STRINGIFY(NPY_STRINGIFY295,8654
#define NPY_TOSTRING(NPY_TOSTRING296,8682
#define PyDataMem_NEW(PyDataMem_NEW304,8835
#define PyDataMem_FREE(PyDataMem_FREE305,8886
#define PyDataMem_RENEW(PyDataMem_RENEW306,8925
#define NPY_USE_PYMEM NPY_USE_PYMEM308,8988
#define PyArray_malloc PyArray_malloc311,9036
#define PyArray_free PyArray_free312,9072
#define PyArray_realloc PyArray_realloc313,9104
#define PyArray_malloc PyArray_malloc315,9148
#define PyArray_free PyArray_free316,9178
#define PyArray_realloc PyArray_realloc317,9204
#define PyDimMem_NEW(PyDimMem_NEW321,9273
#define PyDimMem_FREE(PyDimMem_FREE324,9399
#define PyDimMem_RENEW(PyDimMem_RENEW326,9445
typedef PyObject * (PyArray_GetItemFunc) (void *, void *);PyArray_GetItemFunc333,9697
typedef int (PyArray_SetItemFunc)(PyObject *, void *, void *);PyArray_SetItemFunc334,9756
typedef void (PyArray_CopySwapNFunc)(void *, npy_intp, void *, npy_intp,PyArray_CopySwapNFunc336,9820
typedef void (PyArray_CopySwapFunc)(void *, void *, int, void *);PyArray_CopySwapFunc339,9955
typedef npy_bool (PyArray_NonzeroFunc)(void *, void *);PyArray_NonzeroFunc340,10021
typedef int (PyArray_CompareFunc)(const void *, const void *, void *);PyArray_CompareFunc348,10202
typedef int (PyArray_ArgFunc)(void*, npy_intp, npy_intp*, void *);PyArray_ArgFunc349,10273
typedef void (PyArray_DotFunc)(void *, npy_intp, void *, npy_intp, void *,PyArray_DotFunc351,10341
typedef void (PyArray_VectorUnaryFunc)(void *, void *, npy_intp, void *,PyArray_VectorUnaryFunc354,10467
typedef int (PyArray_ScanFunc)(FILE *fp, void *dptr,PyArray_ScanFunc361,10710
typedef int (PyArray_FromStrFunc)(char *s, void *dptr, char **endptr,PyArray_FromStrFunc363,10834
typedef int (PyArray_FillFunc)(void *, npy_intp, void *);PyArray_FillFunc366,10965
typedef int (PyArray_SortFunc)(void *, npy_intp, void *);PyArray_SortFunc368,11024
typedef int (PyArray_ArgSortFunc)(void *, npy_intp *, npy_intp, void *);PyArray_ArgSortFunc369,11082
typedef int (PyArray_FillWithScalarFunc)(void *, npy_intp, void *, void *);PyArray_FillWithScalarFunc371,11156
typedef int (PyArray_ScalarKindFunc)(void *);PyArray_ScalarKindFunc373,11233
typedef void (PyArray_FastClipFunc)(void *in, npy_intp n_in, void *min,PyArray_FastClipFunc375,11280
typedef void (PyArray_FastPutmaskFunc)(void *in, void *mask, npy_intp n_in,PyArray_FastPutmaskFunc377,11411
typedef int  (PyArray_FastTakeFunc)(void *dest, void *src, npy_intp *indarray,PyArray_FastTakeFunc379,11554
        npy_intp *ptr;ptr385,11865
        int len;len386,11888
} PyArray_Dims;PyArray_Dims387,11905
        PyArray_GetItemFunc *getitem;getitem396,12119
        PyArray_SetItemFunc *setitem;setitem397,12157
        PyArray_CopySwapNFunc *copyswapn;copyswapn403,12326
        PyArray_CopySwapFunc *copyswap;copyswap404,12368
        PyArray_CompareFunc *compare;compare410,12492
        PyArray_ArgFunc *argmax;argmax416,12615
        PyArray_DotFunc *dotfunc;dotfunc422,12738
        PyArray_ScanFunc *scanfunc;scanfunc429,12921
        PyArray_FromStrFunc *fromstr;fromstr435,13085
        PyArray_NonzeroFunc *nonzero;nonzero442,13281
        PyArray_FillFunc *fill;fill448,13395
        PyArray_FillWithScalarFunc *fillwithscalar;fillwithscalar454,13528
        PyArray_SortFunc *sort[NPY_NSORTS];sort460,13656
        PyArray_ArgSortFunc *argsort[NPY_NSORTS];argsort461,13700
        PyObject *castdict;castdict469,13967
        PyArray_ScalarKindFunc *scalarkind;scalarkind476,14118
        int **cancastscalarkindto;cancastscalarkindto477,14162
        int *cancastto;cancastto478,14197
        PyArray_FastClipFunc *fastclip;fastclip480,14222
        PyArray_FastPutmaskFunc *fastputmask;fastputmask481,14262
        PyArray_FastTakeFunc *fasttake;fasttake482,14308
        void *pad1;pad1488,14477
        void *pad2;pad2489,14497
        void *pad3;pad3490,14517
        void *pad4;pad4491,14537
        PyArray_VectorUnaryFunc *cast[NPY_NTYPES];cast497,14676
} PyArray_ArrFuncs;PyArray_ArrFuncs499,14728
#define NPY_ITEM_REFCOUNT NPY_ITEM_REFCOUNT502,14824
#define NPY_ITEM_HASOBJECT NPY_ITEM_HASOBJECT504,14888
#define NPY_LIST_PICKLE NPY_LIST_PICKLE506,14956
#define NPY_ITEM_IS_POINTER NPY_ITEM_IS_POINTER508,15018
#define NPY_NEEDS_INIT NPY_NEEDS_INIT510,15107
#define NPY_NEEDS_PYAPI NPY_NEEDS_PYAPI512,15200
#define NPY_USE_GETITEM NPY_USE_GETITEM514,15296
#define NPY_USE_SETITEM NPY_USE_SETITEM516,15401
#define NPY_FROM_FIELDS NPY_FROM_FIELDS523,15557
#define NPY_OBJECT_DTYPE_FLAGS NPY_OBJECT_DTYPE_FLAGS526,15700
#define PyDataType_FLAGCHK(PyDataType_FLAGCHK530,15919
#define PyDataType_REFCHK(PyDataType_REFCHK533,16042
typedef struct _PyArray_Descr {_PyArray_Descr536,16172
        PyTypeObject *typeobj;  /*typeobj538,16226
        char kind;              /* kind for this type */kind544,16552
        char type;              /* unique-character representing this type */type545,16609
        char byteorder;         /*byteorder546,16687
        char unused;unused550,16892
        int flags;              /* flag describing data type */flags551,16913
        int type_num;           /* number representing this type */type_num552,16977
        int elsize;             /* element size for this type */elsize553,17045
        int alignment;          /* alignment needed for this type */alignment554,17110
        *subarray;              /*subarray556,17245
        PyObject *fields;       /* The fields dictionary for this typefields561,17492
        PyObject *names;        /*names566,17722
        PyArray_ArrFuncs *f;     /*f571,17929
        PyObject *metadata;     /* Metadata about this dtype */metadata576,18136
} PyArray_Descr;PyArray_Descr577,18200
typedef struct _arr_descr {_arr_descr579,18218
        PyArray_Descr *base;base580,18246
        PyObject *shape;       /* a tuple */shape581,18275
} PyArray_ArrayDescr;PyArray_ArrayDescr582,18320
typedef struct PyArrayObject {PyArrayObject590,18525
        char *data;             /* pointer to raw data buffer */data592,18578
        int nd;                 /* number of dimensions, also called ndim */nd593,18643
        npy_intp *dimensions;   /* size in each dimension */dimensions594,18720
        npy_intp *strides;      /*strides595,18781
        PyObject *base;         /*base599,18981
        PyArray_Descr *descr;   /* Pointer to type structure */descr614,19772
        int flags;              /* Flags describing array -- see below */flags615,19836
        PyObject *weakreflist;  /* For weakreferences */weakreflist616,19910
} PyArrayObject;PyArrayObject617,19967
#define NPY_AO NPY_AO619,19985
#define fortran fortran621,20015
typedef struct PyArrayFlagsObject {PyArrayFlagsObject624,20098
        PyObject *arr;arr626,20156
        int flags;flags627,20179
} PyArrayFlagsObject;PyArrayFlagsObject628,20198
        PyObject *base;base634,20296
        void *ptr;ptr635,20320
        npy_intp len;len636,20339
        int flags;flags637,20361
} PyArray_Chunk;PyArray_Chunk638,20380
        NPY_DATETIMEUNIT base;base642,20416
        int num;num643,20447
        int den;      /*den644,20464
        int events;events648,20624
} PyArray_DatetimeMetaData;PyArray_DatetimeMetaData649,20644
        npy_longlong year;year652,20690
        int month, day, hour, min, sec, us, ps, as;month653,20717
        int month, day, hour, min, sec, us, ps, as;day653,20717
        int month, day, hour, min, sec, us, ps, as;hour653,20717
        int month, day, hour, min, sec, us, ps, as;min653,20717
        int month, day, hour, min, sec, us, ps, as;sec653,20717
        int month, day, hour, min, sec, us, ps, as;us653,20717
        int month, day, hour, min, sec, us, ps, as;ps653,20717
        int month, day, hour, min, sec, us, ps, as;as653,20717
} npy_datetimestruct;npy_datetimestruct654,20769
        npy_longlong day;day657,20809
        int sec, us, ps, as;sec658,20835
        int sec, us, ps, as;us658,20835
        int sec, us, ps, as;ps658,20835
        int sec, us, ps, as;as658,20835
} npy_timedeltastruct;npy_timedeltastruct659,20864
#define PyDataType_GetDatetimeMetaData(PyDataType_GetDatetimeMetaData662,20921
#define PyDataType_GetDatetimeMetaData(PyDataType_GetDatetimeMetaData668,21314
typedef int (PyArray_FinalizeFunc)(PyArrayObject *, PyObject *);PyArray_FinalizeFunc674,21640
#define NPY_CONTIGUOUS NPY_CONTIGUOUS680,21819
#define NPY_FORTRAN NPY_FORTRAN687,22007
#define NPY_C_CONTIGUOUS NPY_C_CONTIGUOUS689,22041
#define NPY_F_CONTIGUOUS NPY_F_CONTIGUOUS690,22081
#define NPY_OWNDATA NPY_OWNDATA701,22343
#define NPY_FORCECAST NPY_FORCECAST709,22572
#define NPY_ENSURECOPY NPY_ENSURECOPY715,22705
#define NPY_ENSUREARRAY NPY_ENSUREARRAY718,22798
#define NPY_ELEMENTSTRIDES NPY_ELEMENTSTRIDES724,22952
#define NPY_ALIGNED NPY_ALIGNED732,23224
#define NPY_NOTSWAPPED NPY_NOTSWAPPED735,23301
#define NPY_WRITEABLE NPY_WRITEABLE738,23365
#define NPY_UPDATEIFCOPY NPY_UPDATEIFCOPY745,23588
#define NPY_ARR_HAS_DESCR NPY_ARR_HAS_DESCR748,23665
#define NPY_BEHAVED NPY_BEHAVED751,23701
#define NPY_BEHAVED_NS NPY_BEHAVED_NS752,23751
#define NPY_CARRAY NPY_CARRAY753,23821
#define NPY_CARRAY_RO NPY_CARRAY_RO754,23871
#define NPY_FARRAY NPY_FARRAY755,23924
#define NPY_FARRAY_RO NPY_FARRAY_RO756,23971
#define NPY_DEFAULT NPY_DEFAULT757,24021
#define NPY_IN_ARRAY NPY_IN_ARRAY758,24052
#define NPY_OUT_ARRAY NPY_OUT_ARRAY759,24087
#define NPY_INOUT_ARRAY NPY_INOUT_ARRAY760,24120
#define NPY_IN_FARRAY NPY_IN_FARRAY761,24176
#define NPY_OUT_FARRAY NPY_OUT_FARRAY762,24212
#define NPY_INOUT_FARRAY NPY_INOUT_FARRAY763,24246
#define NPY_UPDATE_ALL NPY_UPDATE_ALL765,24304
#define NPY_MIN_BUFSIZE NPY_MIN_BUFSIZE772,24523
#define NPY_MAX_BUFSIZE NPY_MAX_BUFSIZE773,24570
#define NPY_BUFSIZE NPY_BUFSIZE774,24627
#define PyArray_MAX(PyArray_MAX777,24682
#define PyArray_MIN(PyArray_MIN778,24727
#define PyArray_CLT(PyArray_CLT779,24772
#define PyArray_CGT(PyArray_CGT781,24903
#define PyArray_CLE(PyArray_CLE783,25034
#define PyArray_CGE(PyArray_CGE785,25167
#define PyArray_CEQ(PyArray_CEQ787,25300
#define PyArray_CNE(PyArray_CNE788,25374
#define PyArray_CHKFLAGS(PyArray_CHKFLAGS796,25535
#define PyArray_ISCONTIGUOUS(PyArray_ISCONTIGUOUS799,25665
#define PyArray_ISWRITEABLE(PyArray_ISWRITEABLE800,25733
#define PyArray_ISALIGNED(PyArray_ISALIGNED801,25799
#define NPY_BEGIN_ALLOW_THREADS NPY_BEGIN_ALLOW_THREADS805,25885
#define NPY_END_ALLOW_THREADS NPY_END_ALLOW_THREADS806,25940
#define NPY_BEGIN_THREADS_DEF NPY_BEGIN_THREADS_DEF807,25991
#define NPY_BEGIN_THREADS NPY_BEGIN_THREADS808,26048
#define NPY_END_THREADS NPY_END_THREADS809,26103
#define NPY_BEGIN_THREADS_DESCR(NPY_BEGIN_THREADS_DESCR811,26186
#define NPY_END_THREADS_DESCR(NPY_END_THREADS_DESCR815,26370
#define NPY_ALLOW_C_API_DEF NPY_ALLOW_C_API_DEF819,26553
#define NPY_ALLOW_C_API NPY_ALLOW_C_API820,26609
#define NPY_DISABLE_C_API NPY_DISABLE_C_API821,26670
#define NPY_BEGIN_ALLOW_THREADSNPY_BEGIN_ALLOW_THREADS823,26735
#define NPY_END_ALLOW_THREADSNPY_END_ALLOW_THREADS824,26767
#define NPY_BEGIN_THREADS_DEFNPY_BEGIN_THREADS_DEF825,26797
#define NPY_BEGIN_THREADSNPY_BEGIN_THREADS826,26827
#define NPY_END_THREADSNPY_END_THREADS827,26853
#define NPY_BEGIN_THREADS_DESCR(NPY_BEGIN_THREADS_DESCR828,26877
#define NPY_END_THREADS_DESCR(NPY_END_THREADS_DESCR829,26916
#define NPY_ALLOW_C_API_DEFNPY_ALLOW_C_API_DEF830,26953
#define NPY_ALLOW_C_APINPY_ALLOW_C_API831,26981
#define NPY_DISABLE_C_APINPY_DISABLE_C_API832,27005
typedef struct PyArrayIterObject_tag PyArrayIterObject;PyArrayIterObject840,27150
typedef char* (*npy_iter_get_dataptr_t)(PyArrayIterObject* iter, npy_intp*);npy_iter_get_dataptr_t846,27304
struct PyArrayIterObject_tag {PyArrayIterObject_tag848,27382
        int               nd_m1;            /* number of dimensions - 1 */nd_m1850,27435
        npy_intp          index, size;index851,27510
        npy_intp          index, size;size851,27510
        npy_intp          coordinates[NPY_MAXDIMS];/* N-dimensional loop */coordinates852,27549
        npy_intp          dims_m1[NPY_MAXDIMS];    /* ao->dimensions - 1 */dims_m1853,27625
        npy_intp          strides[NPY_MAXDIMS];    /* ao->strides or fake */strides854,27701
        npy_intp          backstrides[NPY_MAXDIMS];/* how far to jump back */backstrides855,27778
        npy_intp          factors[NPY_MAXDIMS];     /* shape factors */factors856,27856
        PyArrayObject     *ao;ao857,27928
        char              *dataptr;        /* pointer to current item*/dataptr858,27959
        npy_bool          contiguous;contiguous859,28031
        npy_intp          bounds[NPY_MAXDIMS][2];bounds861,28070
        npy_intp          limits[NPY_MAXDIMS][2];limits862,28120
        npy_intp          limits_sizes[NPY_MAXDIMS];limits_sizes863,28170
        npy_iter_get_dataptr_t translate;translate864,28223
#define PyArrayIter_Check(PyArrayIter_Check869,28290
#define _PyAIT(_PyAIT871,28363
#define PyArray_ITER_RESET(PyArray_ITER_RESET872,28410
#define _PyArray_ITER_NEXT1(_PyArray_ITER_NEXT1879,28783
#define _PyArray_ITER_NEXT2(_PyArray_ITER_NEXT2884,29008
#define _PyArray_ITER_NEXT3(_PyArray_ITER_NEXT3897,29825
#define PyArray_ITER_NEXT(PyArray_ITER_NEXT918,31234
#define PyArray_ITER_GOTO(PyArray_ITER_GOTO947,33316
#define PyArray_ITER_GOTO1D(PyArray_ITER_GOTO1D966,34577
#define PyArray_ITER_DATA(PyArray_ITER_DATA990,36274
#define PyArray_ITER_NOTDONE(PyArray_ITER_NOTDONE992,36337
        int                  numiter;                 /* number of iters */numiter1002,36550
        npy_intp             size;                    /* broadcasted size */size1003,36626
        npy_intp             index;                   /* current index */index1004,36703
        int                  nd;                      /* number of dims */nd1005,36777
        npy_intp             dimensions[NPY_MAXDIMS]; /* dimensions */dimensions1006,36852
        PyArrayIterObject    *iters[NPY_MAXARGS];     /* iterators */iters1007,36923
} PyArrayMultiIterObject;PyArrayMultiIterObject1008,36993
#define _PyMIT(_PyMIT1010,37020
#define PyArray_MultiIter_RESET(PyArray_MultiIter_RESET1011,37070
#define PyArray_MultiIter_NEXT(PyArray_MultiIter_NEXT1019,37553
#define PyArray_MultiIter_GOTO(PyArray_MultiIter_GOTO1027,38036
#define PyArray_MultiIter_GOTO1D(PyArray_MultiIter_GOTO1D1035,38507
#define PyArray_MultiIter_DATA(PyArray_MultiIter_DATA1043,38972
#define PyArray_MultiIter_NEXTi(PyArray_MultiIter_NEXTi1046,39084
#define PyArray_MultiIter_NOTDONE(PyArray_MultiIter_NOTDONE1049,39194
        int                   numiter;                 /* number of index-arraynumiter1061,39552
        npy_intp              size;                    /* size of broadcastedsize1063,39703
        npy_intp              index;                   /* current index */index1065,39849
        int                   nd;                      /* number of dims */nd1066,39924
        npy_intp              dimensions[NPY_MAXDIMS]; /* dimensions */dimensions1067,40000
        PyArrayIterObject     *iters[NPY_MAXDIMS];     /* index objectiters1068,40072
        PyArrayIterObject     *ait;                    /* flat Iterator forait1070,40214
        PyArrayIterObject     *subspace;subspace1074,40430
        int                   iteraxes[NPY_MAXDIMS];iteraxes1080,40628
        npy_intp              bscoord[NPY_MAXDIMS];bscoord1085,40809
        PyObject              *indexobj;               /* creating obj */indexobj1087,40862
        int                   consec;consec1088,40936
        char                  *dataptr;dataptr1089,40974
} PyArrayMapIterObject;PyArrayMapIterObject1091,41015
    NPY_NEIGHBORHOOD_ITER_ZERO_PADDING,NPY_NEIGHBORHOOD_ITER_ZERO_PADDING1094,41047
    NPY_NEIGHBORHOOD_ITER_ONE_PADDING,NPY_NEIGHBORHOOD_ITER_ONE_PADDING1095,41087
    NPY_NEIGHBORHOOD_ITER_CONSTANT_PADDING,NPY_NEIGHBORHOOD_ITER_CONSTANT_PADDING1096,41126
    NPY_NEIGHBORHOOD_ITER_CIRCULAR_PADDING,NPY_NEIGHBORHOOD_ITER_CIRCULAR_PADDING1097,41170
    NPY_NEIGHBORHOOD_ITER_MIRROR_PADDINGNPY_NEIGHBORHOOD_ITER_MIRROR_PADDING1098,41214
    int               nd_m1;            /* number of dimensions - 1 */nd_m11107,41371
    npy_intp          index, size;index1108,41442
    npy_intp          index, size;size1108,41442
    npy_intp          coordinates[NPY_MAXDIMS];/* N-dimensional loop */coordinates1109,41477
    npy_intp          dims_m1[NPY_MAXDIMS];    /* ao->dimensions - 1 */dims_m11110,41549
    npy_intp          strides[NPY_MAXDIMS];    /* ao->strides or fake */strides1111,41621
    npy_intp          backstrides[NPY_MAXDIMS];/* how far to jump back */backstrides1112,41694
    npy_intp          factors[NPY_MAXDIMS];     /* shape factors */factors1113,41768
    PyArrayObject     *ao;ao1114,41836
    char              *dataptr;        /* pointer to current item*/dataptr1115,41863
    npy_bool          contiguous;contiguous1116,41931
    npy_intp          bounds[NPY_MAXDIMS][2];bounds1118,41966
    npy_intp          limits[NPY_MAXDIMS][2];limits1119,42012
    npy_intp          limits_sizes[NPY_MAXDIMS];limits_sizes1120,42058
    npy_iter_get_dataptr_t translate;translate1121,42107
    npy_intp nd;nd1126,42180
    npy_intp dimensions[NPY_MAXDIMS];dimensions1129,42249
    PyArrayIterObject* _internal_iter;_internal_iter1135,42412
    char* constant;constant1140,42565
    int mode;mode1142,42586
} PyArrayNeighborhoodIterObject;PyArrayNeighborhoodIterObject1143,42600
#define _NPY_INCLUDE_NEIGHBORHOOD_IMP_NPY_INCLUDE_NEIGHBORHOOD_IMP1163,43094
#undef _NPY_INCLUDE_NEIGHBORHOOD_IMP_NPY_INCLUDE_NEIGHBORHOOD_IMP1165,43172
#define NPY_DEFAULT_TYPE NPY_DEFAULT_TYPE1168,43239
#define PyArray_DEFAULT PyArray_DEFAULT1169,43275
#define PyArray_NDIM(PyArray_NDIM1177,43482
#define PyArray_ISONESEGMENT(PyArray_ISONESEGMENT1178,43539
#define PyArray_ISFORTRAN(PyArray_ISFORTRAN1182,43767
#define PyArray_FORTRAN_IF(PyArray_FORTRAN_IF1185,43900
#define FORTRAN_IF FORTRAN_IF1188,44029
#define PyArray_DATA(PyArray_DATA1189,44067
#define PyArray_BYTES(PyArray_BYTES1190,44136
#define PyArray_DIMS(PyArray_DIMS1191,44196
#define PyArray_STRIDES(PyArray_STRIDES1192,44261
#define PyArray_DIM(PyArray_DIM1193,44326
#define PyArray_STRIDE(PyArray_STRIDE1194,44376
#define PyArray_BASE(PyArray_BASE1195,44432
#define PyArray_DESCR(PyArray_DESCR1196,44491
#define PyArray_FLAGS(PyArray_FLAGS1197,44552
#define PyArray_ITEMSIZE(PyArray_ITEMSIZE1198,44613
#define PyArray_TYPE(PyArray_TYPE1199,44685
#define PyArray_GETITEM(PyArray_GETITEM1201,44756
#define PyArray_SETITEM(PyArray_SETITEM1205,44990
#define PyTypeNum_ISBOOL(PyTypeNum_ISBOOL1211,45308
#define PyTypeNum_ISUNSIGNED(PyTypeNum_ISUNSIGNED1213,45361
#define PyTypeNum_ISSIGNED(PyTypeNum_ISSIGNED1219,45682
#define PyTypeNum_ISINTEGER(PyTypeNum_ISINTEGER1225,46000
#define PyTypeNum_ISFLOAT(PyTypeNum_ISFLOAT1228,46125
#define PyTypeNum_ISNUMBER(PyTypeNum_ISNUMBER1231,46249
#define PyTypeNum_ISSTRING(PyTypeNum_ISSTRING1233,46311
#define PyTypeNum_ISCOMPLEX(PyTypeNum_ISCOMPLEX1236,46436
#define PyTypeNum_ISPYTHON(PyTypeNum_ISPYTHON1239,46563
#define PyTypeNum_ISFLEXIBLE(PyTypeNum_ISFLEXIBLE1245,46883
#define PyTypeNum_ISDATETIME(PyTypeNum_ISDATETIME1248,47005
#define PyTypeNum_ISUSERDEF(PyTypeNum_ISUSERDEF1251,47134
#define PyTypeNum_ISEXTENDED(PyTypeNum_ISEXTENDED1255,47318
#define PyTypeNum_ISOBJECT(PyTypeNum_ISOBJECT1258,47451
#define PyDataType_ISBOOL(PyDataType_ISBOOL1261,47509
#define PyDataType_ISUNSIGNED(PyDataType_ISUNSIGNED1262,47570
#define PyDataType_ISSIGNED(PyDataType_ISSIGNED1263,47661
#define PyDataType_ISINTEGER(PyDataType_ISINTEGER1264,47748
#define PyDataType_ISFLOAT(PyDataType_ISFLOAT1265,47838
#define PyDataType_ISNUMBER(PyDataType_ISNUMBER1266,47923
#define PyDataType_ISSTRING(PyDataType_ISSTRING1267,48010
#define PyDataType_ISCOMPLEX(PyDataType_ISCOMPLEX1268,48097
#define PyDataType_ISPYTHON(PyDataType_ISPYTHON1269,48186
#define PyDataType_ISFLEXIBLE(PyDataType_ISFLEXIBLE1270,48273
#define PyDataType_ISDATETIME(PyDataType_ISDATETIME1271,48364
#define PyDataType_ISUSERDEF(PyDataType_ISUSERDEF1272,48455
#define PyDataType_ISEXTENDED(PyDataType_ISEXTENDED1273,48544
#define PyDataType_ISOBJECT(PyDataType_ISOBJECT1274,48635
#define PyDataType_HASFIELDS(PyDataType_HASFIELDS1275,48722
#define PyArray_ISBOOL(PyArray_ISBOOL1277,48799
#define PyArray_ISUNSIGNED(PyArray_ISUNSIGNED1278,48863
#define PyArray_ISSIGNED(PyArray_ISSIGNED1279,48935
#define PyArray_ISINTEGER(PyArray_ISINTEGER1280,49003
#define PyArray_ISFLOAT(PyArray_ISFLOAT1281,49073
#define PyArray_ISNUMBER(PyArray_ISNUMBER1282,49139
#define PyArray_ISSTRING(PyArray_ISSTRING1283,49207
#define PyArray_ISCOMPLEX(PyArray_ISCOMPLEX1284,49275
#define PyArray_ISPYTHON(PyArray_ISPYTHON1285,49345
#define PyArray_ISFLEXIBLE(PyArray_ISFLEXIBLE1286,49413
#define PyArray_ISDATETIME(PyArray_ISDATETIME1287,49485
#define PyArray_ISUSERDEF(PyArray_ISUSERDEF1288,49557
#define PyArray_ISEXTENDED(PyArray_ISEXTENDED1289,49627
#define PyArray_ISOBJECT(PyArray_ISOBJECT1290,49699
#define PyArray_HASFIELDS(PyArray_HASFIELDS1291,49767
#define PyArray_ISVARIABLE(PyArray_ISVARIABLE1298,50051
#define PyArray_SAFEALIGNEDCOPY(PyArray_SAFEALIGNEDCOPY1300,50124
#define NPY_LITTLE NPY_LITTLE1303,50216
#define NPY_BIG NPY_BIG1304,50239
#define NPY_NATIVE NPY_NATIVE1305,50259
#define NPY_SWAP NPY_SWAP1306,50282
#define NPY_IGNORE NPY_IGNORE1307,50303
#define NPY_NATBYTE NPY_NATBYTE1310,50364
#define NPY_OPPBYTE NPY_OPPBYTE1311,50392
#define NPY_NATBYTE NPY_NATBYTE1313,50429
#define NPY_OPPBYTE NPY_OPPBYTE1314,50460
#define PyArray_ISNBO(PyArray_ISNBO1317,50496
#define PyArray_IsNativeByteOrder PyArray_IsNativeByteOrder1318,50546
#define PyArray_ISNOTSWAPPED(PyArray_ISNOTSWAPPED1319,50594
#define PyArray_ISBYTESWAPPED(PyArray_ISBYTESWAPPED1320,50669
#define PyArray_FLAGSWAP(PyArray_FLAGSWAP1322,50730
#define PyArray_ISCARRAY(PyArray_ISCARRAY1325,50866
#define PyArray_ISCARRAY_RO(PyArray_ISCARRAY_RO1326,50926
#define PyArray_ISFARRAY(PyArray_ISFARRAY1327,50992
#define PyArray_ISFARRAY_RO(PyArray_ISFARRAY_RO1328,51052
#define PyArray_ISBEHAVED(PyArray_ISBEHAVED1329,51118
#define PyArray_ISBEHAVED_RO(PyArray_ISBEHAVED_RO1330,51180
#define PyDataType_ISNOTSWAPPED(PyDataType_ISNOTSWAPPED1333,51247
#define PyDataType_ISBYTESWAPPED(PyDataType_ISBYTESWAPPED1334,51331
    int two;              /*two1344,51624
    int nd;               /* number of dimensions */nd1349,51783
    char typekind;        /*typekind1351,51837
    int itemsize;         /* size of each element */itemsize1356,51999
    int flags;            /*flags1358,52053
    npy_intp *shape;       /*shape1367,52498
    npy_intp *strides;    /* A length-nd array of stride information */strides1372,52659
    void *data;           /* A pointer to the first element of the array */data1374,52732
    PyObject *descr;      /*descr1376,52809
} PyArrayInterface;PyArrayInterface1380,53007

numpy/core/include/numpy/noprefix.h,6270
#define NPY_NOPREFIX_HNPY_NOPREFIX_H2,23
#define MAX_DIMS MAX_DIMS10,181
#define longlong longlong12,211
#define ulonglong ulonglong13,244
#define Bool Bool14,278
#define longdouble longdouble15,307
#define byte byte16,342
#define ushort ushort19,392
#define uint uint20,423
#define ulong ulong21,452
#define ubyte ubyte24,490
#define ushort ushort25,520
#define uint uint26,551
#define ulong ulong27,580
#define cfloat cfloat28,610
#define cdouble cdouble29,641
#define clongdouble clongdouble30,673
#define Int8 Int831,709
#define UInt8 UInt832,738
#define Int16 Int1633,768
#define UInt16 UInt1634,798
#define Int32 Int3235,829
#define UInt32 UInt3236,859
#define Int64 Int6437,890
#define UInt64 UInt6438,920
#define Int128 Int12839,951
#define UInt128 UInt12840,982
#define Int256 Int25641,1014
#define UInt256 UInt25642,1045
#define Float16 Float1643,1077
#define Complex32 Complex3244,1109
#define Float32 Float3245,1143
#define Complex64 Complex6446,1175
#define Float64 Float6447,1209
#define Complex128 Complex12848,1241
#define Float80 Float8049,1276
#define Complex160 Complex16050,1308
#define Float96 Float9651,1343
#define Complex192 Complex19252,1375
#define Float128 Float12853,1410
#define Complex256 Complex25654,1443
#define intp intp55,1478
#define uintp uintp56,1507
#define datetime datetime57,1537
#define timedelta timedelta58,1570
#define SIZEOF_INTP SIZEOF_INTP60,1605
#define SIZEOF_UINTP SIZEOF_UINTP61,1641
#define SIZEOF_DATETIME SIZEOF_DATETIME62,1679
#define SIZEOF_TIMEDELTA SIZEOF_TIMEDELTA63,1723
#define LONGLONG_FMT LONGLONG_FMT65,1770
#define ULONGLONG_FMT ULONGLONG_FMT66,1808
#define LONGLONG_SUFFIX LONGLONG_SUFFIX67,1848
#define ULONGLONG_SUFFIX ULONGLONG_SUFFIX68,1892
#define MAX_INT8 MAX_INT870,1942
#define MIN_INT8 MIN_INT871,1963
#define MAX_UINT8 MAX_UINT872,1985
#define MAX_INT16 MAX_INT1673,2007
#define MIN_INT16 MIN_INT1674,2031
#define MAX_UINT16 MAX_UINT1675,2056
#define MAX_INT32 MAX_INT3276,2081
#define MIN_INT32 MIN_INT3277,2110
#define MAX_UINT32 MAX_UINT3278,2145
#define MAX_INT64 MAX_INT6479,2176
#define MIN_INT64 MIN_INT6480,2231
#define MAX_UINT64 MAX_UINT6481,2283
#define MAX_INT128 MAX_INT12882,2341
#define MIN_INT128 MIN_INT12883,2416
#define MAX_UINT128 MAX_UINT12884,2470
#define MAX_INT256 MAX_INT25685,2548
#define MIN_INT256 MIN_INT25686,2662
#define MAX_UINT256 MAX_UINT25687,2716
#define MAX_BYTE MAX_BYTE89,2834
#define MIN_BYTE MIN_BYTE90,2864
#define MAX_UBYTE MAX_UBYTE91,2894
#define MAX_SHORT MAX_SHORT92,2926
#define MIN_SHORT MIN_SHORT93,2958
#define MAX_USHORT MAX_USHORT94,2990
#define MAX_INT MAX_INT95,3024
#define MIN_INT MIN_INT96,3054
#define MAX_UINT MAX_UINT97,3084
#define MAX_LONG MAX_LONG98,3115
#define MIN_LONG MIN_LONG99,3146
#define MAX_ULONG MAX_ULONG100,3177
#define MAX_LONGLONG MAX_LONGLONG101,3210
#define MIN_LONGLONG MIN_LONGLONG102,3248
#define MAX_ULONGLONG MAX_ULONGLONG103,3286
#define MIN_DATETIME MIN_DATETIME104,3326
#define MAX_DATETIME MAX_DATETIME105,3364
#define MIN_TIMEDELTA MIN_TIMEDELTA106,3402
#define MAX_TIMEDELTA MAX_TIMEDELTA107,3442
#define SIZEOF_LONGDOUBLE SIZEOF_LONGDOUBLE109,3483
#define SIZEOF_LONGLONG SIZEOF_LONGLONG110,3531
#define BITSOF_BOOL BITSOF_BOOL111,3577
#define BITSOF_CHAR BITSOF_CHAR112,3619
#define BITSOF_SHORT BITSOF_SHORT113,3661
#define BITSOF_INT BITSOF_INT114,3704
#define BITSOF_LONG BITSOF_LONG115,3745
#define BITSOF_LONGLONG BITSOF_LONGLONG116,3787
#define BITSOF_FLOAT BITSOF_FLOAT117,3833
#define BITSOF_DOUBLE BITSOF_DOUBLE118,3876
#define BITSOF_LONGDOUBLE BITSOF_LONGDOUBLE119,3920
#define BITSOF_DATETIME BITSOF_DATETIME120,3968
#define BITSOF_TIMEDELTA BITSOF_TIMEDELTA121,4014
#define PyArray_UCS4 PyArray_UCS4123,4063
#define _pya_malloc _pya_malloc124,4093
#define _pya_free _pya_free125,4128
#define _pya_realloc _pya_realloc126,4159
#define BEGIN_THREADS_DEF BEGIN_THREADS_DEF128,4197
#define BEGIN_THREADS BEGIN_THREADS129,4245
#define END_THREADS END_THREADS130,4289
#define ALLOW_C_API_DEF ALLOW_C_API_DEF131,4331
#define ALLOW_C_API ALLOW_C_API132,4377
#define DISABLE_C_API DISABLE_C_API133,4419
#define PY_FAIL PY_FAIL135,4464
#define PY_SUCCEED PY_SUCCEED136,4489
#define TRUE TRUE139,4534
#define FALSE FALSE143,4578
#define LONGDOUBLE_FMT LONGDOUBLE_FMT146,4610
#define CONTIGUOUS CONTIGUOUS148,4653
#define C_CONTIGUOUS C_CONTIGUOUS149,4695
#define FORTRAN FORTRAN150,4739
#define F_CONTIGUOUS F_CONTIGUOUS151,4778
#define OWNDATA OWNDATA152,4822
#define FORCECAST FORCECAST153,4861
#define ENSURECOPY ENSURECOPY154,4902
#define ENSUREARRAY ENSUREARRAY155,4944
#define ELEMENTSTRIDES ELEMENTSTRIDES156,4987
#define ALIGNED ALIGNED157,5033
#define NOTSWAPPED NOTSWAPPED158,5072
#define WRITEABLE WRITEABLE159,5114
#define UPDATEIFCOPY UPDATEIFCOPY160,5155
#define ARR_HAS_DESCR ARR_HAS_DESCR161,5199
#define BEHAVED BEHAVED162,5244
#define BEHAVED_NS BEHAVED_NS163,5283
#define CARRAY CARRAY164,5325
#define CARRAY_RO CARRAY_RO165,5363
#define FARRAY FARRAY166,5404
#define FARRAY_RO FARRAY_RO167,5442
#define DEFAULT DEFAULT168,5483
#define IN_ARRAY IN_ARRAY169,5522
#define OUT_ARRAY OUT_ARRAY170,5562
#define INOUT_ARRAY INOUT_ARRAY171,5603
#define IN_FARRAY IN_FARRAY172,5646
#define OUT_FARRAY OUT_FARRAY173,5687
#define INOUT_FARRAY INOUT_FARRAY174,5729
#define UPDATE_ALL UPDATE_ALL175,5773
#define OWN_DATA OWN_DATA177,5816
#define BEHAVED_FLAGS BEHAVED_FLAGS178,5854
#define BEHAVED_FLAGS_NS BEHAVED_FLAGS_NS179,5892
#define CARRAY_FLAGS_RO CARRAY_FLAGS_RO180,5933
#define CARRAY_FLAGS CARRAY_FLAGS181,5973
#define FARRAY_FLAGS FARRAY_FLAGS182,6010
#define FARRAY_FLAGS_RO FARRAY_FLAGS_RO183,6047
#define DEFAULT_FLAGS DEFAULT_FLAGS184,6087
#define UPDATE_ALL_FLAGS UPDATE_ALL_FLAGS185,6125
#define MIN MIN188,6185
#define MAX MAX191,6228
#define MAX_INTP MAX_INTP193,6259
#define MIN_INTP MIN_INTP194,6289
#define MAX_UINTP MAX_UINTP195,6319
#define INTP_FMT INTP_FMT196,6351
#define REFCOUNT REFCOUNT198,6382
#define MAX_ELSIZE MAX_ELSIZE199,6416

numpy/core/include/numpy/npy_common.h,33284
#define _NPY_COMMON_H__NPY_COMMON_H_2,23
        #define NPY_INLINE NPY_INLINE8,124
        #define NPY_INLINE NPY_INLINE10,184
        #define NPY_INLINENPY_INLINE12,224
        NPY_CPU_UNKNOWN_ENDIAN,NPY_CPU_UNKNOWN_ENDIAN17,302
        NPY_CPU_LITTLE,NPY_CPU_LITTLE18,334
        NPY_CPU_BIGNPY_CPU_BIG19,358
#define NPY_BYTE_FMT NPY_BYTE_FMT26,471
#define NPY_UBYTE_FMT NPY_UBYTE_FMT27,498
#define NPY_SHORT_FMT NPY_SHORT_FMT28,526
#define NPY_USHORT_FMT NPY_USHORT_FMT29,553
#define NPY_INT_FMT NPY_INT_FMT30,581
#define NPY_UINT_FMT NPY_UINT_FMT31,605
#define NPY_LONG_FMT NPY_LONG_FMT32,630
#define NPY_ULONG_FMT NPY_ULONG_FMT33,656
#define NPY_FLOAT_FMT NPY_FLOAT_FMT34,683
#define NPY_DOUBLE_FMT NPY_DOUBLE_FMT35,709
typedef PY_LONG_LONG npy_longlong;npy_longlong38,757
typedef unsigned PY_LONG_LONG npy_ulonglong;npy_ulonglong39,792
#    define NPY_LONGLONG_FMT NPY_LONGLONG_FMT41,855
#    define NPY_ULONGLONG_FMT NPY_ULONGLONG_FMT42,899
#    define NPY_LONGLONG_SUFFIX(NPY_LONGLONG_SUFFIX43,943
#    define NPY_ULONGLONG_SUFFIX(NPY_ULONGLONG_SUFFIX44,989
#    define NPY_LONGLONG_FMT NPY_LONGLONG_FMT52,1263
#    define NPY_ULONGLONG_FMT NPY_ULONGLONG_FMT53,1305
#    define NPY_LONGLONG_SUFFIX(NPY_LONGLONG_SUFFIX54,1347
#    define NPY_ULONGLONG_SUFFIX(NPY_ULONGLONG_SUFFIX55,1392
typedef long npy_longlong;npy_longlong58,1453
typedef unsigned long npy_ulonglong;npy_ulonglong59,1480
#  define NPY_LONGLONG_SUFFIX(NPY_LONGLONG_SUFFIX60,1517
#  define NPY_ULONGLONG_SUFFIX(NPY_ULONGLONG_SUFFIX61,1558
typedef unsigned char npy_bool;npy_bool65,1609
#define NPY_FALSE NPY_FALSE66,1641
#define NPY_TRUE NPY_TRUE67,1661
        typedef double npy_longdouble;npy_longdouble71,1729
        #define NPY_LONGDOUBLE_FMT NPY_LONGDOUBLE_FMT72,1768
        typedef long double npy_longdouble;npy_longdouble74,1813
        #define NPY_LONGDOUBLE_FMT NPY_LONGDOUBLE_FMT75,1857
typedef signed char npy_byte;npy_byte83,1984
typedef unsigned char npy_ubyte;npy_ubyte84,2014
typedef unsigned short npy_ushort;npy_ushort85,2047
typedef unsigned int npy_uint;npy_uint86,2082
typedef unsigned long npy_ulong;npy_ulong87,2113
typedef float npy_float;npy_float90,2180
typedef double npy_double;npy_double91,2205
typedef short npy_short;npy_short92,2232
typedef int npy_int;npy_int93,2257
typedef long npy_long;npy_long94,2278
typedef struct { double real, imag; } npy_cdouble;real124,3236
typedef struct { double real, imag; } npy_cdouble;imag124,3236
typedef struct { double real, imag; } npy_cdouble;npy_cdouble124,3236
typedef struct { float real, imag; } npy_cfloat;real131,3541
typedef struct { float real, imag; } npy_cfloat;imag131,3541
typedef struct { float real, imag; } npy_cfloat;npy_cfloat131,3541
typedef struct { npy_longdouble real, imag; } npy_clongdouble;real138,3859
typedef struct { npy_longdouble real, imag; } npy_clongdouble;imag138,3859
typedef struct { npy_longdouble real, imag; } npy_clongdouble;npy_clongdouble138,3859
#define NPY_MAX_INT8 NPY_MAX_INT8143,3967
#define NPY_MIN_INT8 NPY_MIN_INT8144,3992
#define NPY_MAX_UINT8 NPY_MAX_UINT8145,4018
#define NPY_MAX_INT16 NPY_MAX_INT16146,4044
#define NPY_MIN_INT16 NPY_MIN_INT16147,4072
#define NPY_MAX_UINT16 NPY_MAX_UINT16148,4101
#define NPY_MAX_INT32 NPY_MAX_INT32149,4130
#define NPY_MIN_INT32 NPY_MIN_INT32150,4163
#define NPY_MAX_UINT32 NPY_MAX_UINT32151,4206
#define NPY_MAX_INT64 NPY_MAX_INT64152,4241
#define NPY_MIN_INT64 NPY_MIN_INT64153,4304
#define NPY_MAX_UINT64 NPY_MAX_UINT64154,4368
#define NPY_MAX_INT128 NPY_MAX_INT128155,4434
#define NPY_MIN_INT128 NPY_MIN_INT128156,4517
#define NPY_MAX_UINT128 NPY_MAX_UINT128157,4583
#define NPY_MAX_INT256 NPY_MAX_INT256158,4669
#define NPY_MIN_INT256 NPY_MIN_INT256159,4791
#define NPY_MAX_UINT256 NPY_MAX_UINT256160,4857
#define NPY_MIN_DATETIME NPY_MIN_DATETIME161,4982
#define NPY_MAX_DATETIME NPY_MAX_DATETIME162,5021
#define NPY_MIN_TIMEDELTA NPY_MIN_TIMEDELTA163,5060
#define NPY_MAX_TIMEDELTA NPY_MAX_TIMEDELTA164,5100
#define NPY_MAX_BYTE NPY_MAX_BYTE182,5702
#define NPY_MIN_BYTE NPY_MIN_BYTE183,5733
#define NPY_MAX_UBYTE NPY_MAX_UBYTE184,5764
#define NPY_MAX_SHORT NPY_MAX_SHORT185,5796
#define NPY_MIN_SHORT NPY_MIN_SHORT186,5827
#define NPY_MAX_USHORT NPY_MAX_USHORT187,5858
#define NPY_MAX_INT NPY_MAX_INT188,5891
#define INT_MIN INT_MIN190,5937
#define NPY_MIN_INT NPY_MIN_INT192,5975
#define NPY_MAX_UINT NPY_MAX_UINT193,6005
#define NPY_MAX_LONG NPY_MAX_LONG194,6036
#define NPY_MIN_LONG NPY_MIN_LONG195,6067
#define NPY_MAX_ULONG NPY_MAX_ULONG196,6098
#define NPY_SIZEOF_DATETIME NPY_SIZEOF_DATETIME198,6132
#define NPY_SIZEOF_TIMEDELTA NPY_SIZEOF_TIMEDELTA199,6162
#define NPY_BITSOF_BOOL NPY_BITSOF_BOOL201,6194
#define NPY_BITSOF_CHAR NPY_BITSOF_CHAR202,6246
#define NPY_BITSOF_SHORT NPY_BITSOF_SHORT203,6279
#define NPY_BITSOF_INT NPY_BITSOF_INT204,6334
#define NPY_BITSOF_LONG NPY_BITSOF_LONG205,6385
#define NPY_BITSOF_LONGLONG NPY_BITSOF_LONGLONG206,6438
#define NPY_BITSOF_FLOAT NPY_BITSOF_FLOAT207,6499
#define NPY_BITSOF_DOUBLE NPY_BITSOF_DOUBLE208,6554
#define NPY_BITSOF_LONGDOUBLE NPY_BITSOF_LONGDOUBLE209,6611
#define NPY_BITSOF_DATETIME NPY_BITSOF_DATETIME210,6676
#define NPY_BITSOF_TIMEDELTA NPY_BITSOF_TIMEDELTA211,6737
#define NPY_INT8 NPY_INT8214,6826
#define NPY_UINT8 NPY_UINT8215,6852
        typedef long npy_int8;npy_int8216,6880
        typedef unsigned long npy_uint8;npy_uint8217,6911
#define PyInt8ScalarObject PyInt8ScalarObject218,6952
#define PyInt8ArrType_Type PyInt8ArrType_Type219,6998
#define PyUInt8ScalarObject PyUInt8ScalarObject220,7044
#define PyUInt8ArrType_Type PyUInt8ArrType_Type221,7092
#define NPY_INT8_FMT NPY_INT8_FMT222,7140
#define NPY_UINT8_FMT NPY_UINT8_FMT223,7174
#define NPY_INT16 NPY_INT16225,7238
#define NPY_UINT16 NPY_UINT16226,7265
        typedef long npy_int16;npy_int16227,7294
        typedef unsigned long npy_uint16;npy_uint16228,7326
#define PyInt16ScalarObject PyInt16ScalarObject229,7368
#define PyInt16ArrType_Type PyInt16ArrType_Type230,7415
#define PyUInt16ScalarObject PyUInt16ScalarObject231,7462
#define PyUInt16ArrType_Type PyUInt16ArrType_Type232,7511
#define NPY_INT16_FMT NPY_INT16_FMT233,7560
#define NPY_UINT16_FMT NPY_UINT16_FMT234,7595
#define NPY_INT32 NPY_INT32236,7660
#define NPY_UINT32 NPY_UINT32237,7687
        typedef long npy_int32;npy_int32238,7716
        typedef unsigned long npy_uint32;npy_uint32239,7748
        typedef unsigned long npy_ucs4;npy_ucs4240,7790
#define PyInt32ScalarObject PyInt32ScalarObject241,7830
#define PyInt32ArrType_Type PyInt32ArrType_Type242,7877
#define PyUInt32ScalarObject PyUInt32ScalarObject243,7924
#define PyUInt32ArrType_Type PyUInt32ArrType_Type244,7973
#define NPY_INT32_FMT NPY_INT32_FMT245,8022
#define NPY_UINT32_FMT NPY_UINT32_FMT246,8057
#define NPY_INT64 NPY_INT64248,8122
#define NPY_UINT64 NPY_UINT64249,8149
        typedef long npy_int64;npy_int64250,8178
        typedef unsigned long npy_uint64;npy_uint64251,8210
#define PyInt64ScalarObject PyInt64ScalarObject252,8252
#define PyInt64ArrType_Type PyInt64ArrType_Type253,8299
#define PyUInt64ScalarObject PyUInt64ScalarObject254,8346
#define PyUInt64ArrType_Type PyUInt64ArrType_Type255,8395
#define NPY_INT64_FMT NPY_INT64_FMT256,8444
#define NPY_UINT64_FMT NPY_UINT64_FMT257,8479
#define MyPyLong_FromInt64 MyPyLong_FromInt64258,8516
#define MyPyLong_AsInt64 MyPyLong_AsInt64259,8559
#define NPY_INT128 NPY_INT128261,8627
#define NPY_UINT128 NPY_UINT128262,8655
        typedef long npy_int128;npy_int128263,8685
        typedef unsigned long npy_uint128;npy_uint128264,8718
#define PyInt128ScalarObject PyInt128ScalarObject265,8761
#define PyInt128ArrType_Type PyInt128ArrType_Type266,8809
#define PyUInt128ScalarObject PyUInt128ScalarObject267,8857
#define PyUInt128ArrType_Type PyUInt128ArrType_Type268,8907
#define NPY_INT128_FMT NPY_INT128_FMT269,8957
#define NPY_UINT128_FMT NPY_UINT128_FMT270,8993
#    define NPY_INT8 NPY_INT8275,9087
#    define NPY_UINT8 NPY_UINT8276,9121
        typedef npy_longlong npy_int8;npy_int8277,9157
        typedef npy_ulonglong npy_uint8;npy_uint8278,9196
#    define PyInt8ScalarObject PyInt8ScalarObject279,9237
#    define PyInt8ArrType_Type PyInt8ArrType_Type280,9291
#    define PyUInt8ScalarObject PyUInt8ScalarObject281,9345
#    define PyUInt8ArrType_Type PyUInt8ArrType_Type282,9401
#define NPY_INT8_FMT NPY_INT8_FMT283,9457
#define NPY_UINT8_FMT NPY_UINT8_FMT284,9495
#  define NPY_MAX_LONGLONG NPY_MAX_LONGLONG286,9544
#  define NPY_MIN_LONGLONG NPY_MIN_LONGLONG287,9584
#  define NPY_MAX_ULONGLONG NPY_MAX_ULONGLONG288,9624
#    define NPY_INT16 NPY_INT16291,9718
#    define NPY_UINT16 NPY_UINT16292,9753
        typedef npy_longlong npy_int16;npy_int16293,9790
        typedef npy_ulonglong npy_uint16;npy_uint16294,9830
#    define PyInt16ScalarObject PyInt16ScalarObject295,9872
#    define PyInt16ArrType_Type PyInt16ArrType_Type296,9927
#    define PyUInt16ScalarObject PyUInt16ScalarObject297,9982
#    define PyUInt16ArrType_Type PyUInt16ArrType_Type298,10039
#define NPY_INT16_FMT NPY_INT16_FMT299,10096
#define NPY_UINT16_FMT NPY_UINT16_FMT300,10135
#  define NPY_MAX_LONGLONG NPY_MAX_LONGLONG302,10185
#  define NPY_MIN_LONGLONG NPY_MIN_LONGLONG303,10226
#  define NPY_MAX_ULONGLONG NPY_MAX_ULONGLONG304,10267
#    define NPY_INT32 NPY_INT32307,10362
#    define NPY_UINT32 NPY_UINT32308,10397
        typedef npy_longlong npy_int32;npy_int32309,10434
        typedef npy_ulonglong npy_uint32;npy_uint32310,10474
        typedef npy_ulonglong npy_ucs4;npy_ucs4311,10516
#    define PyInt32ScalarObject PyInt32ScalarObject312,10556
#    define PyInt32ArrType_Type PyInt32ArrType_Type313,10611
#    define PyUInt32ScalarObject PyUInt32ScalarObject314,10666
#    define PyUInt32ArrType_Type PyUInt32ArrType_Type315,10723
#define NPY_INT32_FMT NPY_INT32_FMT316,10780
#define NPY_UINT32_FMT NPY_UINT32_FMT317,10819
#  define NPY_MAX_LONGLONG NPY_MAX_LONGLONG319,10869
#  define NPY_MIN_LONGLONG NPY_MIN_LONGLONG320,10910
#  define NPY_MAX_ULONGLONG NPY_MAX_ULONGLONG321,10951
#    define NPY_INT64 NPY_INT64324,11046
#    define NPY_UINT64 NPY_UINT64325,11081
        typedef npy_longlong npy_int64;npy_int64326,11118
        typedef npy_ulonglong npy_uint64;npy_uint64327,11158
#    define PyInt64ScalarObject PyInt64ScalarObject328,11200
#    define PyInt64ArrType_Type PyInt64ArrType_Type329,11255
#    define PyUInt64ScalarObject PyUInt64ScalarObject330,11310
#    define PyUInt64ArrType_Type PyUInt64ArrType_Type331,11367
#define NPY_INT64_FMT NPY_INT64_FMT332,11424
#define NPY_UINT64_FMT NPY_UINT64_FMT333,11463
#    define MyPyLong_FromInt64 MyPyLong_FromInt64334,11504
#    define MyPyLong_AsInt64 MyPyLong_AsInt64335,11555
#  define NPY_MAX_LONGLONG NPY_MAX_LONGLONG337,11611
#  define NPY_MIN_LONGLONG NPY_MIN_LONGLONG338,11652
#  define NPY_MAX_ULONGLONG NPY_MAX_ULONGLONG339,11693
#    define NPY_INT128 NPY_INT128342,11790
#    define NPY_UINT128 NPY_UINT128343,11826
        typedef npy_longlong npy_int128;npy_int128344,11864
        typedef npy_ulonglong npy_uint128;npy_uint128345,11905
#    define PyInt128ScalarObject PyInt128ScalarObject346,11948
#    define PyInt128ArrType_Type PyInt128ArrType_Type347,12004
#    define PyUInt128ScalarObject PyUInt128ScalarObject348,12060
#    define PyUInt128ArrType_Type PyUInt128ArrType_Type349,12118
#define NPY_INT128_FMT NPY_INT128_FMT350,12176
#define NPY_UINT128_FMT NPY_UINT128_FMT351,12216
#  define NPY_MAX_LONGLONG NPY_MAX_LONGLONG353,12267
#  define NPY_MIN_LONGLONG NPY_MIN_LONGLONG354,12309
#  define NPY_MAX_ULONGLONG NPY_MAX_ULONGLONG355,12351
#  define NPY_INT256 NPY_INT256357,12428
#  define NPY_UINT256 NPY_UINT256358,12462
        typedef npy_longlong npy_int256;npy_int256359,12498
        typedef npy_ulonglong npy_uint256;npy_uint256360,12539
#  define PyInt256ScalarObject PyInt256ScalarObject361,12582
#  define PyInt256ArrType_Type PyInt256ArrType_Type362,12636
#  define PyUInt256ScalarObject PyUInt256ScalarObject363,12690
#  define PyUInt256ArrType_Type PyUInt256ArrType_Type364,12746
#define NPY_INT256_FMT NPY_INT256_FMT365,12802
#define NPY_UINT256_FMT NPY_UINT256_FMT366,12842
#  define NPY_MAX_LONGLONG NPY_MAX_LONGLONG367,12884
#  define NPY_MIN_LONGLONG NPY_MIN_LONGLONG368,12926
#  define NPY_MAX_ULONGLONG NPY_MAX_ULONGLONG369,12968
#define NPY_INT8 NPY_INT8374,13061
#define NPY_UINT8 NPY_UINT8375,13086
        typedef int npy_int8;npy_int8376,13113
        typedef unsigned int npy_uint8;npy_uint8377,13143
#    define PyInt8ScalarObject PyInt8ScalarObject378,13183
#    define PyInt8ArrType_Type PyInt8ArrType_Type379,13232
#    define PyUInt8ScalarObject PyUInt8ScalarObject380,13281
#    define PyUInt8ArrType_Type PyUInt8ArrType_Type381,13332
#define NPY_INT8_FMT NPY_INT8_FMT382,13383
#define NPY_UINT8_FMT NPY_UINT8_FMT383,13416
#define NPY_INT16 NPY_INT16387,13503
#define NPY_UINT16 NPY_UINT16388,13529
        typedef int npy_int16;npy_int16389,13557
        typedef unsigned int npy_uint16;npy_uint16390,13588
#    define PyInt16ScalarObject PyInt16ScalarObject391,13629
#    define PyInt16ArrType_Type PyInt16ArrType_Type392,13679
#    define PyUInt16ScalarObject PyUInt16ScalarObject393,13729
#    define PyUInt16ArrType_Type PyUInt16ArrType_Type394,13781
#define NPY_INT16_FMT NPY_INT16_FMT395,13833
#define NPY_UINT16_FMT NPY_UINT16_FMT396,13867
#define NPY_INT32 NPY_INT32400,13955
#define NPY_UINT32 NPY_UINT32401,13981
        typedef int npy_int32;npy_int32402,14009
        typedef unsigned int npy_uint32;npy_uint32403,14040
        typedef unsigned int npy_ucs4;npy_ucs4404,14081
#    define PyInt32ScalarObject PyInt32ScalarObject405,14120
#    define PyInt32ArrType_Type PyInt32ArrType_Type406,14170
#    define PyUInt32ScalarObject PyUInt32ScalarObject407,14220
#    define PyUInt32ArrType_Type PyUInt32ArrType_Type408,14272
#define NPY_INT32_FMT NPY_INT32_FMT409,14324
#define NPY_UINT32_FMT NPY_UINT32_FMT410,14358
#define NPY_INT64 NPY_INT64414,14446
#define NPY_UINT64 NPY_UINT64415,14472
        typedef int npy_int64;npy_int64416,14500
        typedef unsigned int npy_uint64;npy_uint64417,14531
#    define PyInt64ScalarObject PyInt64ScalarObject418,14572
#    define PyInt64ArrType_Type PyInt64ArrType_Type419,14622
#    define PyUInt64ScalarObject PyUInt64ScalarObject420,14672
#    define PyUInt64ArrType_Type PyUInt64ArrType_Type421,14724
#define NPY_INT64_FMT NPY_INT64_FMT422,14776
#define NPY_UINT64_FMT NPY_UINT64_FMT423,14810
#    define MyPyLong_FromInt64 MyPyLong_FromInt64424,14846
#    define MyPyLong_AsInt64 MyPyLong_AsInt64425,14893
#define NPY_INT128 NPY_INT128429,14990
#define NPY_UINT128 NPY_UINT128430,15017
        typedef int npy_int128;npy_int128431,15046
        typedef unsigned int npy_uint128;npy_uint128432,15078
#    define PyInt128ScalarObject PyInt128ScalarObject433,15120
#    define PyInt128ArrType_Type PyInt128ArrType_Type434,15171
#    define PyUInt128ScalarObject PyUInt128ScalarObject435,15222
#    define PyUInt128ArrType_Type PyUInt128ArrType_Type436,15275
#define NPY_INT128_FMT NPY_INT128_FMT437,15328
#define NPY_UINT128_FMT NPY_UINT128_FMT438,15363
#define NPY_INT8 NPY_INT8444,15458
#define NPY_UINT8 NPY_UINT8445,15485
        typedef short npy_int8;npy_int8446,15514
        typedef unsigned short npy_uint8;npy_uint8447,15546
#    define PyInt8ScalarObject PyInt8ScalarObject448,15588
#    define PyInt8ArrType_Type PyInt8ArrType_Type449,15639
#    define PyUInt8ScalarObject PyUInt8ScalarObject450,15690
#    define PyUInt8ArrType_Type PyUInt8ArrType_Type451,15743
#define NPY_INT8_FMT NPY_INT8_FMT452,15796
#define NPY_UINT8_FMT NPY_UINT8_FMT453,15831
#define NPY_INT16 NPY_INT16457,15922
#define NPY_UINT16 NPY_UINT16458,15950
        typedef short npy_int16;npy_int16459,15980
        typedef unsigned short npy_uint16;npy_uint16460,16013
#    define PyInt16ScalarObject PyInt16ScalarObject461,16056
#    define PyInt16ArrType_Type PyInt16ArrType_Type462,16108
#    define PyUInt16ScalarObject PyUInt16ScalarObject463,16160
#    define PyUInt16ArrType_Type PyUInt16ArrType_Type464,16214
#define NPY_INT16_FMT NPY_INT16_FMT465,16268
#define NPY_UINT16_FMT NPY_UINT16_FMT466,16304
#define NPY_INT32 NPY_INT32470,16396
#define NPY_UINT32 NPY_UINT32471,16424
        typedef short npy_int32;npy_int32472,16454
        typedef unsigned short npy_uint32;npy_uint32473,16487
        typedef unsigned short npy_ucs4;npy_ucs4474,16530
#    define PyInt32ScalarObject PyInt32ScalarObject475,16571
#    define PyInt32ArrType_Type PyInt32ArrType_Type476,16623
#    define PyUInt32ScalarObject PyUInt32ScalarObject477,16675
#    define PyUInt32ArrType_Type PyUInt32ArrType_Type478,16729
#define NPY_INT32_FMT NPY_INT32_FMT479,16783
#define NPY_UINT32_FMT NPY_UINT32_FMT480,16819
#define NPY_INT64 NPY_INT64484,16911
#define NPY_UINT64 NPY_UINT64485,16939
        typedef short npy_int64;npy_int64486,16969
        typedef unsigned short npy_uint64;npy_uint64487,17002
#    define PyInt64ScalarObject PyInt64ScalarObject488,17045
#    define PyInt64ArrType_Type PyInt64ArrType_Type489,17097
#    define PyUInt64ScalarObject PyUInt64ScalarObject490,17149
#    define PyUInt64ArrType_Type PyUInt64ArrType_Type491,17203
#define NPY_INT64_FMT NPY_INT64_FMT492,17257
#define NPY_UINT64_FMT NPY_UINT64_FMT493,17293
#    define MyPyLong_FromInt64 MyPyLong_FromInt64494,17331
#    define MyPyLong_AsInt64 MyPyLong_AsInt64495,17378
#define NPY_INT128 NPY_INT128499,17477
#define NPY_UINT128 NPY_UINT128500,17506
        typedef short npy_int128;npy_int128501,17537
        typedef unsigned short npy_uint128;npy_uint128502,17571
#    define PyInt128ScalarObject PyInt128ScalarObject503,17615
#    define PyInt128ArrType_Type PyInt128ArrType_Type504,17668
#    define PyUInt128ScalarObject PyUInt128ScalarObject505,17721
#    define PyUInt128ArrType_Type PyUInt128ArrType_Type506,17776
#define NPY_INT128_FMT NPY_INT128_FMT507,17831
#define NPY_UINT128_FMT NPY_UINT128_FMT508,17868
#define NPY_INT8 NPY_INT8515,17965
#define NPY_UINT8 NPY_UINT8516,17991
        typedef signed char npy_int8;npy_int8517,18019
        typedef unsigned char npy_uint8;npy_uint8518,18057
#    define PyInt8ScalarObject PyInt8ScalarObject519,18098
#    define PyInt8ArrType_Type PyInt8ArrType_Type520,18148
#    define PyUInt8ScalarObject PyUInt8ScalarObject521,18198
#    define PyUInt8ArrType_Type PyUInt8ArrType_Type522,18250
#define NPY_INT8_FMT NPY_INT8_FMT523,18302
#define NPY_UINT8_FMT NPY_UINT8_FMT524,18336
#define NPY_INT16 NPY_INT16528,18425
#define NPY_UINT16 NPY_UINT16529,18452
        typedef signed char npy_int16;npy_int16530,18481
        typedef unsigned char npy_uint16;npy_uint16531,18520
#    define PyInt16ScalarObject PyInt16ScalarObject532,18562
#    define PyInt16ArrType_Type PyInt16ArrType_Type533,18613
#    define PyUInt16ScalarObject PyUInt16ScalarObject534,18664
#    define PyUInt16ArrType_Type PyUInt16ArrType_Type535,18717
#define NPY_INT16_FMT NPY_INT16_FMT536,18770
#define NPY_UINT16_FMT NPY_UINT16_FMT537,18805
#define NPY_INT32 NPY_INT32541,18895
#define NPY_UINT32 NPY_UINT32542,18922
        typedef signed char npy_int32;npy_int32543,18951
        typedef unsigned char npy_uint32;npy_uint32544,18990
        typedef unsigned char npy_ucs4;npy_ucs4545,19032
#    define PyInt32ScalarObject PyInt32ScalarObject546,19072
#    define PyInt32ArrType_Type PyInt32ArrType_Type547,19123
#    define PyUInt32ScalarObject PyUInt32ScalarObject548,19174
#    define PyUInt32ArrType_Type PyUInt32ArrType_Type549,19227
#define NPY_INT32_FMT NPY_INT32_FMT550,19280
#define NPY_UINT32_FMT NPY_UINT32_FMT551,19315
#define NPY_INT64 NPY_INT64555,19405
#define NPY_UINT64 NPY_UINT64556,19432
        typedef signed char npy_int64;npy_int64557,19461
        typedef unsigned char npy_uint64;npy_uint64558,19500
#    define PyInt64ScalarObject PyInt64ScalarObject559,19542
#    define PyInt64ArrType_Type PyInt64ArrType_Type560,19593
#    define PyUInt64ScalarObject PyUInt64ScalarObject561,19644
#    define PyUInt64ArrType_Type PyUInt64ArrType_Type562,19697
#define NPY_INT64_FMT NPY_INT64_FMT563,19750
#define NPY_UINT64_FMT NPY_UINT64_FMT564,19785
#    define MyPyLong_FromInt64 MyPyLong_FromInt64565,19822
#    define MyPyLong_AsInt64 MyPyLong_AsInt64566,19869
#define NPY_INT128 NPY_INT128570,19967
#define NPY_UINT128 NPY_UINT128571,19995
        typedef signed char npy_int128;npy_int128572,20025
        typedef unsigned char npy_uint128;npy_uint128573,20065
#    define PyInt128ScalarObject PyInt128ScalarObject574,20108
#    define PyInt128ArrType_Type PyInt128ArrType_Type575,20160
#    define PyUInt128ScalarObject PyUInt128ScalarObject576,20212
#    define PyUInt128ArrType_Type PyUInt128ArrType_Type577,20266
#define NPY_INT128_FMT NPY_INT128_FMT578,20320
#define NPY_UINT128_FMT NPY_UINT128_FMT579,20356
#define NPY_FLOAT16 NPY_FLOAT16587,20459
#define NPY_COMPLEX32 NPY_COMPLEX32588,20490
        typedef  double npy_float16;npy_float16589,20524
        typedef npy_cdouble npy_complex32;npy_complex32590,20561
#    define PyFloat16ScalarObject PyFloat16ScalarObject591,20604
#    define PyComplex32ScalarObject PyComplex32ScalarObject592,20659
#    define PyFloat16ArrType_Type PyFloat16ArrType_Type593,20717
#    define PyComplex32ArrType_Type PyComplex32ArrType_Type594,20772
#define NPY_FLOAT16_FMT NPY_FLOAT16_FMT595,20830
#define NPY_COMPLEX32_FMT NPY_COMPLEX32_FMT596,20869
#define NPY_FLOAT32 NPY_FLOAT32600,20968
#define NPY_COMPLEX64 NPY_COMPLEX64601,20999
        typedef double npy_float32;npy_float32602,21033
        typedef npy_cdouble npy_complex64;npy_complex64603,21069
#    define PyFloat32ScalarObject PyFloat32ScalarObject604,21112
#    define PyComplex64ScalarObject PyComplex64ScalarObject605,21167
#    define PyFloat32ArrType_Type PyFloat32ArrType_Type606,21225
#    define PyComplex64ArrType_Type PyComplex64ArrType_Type607,21280
#define NPY_FLOAT32_FMT NPY_FLOAT32_FMT608,21338
#define NPY_COMPLEX64_FMT NPY_COMPLEX64_FMT609,21377
#define NPY_FLOAT64 NPY_FLOAT64613,21476
#define NPY_COMPLEX128 NPY_COMPLEX128614,21507
        typedef double npy_float64;npy_float64615,21542
        typedef npy_cdouble npy_complex128;npy_complex128616,21578
#    define PyFloat64ScalarObject PyFloat64ScalarObject617,21622
#    define PyComplex128ScalarObject PyComplex128ScalarObject618,21677
#    define PyFloat64ArrType_Type PyFloat64ArrType_Type619,21736
#    define PyComplex128ArrType_Type PyComplex128ArrType_Type620,21791
#define NPY_FLOAT64_FMT NPY_FLOAT64_FMT621,21850
#define NPY_COMPLEX128_FMT NPY_COMPLEX128_FMT622,21889
#define NPY_FLOAT80 NPY_FLOAT80626,21989
#define NPY_COMPLEX160 NPY_COMPLEX160627,22020
        typedef double npy_float80;npy_float80628,22055
        typedef npy_cdouble npy_complex160;npy_complex160629,22091
#    define PyFloat80ScalarObject PyFloat80ScalarObject630,22135
#    define PyComplex160ScalarObject PyComplex160ScalarObject631,22190
#    define PyFloat80ArrType_Type PyFloat80ArrType_Type632,22249
#    define PyComplex160ArrType_Type PyComplex160ArrType_Type633,22304
#define NPY_FLOAT80_FMT NPY_FLOAT80_FMT634,22363
#define NPY_COMPLEX160_FMT NPY_COMPLEX160_FMT635,22402
#define NPY_FLOAT96 NPY_FLOAT96639,22502
#define NPY_COMPLEX192 NPY_COMPLEX192640,22533
        typedef double npy_float96;npy_float96641,22568
        typedef npy_cdouble npy_complex192;npy_complex192642,22604
#    define PyFloat96ScalarObject PyFloat96ScalarObject643,22648
#    define PyComplex192ScalarObject PyComplex192ScalarObject644,22703
#    define PyFloat96ArrType_Type PyFloat96ArrType_Type645,22762
#    define PyComplex192ArrType_Type PyComplex192ArrType_Type646,22817
#define NPY_FLOAT96_FMT NPY_FLOAT96_FMT647,22876
#define NPY_COMPLEX192_FMT NPY_COMPLEX192_FMT648,22915
#define NPY_FLOAT128 NPY_FLOAT128652,23017
#define NPY_COMPLEX256 NPY_COMPLEX256653,23049
        typedef double npy_float128;npy_float128654,23084
        typedef npy_cdouble npy_complex256;npy_complex256655,23121
#    define PyFloat128ScalarObject PyFloat128ScalarObject656,23165
#    define PyComplex256ScalarObject PyComplex256ScalarObject657,23221
#    define PyFloat128ArrType_Type PyFloat128ArrType_Type658,23280
#    define PyComplex256ArrType_Type PyComplex256ArrType_Type659,23336
#define NPY_FLOAT128_FMT NPY_FLOAT128_FMT660,23395
#define NPY_COMPLEX256_FMT NPY_COMPLEX256_FMT661,23435
#define NPY_FLOAT16 NPY_FLOAT16669,23542
#define NPY_COMPLEX32 NPY_COMPLEX32670,23572
        typedef float npy_float16;npy_float16671,23605
        typedef npy_cfloat npy_complex32;npy_complex32672,23640
#    define PyFloat16ScalarObject PyFloat16ScalarObject673,23682
#    define PyComplex32ScalarObject PyComplex32ScalarObject674,23736
#    define PyFloat16ArrType_Type PyFloat16ArrType_Type675,23793
#    define PyComplex32ArrType_Type PyComplex32ArrType_Type676,23847
#define NPY_FLOAT16_FMT NPY_FLOAT16_FMT677,23904
#define NPY_COMPLEX32_FMT NPY_COMPLEX32_FMT678,23942
#define NPY_FLOAT32 NPY_FLOAT32682,24039
#define NPY_COMPLEX64 NPY_COMPLEX64683,24069
        typedef float npy_float32;npy_float32684,24102
        typedef npy_cfloat npy_complex64;npy_complex64685,24137
#    define PyFloat32ScalarObject PyFloat32ScalarObject686,24179
#    define PyComplex64ScalarObject PyComplex64ScalarObject687,24233
#    define PyFloat32ArrType_Type PyFloat32ArrType_Type688,24290
#    define PyComplex64ArrType_Type PyComplex64ArrType_Type689,24344
#define NPY_FLOAT32_FMT NPY_FLOAT32_FMT690,24401
#define NPY_COMPLEX64_FMT NPY_COMPLEX64_FMT691,24439
#define NPY_FLOAT64 NPY_FLOAT64695,24536
#define NPY_COMPLEX128 NPY_COMPLEX128696,24566
        typedef float npy_float64;npy_float64697,24600
        typedef npy_cfloat npy_complex128;npy_complex128698,24635
#    define PyFloat64ScalarObject PyFloat64ScalarObject699,24678
#    define PyComplex128ScalarObject PyComplex128ScalarObject700,24732
#    define PyFloat64ArrType_Type PyFloat64ArrType_Type701,24790
#    define PyComplex128ArrType_Type PyComplex128ArrType_Type702,24844
#define NPY_FLOAT64_FMT NPY_FLOAT64_FMT703,24902
#define NPY_COMPLEX128_FMT NPY_COMPLEX128_FMT704,24940
#define NPY_FLOAT80 NPY_FLOAT80708,25038
#define NPY_COMPLEX160 NPY_COMPLEX160709,25068
        typedef float npy_float80;npy_float80710,25102
        typedef npy_cfloat npy_complex160;npy_complex160711,25137
#    define PyFloat80ScalarObject PyFloat80ScalarObject712,25180
#    define PyComplex160ScalarObject PyComplex160ScalarObject713,25234
#    define PyFloat80ArrType_Type PyFloat80ArrType_Type714,25292
#    define PyComplex160ArrType_Type PyComplex160ArrType_Type715,25346
#define NPY_FLOAT80_FMT NPY_FLOAT80_FMT716,25404
#define NPY_COMPLEX160_FMT NPY_COMPLEX160_FMT717,25442
#define NPY_FLOAT96 NPY_FLOAT96721,25540
#define NPY_COMPLEX192 NPY_COMPLEX192722,25570
        typedef float npy_float96;npy_float96723,25604
        typedef npy_cfloat npy_complex192;npy_complex192724,25639
#    define PyFloat96ScalarObject PyFloat96ScalarObject725,25682
#    define PyComplex192ScalarObject PyComplex192ScalarObject726,25736
#    define PyFloat96ArrType_Type PyFloat96ArrType_Type727,25794
#    define PyComplex192ArrType_Type PyComplex192ArrType_Type728,25848
#define NPY_FLOAT96_FMT NPY_FLOAT96_FMT729,25906
#define NPY_COMPLEX192_FMT NPY_COMPLEX192_FMT730,25944
#define NPY_FLOAT128 NPY_FLOAT128734,26044
#define NPY_COMPLEX256 NPY_COMPLEX256735,26075
        typedef float npy_float128;npy_float128736,26109
        typedef npy_cfloat npy_complex256;npy_complex256737,26145
#    define PyFloat128ScalarObject PyFloat128ScalarObject738,26188
#    define PyComplex256ScalarObject PyComplex256ScalarObject739,26243
#    define PyFloat128ArrType_Type PyFloat128ArrType_Type740,26301
#    define PyComplex256ArrType_Type PyComplex256ArrType_Type741,26356
#define NPY_FLOAT128_FMT NPY_FLOAT128_FMT742,26414
#define NPY_COMPLEX256_FMT NPY_COMPLEX256_FMT743,26453
#define NPY_FLOAT16 NPY_FLOAT16750,26563
#define NPY_COMPLEX32 NPY_COMPLEX32751,26598
        typedef npy_longdouble npy_float16;npy_float16752,26636
        typedef npy_clongdouble npy_complex32;npy_complex32753,26680
#    define PyFloat16ScalarObject PyFloat16ScalarObject754,26727
#    define PyComplex32ScalarObject PyComplex32ScalarObject755,26786
#    define PyFloat16ArrType_Type PyFloat16ArrType_Type756,26848
#    define PyComplex32ArrType_Type PyComplex32ArrType_Type757,26907
#define NPY_FLOAT16_FMT NPY_FLOAT16_FMT758,26969
#define NPY_COMPLEX32_FMT NPY_COMPLEX32_FMT759,27012
#define NPY_FLOAT32 NPY_FLOAT32763,27119
#define NPY_COMPLEX64 NPY_COMPLEX64764,27154
        typedef npy_longdouble npy_float32;npy_float32765,27192
        typedef npy_clongdouble npy_complex64;npy_complex64766,27236
#    define PyFloat32ScalarObject PyFloat32ScalarObject767,27283
#    define PyComplex64ScalarObject PyComplex64ScalarObject768,27342
#    define PyFloat32ArrType_Type PyFloat32ArrType_Type769,27404
#    define PyComplex64ArrType_Type PyComplex64ArrType_Type770,27463
#define NPY_FLOAT32_FMT NPY_FLOAT32_FMT771,27525
#define NPY_COMPLEX64_FMT NPY_COMPLEX64_FMT772,27568
#define NPY_FLOAT64 NPY_FLOAT64776,27675
#define NPY_COMPLEX128 NPY_COMPLEX128777,27710
        typedef npy_longdouble npy_float64;npy_float64778,27749
        typedef npy_clongdouble npy_complex128;npy_complex128779,27793
#    define PyFloat64ScalarObject PyFloat64ScalarObject780,27841
#    define PyComplex128ScalarObject PyComplex128ScalarObject781,27900
#    define PyFloat64ArrType_Type PyFloat64ArrType_Type782,27963
#    define PyComplex128ArrType_Type PyComplex128ArrType_Type783,28022
#define NPY_FLOAT64_FMT NPY_FLOAT64_FMT784,28085
#define NPY_COMPLEX128_FMT NPY_COMPLEX128_FMT785,28128
#define NPY_FLOAT80 NPY_FLOAT80789,28236
#define NPY_COMPLEX160 NPY_COMPLEX160790,28271
        typedef npy_longdouble npy_float80;npy_float80791,28310
        typedef npy_clongdouble npy_complex160;npy_complex160792,28354
#    define PyFloat80ScalarObject PyFloat80ScalarObject793,28402
#    define PyComplex160ScalarObject PyComplex160ScalarObject794,28461
#    define PyFloat80ArrType_Type PyFloat80ArrType_Type795,28524
#    define PyComplex160ArrType_Type PyComplex160ArrType_Type796,28583
#define NPY_FLOAT80_FMT NPY_FLOAT80_FMT797,28646
#define NPY_COMPLEX160_FMT NPY_COMPLEX160_FMT798,28689
#define NPY_FLOAT96 NPY_FLOAT96802,28797
#define NPY_COMPLEX192 NPY_COMPLEX192803,28832
        typedef npy_longdouble npy_float96;npy_float96804,28871
        typedef npy_clongdouble npy_complex192;npy_complex192805,28915
#    define PyFloat96ScalarObject PyFloat96ScalarObject806,28963
#    define PyComplex192ScalarObject PyComplex192ScalarObject807,29022
#    define PyFloat96ArrType_Type PyFloat96ArrType_Type808,29085
#    define PyComplex192ArrType_Type PyComplex192ArrType_Type809,29144
#define NPY_FLOAT96_FMT NPY_FLOAT96_FMT810,29207
#define NPY_COMPLEX192_FMT NPY_COMPLEX192_FMT811,29250
#define NPY_FLOAT128 NPY_FLOAT128815,29360
#define NPY_COMPLEX256 NPY_COMPLEX256816,29396
        typedef npy_longdouble npy_float128;npy_float128817,29435
        typedef npy_clongdouble npy_complex256;npy_complex256818,29480
#    define PyFloat128ScalarObject PyFloat128ScalarObject819,29528
#    define PyComplex256ScalarObject PyComplex256ScalarObject820,29588
#    define PyFloat128ArrType_Type PyFloat128ArrType_Type821,29651
#    define PyComplex256ArrType_Type PyComplex256ArrType_Type822,29711
#define NPY_FLOAT128_FMT NPY_FLOAT128_FMT823,29774
#define NPY_COMPLEX256_FMT NPY_COMPLEX256_FMT824,29818
#define NPY_FLOAT256 NPY_FLOAT256827,29907
#define NPY_COMPLEX512 NPY_COMPLEX512828,29943
        typedef npy_longdouble npy_float256;npy_float256829,29982
        typedef npy_clongdouble npy_complex512;npy_complex512830,30027
#    define PyFloat256ScalarObject PyFloat256ScalarObject831,30075
#    define PyComplex512ScalarObject PyComplex512ScalarObject832,30135
#    define PyFloat256ArrType_Type PyFloat256ArrType_Type833,30198
#    define PyComplex512ArrType_Type PyComplex512ArrType_Type834,30258
#define NPY_FLOAT256_FMT NPY_FLOAT256_FMT835,30321
#define NPY_COMPLEX512_FMT NPY_COMPLEX512_FMT836,30365
typedef npy_int64 npy_timedelta;npy_timedelta840,30444
typedef npy_int64 npy_datetime;npy_datetime841,30477
#define NPY_DATETIME_FMT NPY_DATETIME_FMT842,30509
#define NPY_TIMEDELTA_FMT NPY_TIMEDELTA_FMT843,30548

numpy/core/include/numpy/npy_cpu.h,959
#define _NPY_CPUARCH_H__NPY_CPUARCH_H_19,483
    #define NPY_CPU_X86NPY_CPU_X8629,757
    #define NPY_CPU_AMD64NPY_CPU_AMD6436,1045
    #define NPY_CPU_PPCNPY_CPU_PPC43,1307
    #define NPY_CPU_PPC64NPY_CPU_PPC6445,1356
    #define NPY_CPU_SPARCNPY_CPU_SPARC48,1496
    #define NPY_CPU_S390NPY_CPU_S39050,1546
    #define NPY_CPU_IA64NPY_CPU_IA6452,1593
    #define NPY_CPU_HPPANPY_CPU_HPPA54,1640
    #define NPY_CPU_ALPHANPY_CPU_ALPHA56,1690
    #define NPY_CPU_ARMELNPY_CPU_ARMEL58,1761
    #define NPY_CPU_ARMEBNPY_CPU_ARMEB60,1832
    #define NPY_CPU_SH_LENPY_CPU_SH_LE62,1910
    #define NPY_CPU_SH_BENPY_CPU_SH_BE64,1985
    #define NPY_CPU_MIPSELNPY_CPU_MIPSEL66,2037
    #define NPY_CPU_MIPSEBNPY_CPU_MIPSEB68,2090
    #define NPY_COPY_PYOBJECT_PTR(NPY_COPY_PYOBJECT_PTR83,2626
        #define NPY_COPY_PYOBJECT_PTR(NPY_COPY_PYOBJECT_PTR86,2760
        #define NPY_COPY_PYOBJECT_PTR(NPY_COPY_PYOBJECT_PTR92,3058

numpy/core/include/numpy/npy_endian.h,414
#define _NPY_ENDIAN_H__NPY_ENDIAN_H_2,23
    #define NPY_BYTE_ORDER NPY_BYTE_ORDER13,226
    #define NPY_LITTLE_ENDIAN NPY_LITTLE_ENDIAN14,266
    #define NPY_BIG_ENDIAN NPY_BIG_ENDIAN15,312
    #define NPY_LITTLE_ENDIAN NPY_LITTLE_ENDIAN20,431
    #define NPY_BIG_ENDIAN NPY_BIG_ENDIAN21,466
        #define NPY_BYTE_ORDER NPY_BYTE_ORDER30,790
        #define NPY_BYTE_ORDER NPY_BYTE_ORDER39,1172

numpy/core/include/numpy/npy_interrupt.h,476
#define NPY_INTERRUPT_HNPY_INTERRUPT_H79,2364
#define SIGSETJMP(SIGSETJMP88,2472
#define SIGLONGJMP(SIGLONGJMP89,2515
#define SIGJMP_BUF SIGJMP_BUF90,2566
#define SIGSETJMP(SIGSETJMP94,2601
#define SIGLONGJMP(SIGLONGJMP95,2653
#define SIGJMP_BUF SIGJMP_BUF96,2707
#    define NPY_SIGINT_ON NPY_SIGINT_ON100,2746
#    define NPY_SIGINT_OFF NPY_SIGINT_OFF106,3128
#  define NPY_SIGINT_ONNPY_SIGINT_ON112,3303
#  define NPY_SIGINT_OFFNPY_SIGINT_OFF113,3327

numpy/core/include/numpy/npy_math.h,3743
#define __NPY_MATH_C99_H___NPY_MATH_C99_H_2,26
NPY_INLINE static float __npy_inff(void)__npy_inff13,283
NPY_INLINE static float __npy_nanf(void)__npy_nanf19,423
NPY_INLINE static float __npy_pzerof(void)__npy_pzerof25,563
NPY_INLINE static float __npy_nzerof(void)__npy_nzerof31,705
#define NPY_INFINITYF NPY_INFINITYF37,847
#define NPY_NANF NPY_NANF38,882
#define NPY_PZEROF NPY_PZEROF39,912
#define NPY_NZEROF NPY_NZEROF40,946
#define NPY_INFINITY NPY_INFINITY42,981
#define NPY_NAN NPY_NAN43,1030
#define NPY_PZERO NPY_PZERO44,1069
#define NPY_NZERO NPY_NZERO45,1112
#define NPY_INFINITYL NPY_INFINITYL47,1156
#define NPY_NANL NPY_NANL48,1210
#define NPY_PZEROL NPY_PZEROL49,1254
#define NPY_NZEROL NPY_NZEROL50,1302
#define NPY_E NPY_E55,1378
#define NPY_LOG2E NPY_LOG2E56,1448
#define NPY_LOG10E NPY_LOG10E57,1524
#define NPY_LOGE2 NPY_LOGE258,1601
#define NPY_LOGE10 NPY_LOGE1059,1677
#define NPY_PI NPY_PI60,1754
#define NPY_PI_2 NPY_PI_261,1825
#define NPY_PI_4 NPY_PI_462,1898
#define NPY_1_PI NPY_1_PI63,1971
#define NPY_2_PI NPY_2_PI64,2044
#define NPY_EULER NPY_EULER65,2117
#define NPY_SQRT2 NPY_SQRT266,2200
#define NPY_SQRT1_2 NPY_SQRT1_267,2276
#define NPY_Ef NPY_Ef69,2355
#define NPY_LOG2Ef NPY_LOG2Ef70,2425
#define NPY_LOG10Ef NPY_LOG10Ef71,2501
#define NPY_LOGE2f NPY_LOGE2f72,2578
#define NPY_LOGE10f NPY_LOGE10f73,2654
#define NPY_PIf NPY_PIf74,2731
#define NPY_PI_2f NPY_PI_2f75,2802
#define NPY_PI_4f NPY_PI_4f76,2875
#define NPY_1_PIf NPY_1_PIf77,2948
#define NPY_2_PIf NPY_2_PIf78,3021
#define NPY_EULERf NPY_EULERf79,3094
#define NPY_SQRT2f NPY_SQRT2f80,3175
#define NPY_SQRT1_2f NPY_SQRT1_2f81,3251
#define NPY_El NPY_El83,3330
#define NPY_LOG2El NPY_LOG2El84,3400
#define NPY_LOG10El NPY_LOG10El85,3476
#define NPY_LOGE2l NPY_LOGE2l86,3553
#define NPY_LOGE10l NPY_LOGE10l87,3629
#define NPY_PIl NPY_PIl88,3706
#define NPY_PI_2l NPY_PI_2l89,3777
#define NPY_PI_4l NPY_PI_4l90,3850
#define NPY_1_PIl NPY_1_PIl91,3923
#define NPY_2_PIl NPY_2_PIl92,3996
#define NPY_EULERl NPY_EULERl93,4069
#define NPY_SQRT2l NPY_SQRT2l94,4150
#define NPY_SQRT1_2l NPY_SQRT1_2l95,4226
    #define npy_isnan(npy_isnan148,5528
    #define npy_isnan(npy_isnan150,5572
    #define npy_isfinite(npy_isfinite154,5647
    #define npy_isfinite(npy_isfinite156,5704
    #define npy_isinf(npy_isinf160,5782
    #define npy_isinf(npy_isinf162,5849
    #define npy_signbit(npy_signbit169,6033
    #define npy_signbit(npy_signbit174,6231
#define npy_degrees npy_degrees277,9441
#define npy_degreesf npy_degreesf278,9473
#define npy_degreesl npy_degreesl279,9507
#define npy_radians npy_radians281,9542
#define npy_radiansf npy_radiansf282,9574
#define npy_radiansl npy_radiansl283,9608
#define __NPY_CPACK_IMP(__NPY_CPACK_IMP294,9871
static NPY_INLINE npy_cdouble npy_cpack(double x, double y)npy_cpack305,10312
static NPY_INLINE npy_cfloat npy_cpackf(float x, float y)npy_cpackf310,10425
static NPY_INLINE npy_clongdouble npy_cpackl(npy_longdouble x, npy_longdouble y)npy_cpackl315,10534
#undef __NPY_CPACK_IMP__NPY_CPACK_IMP319,10679
#define __NPY_CEXTRACT_IMP(__NPY_CEXTRACT_IMP328,11011
static NPY_INLINE double npy_creal(npy_cdouble z)npy_creal337,11420
static NPY_INLINE double npy_cimag(npy_cdouble z)npy_cimag342,11526
static NPY_INLINE float npy_crealf(npy_cfloat z)npy_crealf347,11632
static NPY_INLINE float npy_cimagf(npy_cfloat z)npy_cimagf352,11735
static NPY_INLINE npy_longdouble npy_creall(npy_clongdouble z)npy_creall357,11838
static NPY_INLINE npy_longdouble npy_cimagl(npy_clongdouble z)npy_cimagl362,11969
#undef __NPY_CEXTRACT_IMP__NPY_CEXTRACT_IMP366,12099

numpy/core/include/numpy/npy_os.h,570
#define _NPY_OS_H__NPY_OS_H_2,19
    #define NPY_OS_LINUXNPY_OS_LINUX5,100
    #define NPY_OS_BSDNPY_OS_BSD8,239
        #define NPY_OS_FREEBSDNPY_OS_FREEBSD10,285
        #define NPY_OS_NETBSDNPY_OS_NETBSD12,346
        #define NPY_OS_OPENBSDNPY_OS_OPENBSD14,407
        #define NPY_OS_DRAGONFLYNPY_OS_DRAGONFLY16,471
    #define NPY_OS_SOLARISNPY_OS_SOLARIS19,552
    #define NPY_OS_CYGWINNPY_OS_CYGWIN21,605
    #define NPY_OS_WIN32NPY_OS_WIN3223,693
    #define NPY_OS_DARWINNPY_OS_DARWIN25,743
    #define NPY_OS_UNKNOWNNPY_OS_UNKNOWN27,775

numpy/core/include/numpy/numpyconfig.h,389
#define _NPY_NUMPYCONFIG_H__NPY_NUMPYCONFIG_H_2,28
	#undef NPY_SIZEOF_LONGNPY_SIZEOF_LONG12,273
	#undef NPY_SIZEOF_PY_INTPTR_TNPY_SIZEOF_PY_INTPTR_T13,297
		#define NPY_SIZEOF_LONG NPY_SIZEOF_LONG16,346
		#define NPY_SIZEOF_PY_INTPTR_T NPY_SIZEOF_PY_INTPTR_T17,376
		#define NPY_SIZEOF_LONG NPY_SIZEOF_LONG19,419
		#define NPY_SIZEOF_PY_INTPTR_T NPY_SIZEOF_PY_INTPTR_T20,449

numpy/core/include/numpy/numpy_api.h,2329
#define _NUMPY_API_H__NUMPY_API_H_2,23
typedef PyObject NpyObject;NpyObject6,82
typedef PyArrayObject NpyArray;NpyArray7,111
typedef PyArray_Descr NpyArray_Descr;NpyArray_Descr8,144
typedef PyArray_Dims NpyArray_Dims;NpyArray_Dims10,185
typedef PyArray_CopySwapFunc NpyArray_CopySwapFunc;NpyArray_CopySwapFunc12,224
typedef PyArray_ArrFuncs NpyArray_ArrFuncs;NpyArray_ArrFuncs13,277
typedef PyArray_VectorUnaryFunc NpyArray_VectorUnaryFunc;NpyArray_VectorUnaryFunc14,322
#define NpyArray_SIZE(NpyArray_SIZE16,383
#define NpyArray_ITEMSIZE(NpyArray_ITEMSIZE17,425
#define NpyArray_NDIM(NpyArray_NDIM18,475
#define NpyArray_DIM(NpyArray_DIM19,517
#define NpyArray_STRIDES(NpyArray_STRIDES20,563
#define NpyArray_DESCR(NpyArray_DESCR21,611
#define NpyArray_FLAGS(NpyArray_FLAGS22,655
#define NpyArray_BASE(NpyArray_BASE23,699
#define NpyArray_CHKFLAGS(NpyArray_CHKFLAGS25,743
#define NpyArray_ISFORTRAN(NpyArray_ISFORTRAN26,807
#define NpyArray_ISCONTIGUOUS(NpyArray_ISCONTIGUOUS27,859
#define NpyArray_ISONESEGMENT(NpyArray_ISONESEGMENT28,917
#define NpyArray_ISWRITEABLE(NpyArray_ISWRITEABLE29,975
#define NpyArray_NOTYPE NpyArray_NOTYPE31,1033
#define NpyArray_NTYPES NpyArray_NTYPES32,1073
#define NpyArray_NSORTS NpyArray_NSORTS33,1113
#define NpyArray_USERDEF NpyArray_USERDEF34,1153
#define NpyTypeNum_ISUSERDEF(NpyTypeNum_ISUSERDEF35,1195
#define NpyArray_NOSCALAR NpyArray_NOSCALAR37,1253
#define NpyArray_NSCALARKINDS NpyArray_NSCALARKINDS38,1297
#define Npy_INCREF(Npy_INCREF74,2687
#define Npy_DECREF(Npy_DECREF75,2723
#define NpyArray_REFCOUNT(NpyArray_REFCOUNT76,2759
#define NpyDataMem_RENEW(NpyDataMem_RENEW81,2831
#define NpyDimMem_RENEW(NpyDimMem_RENEW83,2889
#define NpyErr_SetString(NpyErr_SetString88,2974
#define NpyErr_NoMemory(NpyErr_NoMemory89,3036
#define NpyExc_ValueError NpyExc_ValueError90,3080
#define NpyExc_MemoryError NpyExc_MemoryError91,3124
#define NpyExc_TypeError NpyExc_TypeError92,3170
#define NpyArray_MultiplyList(NpyArray_MultiplyList99,3235
#define npy_userdescrs npy_userdescrs100,3299
#define NpyArray_NewFromDescr(NpyArray_NewFromDescr101,3334
#define NpyArray_View(NpyArray_View103,3455
#define NpyArray_NewCopy(NpyArray_NewCopy104,3521
#define NpyArray_UpdateFlags(NpyArray_UpdateFlags105,3597

numpy/core/include/numpy/oldnumeric.h,721
#  define REFCOUNT REFCOUNT4,43
#  define MAX_ELSIZE MAX_ELSIZE5,75
#define PyArray_UNSIGNED_TYPESPyArray_UNSIGNED_TYPES8,107
#define PyArray_SBYTE PyArray_SBYTE9,138
#define PyArray_CopyArray PyArray_CopyArray10,173
#define _PyArray_multiply_list _PyArray_multiply_list11,216
#define PyArray_ISSPACESAVER(PyArray_ISSPACESAVER12,271
#define PyScalarArray_Check PyScalarArray_Check13,313
#define CONTIGUOUS CONTIGUOUS15,362
#define OWN_DIMENSIONS OWN_DIMENSIONS16,396
#define OWN_STRIDES OWN_STRIDES17,421
#define OWN_DATA OWN_DATA18,443
#define SAVESPACE SAVESPACE19,472
#define SAVESPACEBIT SAVESPACEBIT20,492
#undef import_arrayimport_array22,516
#define import_array(import_array23,536

numpy/core/include/numpy/old_defines.h,6997
#define NDARRAY_VERSION NDARRAY_VERSION1,0
#define PyArray_MIN_BUFSIZE PyArray_MIN_BUFSIZE3,37
#define PyArray_MAX_BUFSIZE PyArray_MAX_BUFSIZE4,81
#define PyArray_BUFSIZE PyArray_BUFSIZE5,125
#define PyArray_PRIORITY PyArray_PRIORITY7,162
#define PyArray_SUBTYPE_PRIORITY PyArray_SUBTYPE_PRIORITY8,200
#define PyArray_NUM_FLOATTYPE PyArray_NUM_FLOATTYPE9,246
#define NPY_MAX NPY_MAX11,295
#define NPY_MIN NPY_MIN12,323
#define PyArray_TYPES PyArray_TYPES14,352
#define PyArray_BOOL PyArray_BOOL15,390
#define PyArray_BYTE PyArray_BYTE16,427
#define PyArray_UBYTE PyArray_UBYTE17,464
#define PyArray_SHORT PyArray_SHORT18,502
#define PyArray_USHORT PyArray_USHORT19,540
#define PyArray_INT PyArray_INT20,579
#define PyArray_UINT PyArray_UINT21,615
#define PyArray_LONG PyArray_LONG22,652
#define PyArray_ULONG PyArray_ULONG23,689
#define PyArray_LONGLONG PyArray_LONGLONG24,727
#define PyArray_ULONGLONG PyArray_ULONGLONG25,768
#define PyArray_FLOAT PyArray_FLOAT26,810
#define PyArray_DOUBLE PyArray_DOUBLE27,848
#define PyArray_LONGDOUBLE PyArray_LONGDOUBLE28,887
#define PyArray_CFLOAT PyArray_CFLOAT29,930
#define PyArray_CDOUBLE PyArray_CDOUBLE30,969
#define PyArray_CLONGDOUBLE PyArray_CLONGDOUBLE31,1009
#define PyArray_OBJECT PyArray_OBJECT32,1053
#define PyArray_STRING PyArray_STRING33,1092
#define PyArray_UNICODE PyArray_UNICODE34,1131
#define PyArray_VOID PyArray_VOID35,1171
#define PyArray_DATETIME PyArray_DATETIME36,1208
#define PyArray_TIMEDELTA PyArray_TIMEDELTA37,1249
#define PyArray_NTYPES PyArray_NTYPES38,1291
#define PyArray_NOTYPE PyArray_NOTYPE39,1330
#define PyArray_CHAR PyArray_CHAR40,1369
#define PyArray_USERDEF PyArray_USERDEF41,1406
#define PyArray_NUMUSERTYPES PyArray_NUMUSERTYPES42,1446
#define PyArray_INTP PyArray_INTP44,1493
#define PyArray_UINTP PyArray_UINTP45,1530
#define PyArray_INT8 PyArray_INT847,1569
#define PyArray_UINT8 PyArray_UINT848,1602
#define PyArray_INT16 PyArray_INT1649,1636
#define PyArray_UINT16 PyArray_UINT1650,1670
#define PyArray_INT32 PyArray_INT3251,1705
#define PyArray_UINT32 PyArray_UINT3252,1739
#define PyArray_INT64 PyArray_INT6455,1792
#define PyArray_UINT64 PyArray_UINT6456,1826
#define PyArray_INT128 PyArray_INT12860,1887
#define PyArray_UINT128 PyArray_UINT12861,1921
#define PyArray_FLOAT16 PyArray_FLOAT1665,1984
#define PyArray_COMPLEX32 PyArray_COMPLEX3266,2021
#define PyArray_FLOAT80 PyArray_FLOAT8070,2089
#define PyArray_COMPLEX160 PyArray_COMPLEX16071,2126
#define PyArray_FLOAT96 PyArray_FLOAT9675,2196
#define PyArray_COMPLEX192 PyArray_COMPLEX19276,2233
#define PyArray_FLOAT128 PyArray_FLOAT12880,2304
#define PyArray_COMPLEX256 PyArray_COMPLEX25681,2343
#define PyArray_FLOAT32 PyArray_FLOAT3284,2394
#define PyArray_COMPLEX64 PyArray_COMPLEX6485,2433
#define PyArray_FLOAT64 PyArray_FLOAT6486,2474
#define PyArray_COMPLEX128 PyArray_COMPLEX12887,2513
#define PyArray_TYPECHAR PyArray_TYPECHAR90,2557
#define PyArray_BOOLLTR PyArray_BOOLLTR91,2602
#define PyArray_BYTELTR PyArray_BYTELTR92,2646
#define PyArray_UBYTELTR PyArray_UBYTELTR93,2690
#define PyArray_SHORTLTR PyArray_SHORTLTR94,2735
#define PyArray_USHORTLTR PyArray_USHORTLTR95,2780
#define PyArray_INTLTR PyArray_INTLTR96,2826
#define PyArray_UINTLTR PyArray_UINTLTR97,2869
#define PyArray_LONGLTR PyArray_LONGLTR98,2913
#define PyArray_ULONGLTR PyArray_ULONGLTR99,2957
#define PyArray_LONGLONGLTR PyArray_LONGLONGLTR100,3002
#define PyArray_ULONGLONGLTR PyArray_ULONGLONGLTR101,3050
#define PyArray_FLOATLTR PyArray_FLOATLTR102,3099
#define PyArray_DOUBLELTR PyArray_DOUBLELTR103,3144
#define PyArray_LONGDOUBLELTR PyArray_LONGDOUBLELTR104,3190
#define PyArray_CFLOATLTR PyArray_CFLOATLTR105,3240
#define PyArray_CDOUBLELTR PyArray_CDOUBLELTR106,3286
#define PyArray_CLONGDOUBLELTR PyArray_CLONGDOUBLELTR107,3333
#define PyArray_OBJECTLTR PyArray_OBJECTLTR108,3384
#define PyArray_STRINGLTR PyArray_STRINGLTR109,3430
#define PyArray_STRINGLTR2 PyArray_STRINGLTR2110,3476
#define PyArray_UNICODELTR PyArray_UNICODELTR111,3523
#define PyArray_VOIDLTR PyArray_VOIDLTR112,3570
#define PyArray_DATETIMELTR PyArray_DATETIMELTR113,3614
#define PyArray_TIMEDELTALTR PyArray_TIMEDELTALTR114,3662
#define PyArray_CHARLTR PyArray_CHARLTR115,3711
#define PyArray_INTPLTR PyArray_INTPLTR116,3755
#define PyArray_UINTPLTR PyArray_UINTPLTR117,3799
#define PyArray_GENBOOLLTR PyArray_GENBOOLLTR118,3844
#define PyArray_SIGNEDLTR PyArray_SIGNEDLTR119,3891
#define PyArray_UNSIGNEDLTR PyArray_UNSIGNEDLTR120,3937
#define PyArray_FLOATINGLTR PyArray_FLOATINGLTR121,3985
#define PyArray_COMPLEXLTR PyArray_COMPLEXLTR122,4033
#define PyArray_QUICKSORT PyArray_QUICKSORT124,4081
#define PyArray_HEAPSORT PyArray_HEAPSORT125,4123
#define PyArray_MERGESORT PyArray_MERGESORT126,4164
#define PyArray_SORTKIND PyArray_SORTKIND127,4206
#define PyArray_NSORTS PyArray_NSORTS128,4247
#define PyArray_NOSCALAR PyArray_NOSCALAR130,4287
#define PyArray_BOOL_SCALAR PyArray_BOOL_SCALAR131,4331
#define PyArray_INTPOS_SCALAR PyArray_INTPOS_SCALAR132,4378
#define PyArray_INTNEG_SCALAR PyArray_INTNEG_SCALAR133,4427
#define PyArray_FLOAT_SCALAR PyArray_FLOAT_SCALAR134,4476
#define PyArray_COMPLEX_SCALAR PyArray_COMPLEX_SCALAR135,4524
#define PyArray_OBJECT_SCALAR PyArray_OBJECT_SCALAR136,4574
#define PyArray_SCALARKIND PyArray_SCALARKIND137,4623
#define PyArray_NSCALARKINDS PyArray_NSCALARKINDS138,4669
#define PyArray_ANYORDER PyArray_ANYORDER140,4718
#define PyArray_CORDER PyArray_CORDER141,4760
#define PyArray_FORTRANORDER PyArray_FORTRANORDER142,4800
#define PyArray_ORDER PyArray_ORDER143,4846
#define PyDescr_ISBOOL PyDescr_ISBOOL145,4886
#define PyDescr_ISUNSIGNED PyDescr_ISUNSIGNED146,4932
#define PyDescr_ISSIGNED PyDescr_ISSIGNED147,4982
#define PyDescr_ISINTEGER PyDescr_ISINTEGER148,5030
#define PyDescr_ISFLOAT PyDescr_ISFLOAT149,5079
#define PyDescr_ISNUMBER PyDescr_ISNUMBER150,5126
#define PyDescr_ISSTRING PyDescr_ISSTRING151,5174
#define PyDescr_ISCOMPLEX PyDescr_ISCOMPLEX152,5222
#define PyDescr_ISPYTHON PyDescr_ISPYTHON153,5271
#define PyDescr_ISFLEXIBLE PyDescr_ISFLEXIBLE154,5319
#define PyDescr_ISUSERDEF PyDescr_ISUSERDEF155,5369
#define PyDescr_ISEXTENDED PyDescr_ISEXTENDED156,5418
#define PyDescr_ISOBJECT PyDescr_ISOBJECT157,5468
#define PyDescr_HASFIELDS PyDescr_HASFIELDS158,5516
#define PyArray_LITTLE PyArray_LITTLE160,5566
#define PyArray_BIG PyArray_BIG161,5600
#define PyArray_NATIVE PyArray_NATIVE162,5628
#define PyArray_SWAP PyArray_SWAP163,5662
#define PyArray_IGNORE PyArray_IGNORE164,5692
#define PyArray_NATBYTE PyArray_NATBYTE166,5727
#define PyArray_OPPBYTE PyArray_OPPBYTE167,5763
#define PyArray_MAX_ELSIZE PyArray_MAX_ELSIZE169,5800
#define PyArray_USE_PYMEM PyArray_USE_PYMEM171,5843
#define PyArray_RemoveLargest PyArray_RemoveLargest173,5884

numpy/core/include/numpy/ufuncobject.h,7725
#define Py_UFUNCOBJECT_HPy_UFUNCOBJECT_H2,25
typedef void (*PyUFuncGenericFunction) (char **, npy_intp *, npy_intp *, void *);PyUFuncGenericFunction7,90
        int nin, nout, nargs;nin11,212
        int nin, nout, nargs;nout11,212
        int nin, nout, nargs;nargs11,212
        int identity;identity12,242
        PyUFuncGenericFunction *functions;functions13,264
        void **data;data14,307
        int ntypes;ntypes15,328
        int check_return;check_return16,348
        char *name, *types;name17,374
        char *name, *types;types17,374
        char *doc;doc18,402
        void *ptr;ptr19,421
        PyObject *obj;obj20,440
        PyObject *userloops;userloops21,463
        int core_enabled;      /* 0 for scalar ufunc; 1 for generalized ufunc */core_enabled24,529
        int core_num_dim_ix;   /* number of distinct dimension names incore_num_dim_ix25,610
        int *core_num_dims;    /* numbers of core dimensions of each argument */core_num_dims30,881
        int *core_dim_ixs;     /* dimension indices in a flatted form; indicescore_dim_ixs31,962
        int *core_offsets;     /* positions of 1st core dimensions of eachcore_offsets33,1118
        char *core_signature;  /* signature string for printing purpose */core_signature35,1255
} PyUFuncObject;PyUFuncObject36,1330
#define UFUNC_ERR_IGNORE UFUNC_ERR_IGNORE40,1374
#define UFUNC_ERR_WARN UFUNC_ERR_WARN41,1401
#define UFUNC_ERR_RAISE UFUNC_ERR_RAISE42,1428
#define UFUNC_ERR_CALL UFUNC_ERR_CALL43,1455
#define UFUNC_ERR_PRINT UFUNC_ERR_PRINT44,1482
#define UFUNC_ERR_LOG UFUNC_ERR_LOG45,1509
#define UFUNC_MASK_DIVIDEBYZERO UFUNC_MASK_DIVIDEBYZERO49,1577
#define UFUNC_MASK_OVERFLOW UFUNC_MASK_OVERFLOW50,1614
#define UFUNC_MASK_UNDERFLOW UFUNC_MASK_UNDERFLOW51,1647
#define UFUNC_MASK_INVALID UFUNC_MASK_INVALID52,1682
#define UFUNC_SHIFT_DIVIDEBYZERO UFUNC_SHIFT_DIVIDEBYZERO54,1716
#define UFUNC_SHIFT_OVERFLOW UFUNC_SHIFT_OVERFLOW55,1751
#define UFUNC_SHIFT_UNDERFLOW UFUNC_SHIFT_UNDERFLOW56,1786
#define UFUNC_SHIFT_INVALID UFUNC_SHIFT_INVALID57,1821
#define UFUNC_FPE_DIVIDEBYZERO UFUNC_FPE_DIVIDEBYZERO63,1958
#define UFUNC_FPE_OVERFLOW UFUNC_FPE_OVERFLOW64,1992
#define UFUNC_FPE_UNDERFLOW UFUNC_FPE_UNDERFLOW65,2026
#define UFUNC_FPE_INVALID UFUNC_FPE_INVALID66,2060
#define UFUNC_ERR_DEFAULT UFUNC_ERR_DEFAULT68,2095
#define UFUNC_OBJ_ISOBJECT UFUNC_OBJ_ISOBJECT70,2181
#define UFUNC_OBJ_NEEDS_API UFUNC_OBJ_NEEDS_API71,2215
#define UFUNC_ERR_DEFAULT2 UFUNC_ERR_DEFAULT274,2283
        int  numiter;numiter84,2714
        npy_intp size;size85,2736
        npy_intp index;index86,2759
        int nd;nd87,2783
        npy_intp dimensions[NPY_MAXDIMS];dimensions88,2799
        PyArrayIterObject *iters[NPY_MAXARGS];iters89,2841
        PyUFuncObject *ufunc;ufunc93,2958
        int errormask;         /* Integer showing desired error handling */errormask96,3022
        PyObject *errobj;      /* currently a tuple witherrobj97,3098
        int first;first100,3271
        PyUFuncGenericFunction function;function103,3339
        void *funcdata;funcdata104,3380
        int meth;meth107,3431
        int needbuffer[NPY_MAXARGS];needbuffer110,3507
        int leftover;leftover111,3544
        int ninnerloops;ninnerloops112,3566
        int lastdim;lastdim113,3591
        int swap[NPY_MAXARGS];swap116,3650
        char *buffer[NPY_MAXARGS];buffer119,3717
        int bufsize;bufsize120,3752
        npy_intp bufcnt;bufcnt121,3773
        char *dptr[NPY_MAXARGS];dptr122,3798
        char *castbuf[NPY_MAXARGS];castbuf125,3858
        PyArray_VectorUnaryFunc *cast[NPY_MAXARGS];cast126,3894
        char *bufptr[NPY_MAXARGS];bufptr131,4077
        npy_intp steps[NPY_MAXARGS];steps136,4215
        int obj;  /* This loop uses object arrays or needs the Python API */obj138,4253
        int notimplemented; /* The loop caused notimplemented */notimplemented140,4401
        int objfunc; /* This loop calls object functionsobjfunc141,4466
        npy_intp *core_dim_sizes;   /* stores sizes of core dimensions;core_dim_sizes145,4631
        npy_intp *core_strides;     /* strides of loop and core dimensions */core_strides147,4783
} PyUFuncLoopObject;PyUFuncLoopObject148,4861
#define UFUNC_MAXIDENTITY UFUNC_MAXIDENTITY151,4925
        PyArrayIterObject *it;it155,4994
        PyArrayObject *ret;ret156,5025
        PyArrayIterObject *rit;   /* Needed for Accumulate */rit157,5053
        int  outsize;outsize158,5115
        npy_intp  index;index159,5137
        npy_intp  size;size160,5162
        char idptr[UFUNC_MAXIDENTITY];idptr161,5186
        PyUFuncObject *ufunc;ufunc164,5250
        int errormask;errormask167,5314
        PyObject *errobj;errobj168,5337
        int first;first169,5363
        PyUFuncGenericFunction function;function171,5383
        void *funcdata;funcdata172,5424
        int meth;meth173,5448
        int swap;swap174,5466
        char *buffer;buffer176,5485
        int bufsize;bufsize177,5507
        char *castbuf;castbuf179,5529
        PyArray_VectorUnaryFunc *cast;cast180,5552
        char *bufptr[3];bufptr182,5592
        npy_intp steps[3];steps183,5617
        npy_intp N;N185,5645
        int  instrides;instrides186,5665
        int  insize;insize187,5689
        char *inptr;inptr188,5710
        PyObject *decref;decref191,5771
        int obj;obj193,5798
        int retbase;retbase194,5815
} PyUFuncReduceObject;PyUFuncReduceObject196,5837
#define NPY_LOOP_BEGIN_THREADS NPY_LOOP_BEGIN_THREADS200,5884
#define NPY_LOOP_END_THREADS NPY_LOOP_END_THREADS201,5999
#define NPY_LOOP_BEGIN_THREADSNPY_LOOP_BEGIN_THREADS203,6120
#define NPY_LOOP_END_THREADSNPY_LOOP_END_THREADS204,6151
#define PyUFunc_One PyUFunc_One207,6188
#define PyUFunc_Zero PyUFunc_Zero208,6210
#define PyUFunc_None PyUFunc_None209,6233
#define UFUNC_REDUCE UFUNC_REDUCE211,6258
#define UFUNC_ACCUMULATE UFUNC_ACCUMULATE212,6281
#define UFUNC_REDUCEAT UFUNC_REDUCEAT213,6308
#define UFUNC_OUTER UFUNC_OUTER214,6333
        int nin;nin218,6374
        int nout;nout219,6391
        PyObject *callable;callable220,6409
} PyUFunc_PyFuncData;PyUFunc_PyFuncData221,6437
typedef struct _loop1d_info {_loop1d_info226,6536
        PyUFuncGenericFunction func;func227,6566
        void *data;data228,6603
        int *arg_types;arg_types229,6623
        struct _loop1d_info *next;next230,6647
} PyUFunc_Loop1d;PyUFunc_Loop1d231,6682
#define UFUNC_PYVALS_NAME UFUNC_PYVALS_NAME236,6728
#define UFUNC_CHECK_ERROR(UFUNC_CHECK_ERROR238,6770
#define UFUNC_CHECK_STATUS(UFUNC_CHECK_STATUS258,7612
#define UFUNC_NOFPE UFUNC_NOFPE277,8507
#define UFUNC_CHECK_STATUS(UFUNC_CHECK_STATUS280,8563
#define UFUNC_CHECK_STATUS(UFUNC_CHECK_STATUS295,9390
#define UFUNC_CHECK_STATUS(UFUNC_CHECK_STATUS314,10365
#define generate_divbyzero_error(generate_divbyzero_error325,11035
#define generate_overflow_error(generate_overflow_error326,11098
#define UFUNC_CHECK_STATUS(UFUNC_CHECK_STATUS333,11220
#define generate_divbyzero_error(generate_divbyzero_error344,11696
#define generate_overflow_error(generate_overflow_error345,11760
#define NO_FLOATING_POINT_SUPPORTNO_FLOATING_POINT_SUPPORT349,11828
#define UFUNC_CHECK_STATUS(UFUNC_CHECK_STATUS350,11862
static int numeric_zero2 = 0;numeric_zero2362,12193
static void generate_divbyzero_error(void) {generate_divbyzero_error363,12223
static double numeric_two = 2.0;numeric_two375,12554
static void generate_overflow_error(void) {generate_overflow_error376,12587
#define UFUNC_NOFPEUFUNC_NOFPE390,12890

numpy/core/include/numpy/utils.h,298
#define __NUMPY_UTILS_HEADER____NUMPY_UTILS_HEADER__2,31
                #define __COMP_NPY_UNUSED __COMP_NPY_UNUSED6,119
                #define __COMP_NPY_UNUSED __COMP_NPY_UNUSED8,220
                #define __COMP_NPY_UNUSED__COMP_NPY_UNUSED10,305
#define NPY_UNUSED(NPY_UNUSED17,553

numpy/core/include/numpy/_neighborhood_iterator_imp.h,548
#define _UPDATE_COORD_ITER(_UPDATE_COORD_ITER27,527
_PyArrayNeighborhoodIter_IncrCoord(PyArrayNeighborhoodIterObject* iter)_PyArrayNeighborhoodIter_IncrCoord38,789
_PyArrayNeighborhoodIter_IncrCoord2D(PyArrayNeighborhoodIterObject* iter)_PyArrayNeighborhoodIter_IncrCoord2D53,1067
#undef _UPDATE_COORD_ITER_UPDATE_COORD_ITER62,1230
PyArrayNeighborhoodIter_Next(PyArrayNeighborhoodIterObject* iter)PyArrayNeighborhoodIter_Next68,1319
PyArrayNeighborhoodIter_Reset(PyArrayNeighborhoodIterObject* iter)PyArrayNeighborhoodIter_Reset80,1582

numpy/core/src/libnumpy/npy_arrayobject.c,496
#define _MULTIARRAYMODULE_MULTIARRAYMODULE2,2
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN3,29
NpyArray_Size(NpyArray *op)NpyArray_Size12,206
NpyArray_CompareUCS4(npy_ucs4 *s1, npy_ucs4 *s2, size_t len)NpyArray_CompareUCS418,279
NpyArray_CompareString(char *s1, char *s2, size_t len)NpyArray_CompareString32,540
NpyArray_ElementStrides(NpyArray *arr)NpyArray_ElementStrides47,872
NpyArray_CheckStrides(int elsize, int nd, npy_intp numbytes, npy_intp offset,NpyArray_CheckStrides79,1840

numpy/core/src/libnumpy/npy_shape.c,946
#define _MULTIARRAYMODULE_MULTIARRAYMODULE2,2
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN3,29
NpyArray_Resize(NpyArray *self, NpyArray_Dims *newshape, int refcheck,NpyArray_Resize26,749
NpyArray_Newshape(NpyArray* self, NpyArray_Dims *newdims,NpyArray_Newshape146,4459
NpyArray_Squeeze(NpyArray *self)NpyArray_Squeeze302,9326
NpyArray_SwapAxes(NpyArray *ap, int a1, int a2)NpyArray_SwapAxes345,10388
NpyArray_Transpose(NpyArray *ap, NpyArray_Dims *permute)NpyArray_Transpose402,11534
NpyArray_Ravel(NpyArray *a, NPY_ORDER fortran)NpyArray_Ravel479,13877
NpyArray_Flatten(NpyArray *a, NPY_ORDER order)NpyArray_Flatten503,14452
_check_ones(NpyArray *self, int newnd, npy_intp* newdims, npy_intp *strides)_check_ones534,15270
_attempt_nocopy_reshape(NpyArray *self, int newnd, npy_intp* newdims,_attempt_nocopy_reshape586,16700
_fix_unknown_dimension(NpyArray_Dims *newshape, npy_intp s_original)_fix_unknown_dimension695,19664

numpy/core/src/libnumpy/npy_usertypes.c,862
#define _MULTIARRAYMODULE_MULTIARRAYMODULE24,584
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN25,611
NpyArray_Descr **npy_userdescrs=NULL;npy_userdescrs31,742
_append_new(int *types, int insert)_append_new34,797
_default_nonzero(void *ip, void *arr)_default_nonzero49,1110
_default_copyswapn(void *dst, npy_intp dstride, void *src,_default_copyswapn62,1356
NpyArray_InitArrFuncs(NpyArray_ArrFuncs *f)NpyArray_InitArrFuncs83,1839
NpyArray_RegisterDataType(NpyArray_Descr *descr)NpyArray_RegisterDataType123,2753
NpyArray_RegisterCastFunc(NpyArray_Descr *descr, int totype,NpyArray_RegisterCastFunc176,4318
NpyArray_RegisterCanCast(NpyArray_Descr *descr, int totype,NpyArray_RegisterCanCast217,5417
NpyArray_TypeNumFromName(char *str)NpyArray_TypeNumFromName256,6839
NpyArray_TypeNumFromTypeObj(void* typeobj)NpyArray_TypeNumFromTypeObj272,7222

numpy/core/src/multiarray/arrayobject.c,3149
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN23,560
#define _MULTIARRAYMODULE_MULTIARRAYMODULE28,655
#define NPY_NO_PREFIXNPY_NO_PREFIX29,681
PyArray_Size(PyObject *op)PyArray_Size58,1243
PyArray_CopyObject(PyArrayObject *dest, PyObject *src_object)PyArray_CopyObject70,1415
PyArray_TypeNumFromName(char *str)PyArray_TypeNumFromName146,3560
array_dealloc(PyArrayObject *self) {array_dealloc156,3754
dump_data(char **string, int *n, int *max_n, char *data, int nd,dump_data210,5462
#define CHECK_MEMORY CHECK_MEMORY218,5689
#undef CHECK_MEMORYCHECK_MEMORY265,7001
array_repr_builtin(PyArrayObject *self, int repr)array_repr_builtin269,7042
static PyObject *PyArray_StrFunction = NULL;PyArray_StrFunction316,8227
static PyObject *PyArray_ReprFunction = NULL;PyArray_ReprFunction317,8272
static PyObject *PyArray_DatetimeParseFunction = NULL;PyArray_DatetimeParseFunction318,8318
PyArray_SetStringFunction(PyObject *op, int repr)PyArray_SetStringFunction324,8466
PyArray_SetDatetimeParseFunction(PyObject *op)PyArray_SetDatetimeParseFunction348,9106
array_repr(PyArrayObject *self)array_repr360,9401
array_str(PyArrayObject *self)array_str376,9738
PyArray_CompareUCS4(npy_ucs4 *s1, npy_ucs4 *s2, size_t len)PyArray_CompareUCS4396,10090
PyArray_CompareString(char *s1, char *s2, size_t len)PyArray_CompareString404,10235
_myunincmp(PyArray_UCS4 *s1, PyArray_UCS4 *s2, int len1, int len2)_myunincmp417,10573
_mystrncmp(char *s1, char *s2, int len1, int len2)_mystrncmp477,11784
#define SMALL_STRING SMALL_STRING508,12372
#undef isspaceisspace511,12420
#define isspace(isspace512,12435
static void _rstripw(char *s, int n)_rstripw515,12529
static void _unistripw(PyArray_UCS4 *s, int n)_unistripw530,12785
_char_copy_n_strip(char *original, char *temp, int nc)_char_copy_n_strip546,13074
_char_release(char *ptr, int nc)_char_release561,13367
_uni_copy_n_strip(char *original, char *temp, int nc)_uni_copy_n_strip569,13473
_uni_release(char *ptr, int nc)_uni_release584,13846
#define _rstrip_loop(_rstrip_loop594,13993
#define _reg_loop(_reg_loop615,15254
#define _loop(_loop627,15841
_compare_strings(PyObject *result, PyArrayMultiIterObject *multi,_compare_strings631,15939
#undef _loop_loop686,17217
#undef _reg_loop_reg_loop687,17230
#undef _rstrip_loop_rstrip_loop688,17247
#undef SMALL_STRINGSMALL_STRING689,17267
_strings_richcompare(PyArrayObject *self, PyArrayObject *other, int cmp_op,_strings_richcompare692,17313
_void_compare(PyArrayObject *self, PyArrayObject *other, int cmp_op)_void_compare793,20531
array_richcompare(PyArrayObject *self, PyObject *other, int cmp_op)array_richcompare857,22496
PyArray_ElementStrides(PyObject *arr)PyArray_ElementStrides1034,28023
PyArray_CheckStrides(int elsize, int nd, intp numbytes, intp offset,PyArray_CheckStrides1058,28783
array_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds)array_new1067,29042
array_iter(PyArrayObject *arr)array_iter1216,33847
array_alloc(PyTypeObject *type, Py_ssize_t NPY_UNUSED(nitems))array_alloc1227,34091
NPY_NO_EXPORT PyTypeObject PyArray_Type = {PyArray_Type1237,34317

numpy/core/src/multiarray/arrayobject.h,71
#define _NPY_INTERNAL_ARRAYOBJECT_H__NPY_INTERNAL_ARRAYOBJECT_H_2,37

numpy/core/src/multiarray/arraytypes.h,51
#define _NPY_ARRAYTYPES_H__NPY_ARRAYTYPES_H_2,27

numpy/core/src/multiarray/buffer.c,2034
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
array_getsegcount(PyArrayObject *self, Py_ssize_t *lenp)array_getsegcount24,565
array_getreadbuf(PyArrayObject *self, Py_ssize_t segment, void **ptrptr)array_getreadbuf39,822
array_getwritebuf(PyArrayObject *self, Py_ssize_t segment, void **ptrptr)array_getwritebuf57,1293
array_getcharbuf(PyArrayObject *self, Py_ssize_t segment, constchar **ptrptr)array_getcharbuf70,1663
    char *s;s107,2858
    int allocated;allocated108,2871
    int pos;pos109,2890
} _tmp_string_t;_tmp_string_t110,2903
_append_char(_tmp_string_t *s, char c)_append_char113,2932
_append_str(_tmp_string_t *s, char *c)_append_str136,3430
_is_natively_aligned_at(PyArray_Descr *descr,_is_natively_aligned_at151,3793
_buffer_format_string(PyArray_Descr *descr, _tmp_string_t *str,_buffer_format_string180,4354
    char *format;format402,12523
    int ndim;ndim403,12541
    Py_ssize_t *strides;strides404,12555
    Py_ssize_t *shape;shape405,12580
} _buffer_info_t;_buffer_info_t406,12603
static PyObject *_buffer_info_cache = NULL;_buffer_info_cache418,12981
_buffer_info_new(PyArrayObject *arr)_buffer_info_new422,13082
_buffer_info_cmp(_buffer_info_t *a, _buffer_info_t *b)_buffer_info_cmp460,14074
_buffer_info_free(_buffer_info_t *info)_buffer_info_free482,14494
_buffer_get_info(PyObject *arr)_buffer_get_info495,14741
_buffer_clear_info(PyObject *arr)_buffer_clear_info548,16165
array_getbuffer(PyObject *obj, Py_buffer *view, int flags)array_getbuffer577,16802
_array_dealloc_buffer_info(PyArrayObject *self)_array_dealloc_buffer_info672,19591
_array_dealloc_buffer_info(PyArrayObject *self)_array_dealloc_buffer_info680,19711
NPY_NO_EXPORT PyBufferProcs array_as_buffer = {array_as_buffer688,19849
_descriptor_from_pep3118_format(char *s)_descriptor_from_pep3118_format715,20791
_descriptor_from_pep3118_format(char *s)_descriptor_from_pep3118_format770,22231

numpy/core/src/multiarray/buffer.h,126
#define _NPY_PRIVATE_BUFFER_H__NPY_PRIVATE_BUFFER_H_2,31
NPY_NO_EXPORT PyBufferProcs array_as_buffer;array_as_buffer7,160

numpy/core/src/multiarray/calculation.c,2141
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
#define _check_axis _check_axis19,310
#define PyAO PyAO20,348
power_of_ten(int n)power_of_ten23,390
PyArray_ArgMax(PyArrayObject *op, int axis, PyArrayObject *out)PyArray_ArgMax43,718
PyArray_ArgMin(PyArrayObject *ap, int axis, PyArrayObject *out)PyArray_ArgMin159,3819
PyArray_Max(PyArrayObject *ap, int axis, PyArrayObject *out)PyArray_Max191,4611
PyArray_Min(PyArrayObject *ap, int axis, PyArrayObject *out)PyArray_Min209,5034
PyArray_Ptp(PyArrayObject *ap, int axis, PyArrayObject *out)PyArray_Ptp227,5457
PyArray_Std(PyArrayObject *self, int axis, int rtype, PyArrayObject *out,PyArray_Std269,6335
__New_PyArray_Std(PyArrayObject *self, int axis, int rtype, PyArrayObject *out,__New_PyArray_Std276,6532
PyArray_Sum(PyArrayObject *self, int axis, int rtype, PyArrayObject *out)PyArray_Sum425,10273
PyArray_Prod(PyArrayObject *self, int axis, int rtype, PyArrayObject *out)PyArray_Prod442,10668
PyArray_CumSum(PyArrayObject *self, int axis, int rtype, PyArrayObject *out)PyArray_CumSum459,11070
PyArray_CumProd(PyArrayObject *self, int axis, int rtype, PyArrayObject *out)PyArray_CumProd476,11479
PyArray_Round(PyArrayObject *a, int decimals, PyArrayObject *out)PyArray_Round495,11937
PyArray_Mean(PyArrayObject *self, int axis, int rtype, PyArrayObject *out)PyArray_Mean654,16193
PyArray_Any(PyArrayObject *self, int axis, PyArrayObject *out)PyArray_Any690,17093
PyArray_All(PyArrayObject *self, int axis, PyArrayObject *out)PyArray_All708,17530
_GenericBinaryOutFunction(PyArrayObject *m1, PyObject *m2, PyArrayObject *out,_GenericBinaryOutFunction724,17939
_slow_array_clip(PyArrayObject *self, PyObject *min, PyObject *max, PyArrayObject *out)_slow_array_clip736,18245
PyArray_Clip(PyArrayObject *self, PyObject *min, PyObject *max, PyArrayObject *out)PyArray_Clip771,19020
PyArray_Conjugate(PyArrayObject *self, PyArrayObject *out)PyArray_Conjugate1034,26204
PyArray_Trace(PyArrayObject *self, int offset, int axis1, int axis2,PyArray_Trace1067,27028

numpy/core/src/multiarray/calculation.h,53
#define _NPY_CALCULATION_H__NPY_CALCULATION_H_2,28

numpy/core/src/multiarray/common.c,744
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE4,46
#define NPY_NO_PREFIXNPY_NO_PREFIX5,72
_array_small_type(PyArray_Descr *chktype, PyArray_Descr* mintype)_array_small_type23,411
_array_find_python_scalar_type(PyObject *op)_array_find_python_scalar_type92,2456
_use_default_type(PyObject *op)_use_default_type121,3312
_array_find_type(PyObject *op, PyArray_Descr *minitype, int max)_array_find_type143,3816
_array_typedescr_fromstr(char *str)_array_typedescr_fromstr349,9370
index2ptr(PyArrayObject *mp, intp i)index2ptr498,13112
_zerofill(PyArrayObject *ret)_zerofill521,13600
_IsAligned(PyArrayObject *ap)_IsAligned540,14008
_IsWriteable(PyArrayObject *ap)_IsWriteable565,14761

numpy/core/src/multiarray/common.h,107
#define _NPY_PRIVATE_COMMON_H__NPY_PRIVATE_COMMON_H_2,31
#define error_converting(error_converting4,63

numpy/core/src/multiarray/conversion_utils.c,1326
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
PyArray_Converter(PyObject *object, PyObject **address)PyArray_Converter34,931
PyArray_OutputConverter(PyObject *object, PyArrayObject **address)PyArray_OutputConverter55,1430
PyArray_IntpConverter(PyObject *obj, PyArray_Dims *seq)PyArray_IntpConverter83,2151
PyArray_BufferConverter(PyObject *obj, PyArray_Chunk *buf)PyArray_BufferConverter140,3628
PyArray_AxisConverter(PyObject *obj, int *axis)PyArray_AxisConverter180,4614
PyArray_BoolConverter(PyObject *object, Bool *val)PyArray_BoolConverter198,4947
PyArray_ByteorderConverter(PyObject *obj, char *endian)PyArray_ByteorderConverter216,5247
PyArray_SortkindConverter(PyObject *obj, NPY_SORTKIND *sortkind)PyArray_SortkindConverter271,6729
PyArray_SearchsideConverter(PyObject *obj, void *addr)PyArray_SearchsideConverter316,7842
PyArray_PyIntAsInt(PyObject *o)PyArray_PyIntAsInt356,8835
PyArray_PyIntAsIntp(PyObject *o)PyArray_PyIntAsIntp445,11160
PyArray_IntpFromSequence(PyObject *seq, intp *vals, int maxvals)PyArray_IntpFromSequence548,13868
PyArray_TypestrConvert(int itemsize, int gentype)PyArray_TypestrConvert629,16108
PyArray_IntTupleFromIntp(int len, intp *vals)PyArray_IntTupleFromIntp751,18842

numpy/core/src/multiarray/conversion_utils.h,79
#define _NPY_PRIVATE_CONVERSION_UTILS_H__NPY_PRIVATE_CONVERSION_UTILS_H_2,41

numpy/core/src/multiarray/convert.c,638
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
PyArray_ToList(PyArrayObject *self)PyArray_ToList23,357
PyArray_ToFile(PyArrayObject *self, FILE *fp, char *sep, char *format)PyArray_ToFile63,1341
PyArray_ToString(PyArrayObject *self, NPY_ORDER order)PyArray_ToString208,5943
PyArray_FillWithScalar(PyArrayObject *arr, PyObject *obj)PyArray_FillWithScalar270,7655
PyArray_NewCopy(PyArrayObject *m1, NPY_ORDER fortran)PyArray_NewCopy335,9375
PyArray_View(PyArrayObject *self, PyArray_Descr *type, PyTypeObject *pytype)PyArray_View365,10253

numpy/core/src/multiarray/convert.h,69
#define _NPY_ARRAYOBJECT_CONVERT_H__NPY_ARRAYOBJECT_CONVERT_H_2,36

numpy/core/src/multiarray/convert_datatype.c,1404
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
PyArray_CastToType(PyArrayObject *mp, PyArray_Descr *at, int fortran)PyArray_CastToType27,496
PyArray_GetCastFunc(PyArray_Descr *descr, int type_num)PyArray_GetCastFunc89,2181
_strided_buffered_cast(char *dptr, intp dstride, int delsize, int dswap,_strided_buffered_cast149,3978
_broadcast_cast(PyArrayObject *out, PyArrayObject *in,_broadcast_cast187,5353
PyArray_CastTo(PyArrayObject *out, PyArrayObject *mp)PyArray_CastTo305,8549
_bufferedcast(PyArrayObject *out, PyArrayObject *in,_bufferedcast368,10206
PyArray_CastAnyTo(PyArrayObject *out, PyArrayObject *mp)PyArray_CastAnyTo475,13390
PyArray_CanCastSafely(int fromtype, int totype)PyArray_CanCastSafely519,14709
PyArray_CanCastTo(PyArray_Descr *from, PyArray_Descr *to)PyArray_CanCastTo656,18254
PyArray_CanCastScalar(PyTypeObject *from, PyTypeObject *to)PyArray_CanCastScalar691,19236
PyArray_ValidType(int type)PyArray_ValidType708,19660
_check_object_rec(PyArray_Descr *descr)_check_object_rec736,20253
PyArray_Zero(PyArrayObject *arr)PyArray_Zero749,20568
PyArray_One(PyArrayObject *arr)PyArray_One786,21400
PyArray_ObjectType(PyObject *op, int minimum_type)PyArray_ObjectType826,22273
PyArray_ConvertToCommonType(PyObject *op, int *retn)PyArray_ConvertToCommonType847,22733

numpy/core/src/multiarray/convert_datatype.h,75
#define _NPY_ARRAY_CONVERT_DATATYPE_H__NPY_ARRAY_CONVERT_DATATYPE_H_2,39

numpy/core/src/multiarray/ctors.c,6055
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
typedef int (*next_element)(void **, void *, PyArray_Descr *, void *);next_element32,614
typedef int (*skip_separator)(void **, const char *, void *);skip_separator33,685
fromstr_next_element(char **s, void *dptr, PyArray_Descr *dtype,fromstr_next_element36,759
fromfile_next_element(FILE **fp, void *dptr, PyArray_Descr *dtype,fromfile_next_element47,1003
swab_separator(char *sep)swab_separator59,1409
fromstr_skip_separator(char **s, const char *sep, const char *end)fromstr_skip_separator109,2607
fromfile_skip_separator(FILE **fp, const char *sep, void *NPY_UNUSED(stream_data))fromfile_skip_separator152,3589
_update_descr_and_dimensions(PyArray_Descr **des, intp *newdims,_update_descr_and_dimensions211,5016
object_depth_and_dimension(PyObject *s, int max, intp *dims)object_depth_and_dimension285,6718
_strided_byte_copy(char *dst, intp outstrides, char *src, intp instrides,_strided_byte_copy346,8002
#define _FAST_MOVE(_FAST_MOVE353,8176
#undef _FAST_MOVE_FAST_MOVE387,9189
_unaligned_strided_byte_move(char *dst, intp outstrides, char *src,_unaligned_strided_byte_move392,9223
#define _MOVE_N_SIZE(_MOVE_N_SIZE400,9415
#undef _MOVE_N_SIZE_MOVE_N_SIZE422,9983
_unaligned_strided_byte_copy(char *dst, intp outstrides, char *src,_unaligned_strided_byte_copy427,10026
#define _COPY_N_SIZE(_COPY_N_SIZE434,10217
#undef _COPY_N_SIZE_COPY_N_SIZE456,10785
_strided_byte_swap(void *p, intp stride, intp n, int size)_strided_byte_swap461,10828
byte_swap_vector(void *p, intp n, int size)byte_swap_vector504,11903
copy_and_swap(void *dst, void *src, int itemsize, intp numitems,copy_and_swap512,12083
_copy_from0d(PyArrayObject *dest, PyArrayObject *src, int usecopy, int swap)_copy_from0d537,12616
_flat_copyinto(PyObject *dst, PyObject *src, NPY_ORDER order)_flat_copyinto642,15400
_copy_from_same_shape(PyArrayObject *dest, PyArrayObject *src,_copy_from_same_shape718,17287
_broadcast_copy(PyArrayObject *dest, PyArrayObject *src,_broadcast_copy768,18655
_array_copy_into(PyArrayObject *dest, PyArrayObject *src, int usecopy)_array_copy_into851,20917
PyArray_MoveInto(PyArrayObject *dest, PyArrayObject *src)PyArray_MoveInto918,22766
setArrayFromSequence(PyArrayObject *a, PyObject *s, int dim, intp offset)setArrayFromSequence927,22913
Assign_Array(PyArrayObject *self, PyObject *v)Assign_Array987,24484
Array_FromPyScalar(PyObject *op, PyArray_Descr *typecode)Array_FromPyScalar1007,24992
ObjectArray_FromNestedList(PyObject *s, PyArray_Descr *typecode, int fortran)ObjectArray_FromNestedList1052,26122
discover_depth(PyObject *s, int max, int stop_at_string, int stop_at_tuple)discover_depth1086,26980
discover_itemsize(PyObject *s, int nd, int *itemsize)discover_itemsize1191,29503
discover_dimensions(PyObject *s, int nd, intp *d, int check_it)discover_dimensions1231,30358
Array_FromSequence(PyObject *s, PyArray_Descr *typecode, int fortran,Array_FromSequence1292,31815
PyArray_NewFromDescr(PyTypeObject *subtype, PyArray_Descr *descr, int nd,PyArray_NewFromDescr1379,34169
PyArray_New(PyTypeObject *subtype, int nd, intp *dims, int type_num,PyArray_New1608,40743
_array_from_buffer_3118(PyObject *obj, PyObject **out)_array_from_buffer_31181636,41516
PyArray_FromAny(PyObject *op, PyArray_Descr *newtype, int min_depth,PyArray_FromAny1736,44219
PyArray_CheckFromAny(PyObject *op, PyArray_Descr *descr, int min_depth,PyArray_CheckFromAny1917,49724
PyArray_FromArray(PyArrayObject *arr, PyArray_Descr *newtype, int flags)PyArray_FromArray1952,50744
PyArray_FromStructInterface(PyObject *input)PyArray_FromStructInterface2100,55546
#define PyIntOrLong_Check(PyIntOrLong_Check2157,57089
PyArray_FromInterface(PyObject *input)PyArray_FromInterface2161,57200
PyArray_FromArrayAttr(PyObject *op, PyArray_Descr *typecode, PyObject *context)PyArray_FromArrayAttr2349,62820
PyArray_DescrFromObject(PyObject *op, PyArray_Descr *mintype)PyArray_DescrFromObject2401,64350
PyArray_FromDimsAndDataAndDescr(int nd, int *d,PyArray_FromDimsAndDataAndDescr2416,64785
PyArray_FromDims(int nd, int *d, int type)PyArray_FromDims2444,65577
PyArray_EnsureArray(PyObject *op)PyArray_EnsureArray2477,66693
PyArray_EnsureAnyArray(PyObject *op)PyArray_EnsureAnyArray2500,67217
PyArray_CopyAnyInto(PyArrayObject *dest, PyArrayObject *src)PyArray_CopyAnyInto2514,67555
PyArray_CopyInto(PyArrayObject *dest, PyArrayObject *src)PyArray_CopyInto2591,69871
PyArray_CheckAxis(PyArrayObject *arr, int *axis, int flags)PyArray_CheckAxis2604,70101
PyArray_Zeros(int nd, intp *dims, PyArray_Descr *type, int fortran)PyArray_Zeros2664,71460
PyArray_Empty(int nd, intp *dims, PyArray_Descr *type, int fortran)PyArray_Empty2693,72173
static int _safe_ceil_to_intp(double value, intp* ret)_safe_ceil_to_intp2721,72993
PyArray_Arange(double start, double stop, double step, int type_num)PyArray_Arange2739,73277
_calc_length(PyObject *start, PyObject *stop, PyObject *step, PyObject **next, int cmplx)_calc_length2807,75076
PyArray_ArangeObj(PyObject *start, PyObject *stop, PyObject *step, PyArray_Descr *dtype)PyArray_ArangeObj2881,77035
array_fromfile_binary(FILE *fp, PyArray_Descr *dtype, intp num, size_t *nread)array_fromfile_binary3012,80605
#define FROM_BUFFER_SIZE FROM_BUFFER_SIZE3061,81953
array_from_text(PyArray_Descr *dtype, intp num, char *sep, size_t *nread,array_from_text3063,82006
#undef FROM_BUFFER_SIZEFROM_BUFFER_SIZE3132,83869
PyArray_FromFile(FILE *fp, PyArray_Descr *dtype, intp num, char *sep)PyArray_FromFile3154,84675
PyArray_FromBuffer(PyObject *buf, PyArray_Descr *type,PyArray_FromBuffer3206,86212
PyArray_FromString(char *data, intp slen, PyArray_Descr *dtype,PyArray_FromString3336,90176
PyArray_FromIter(PyObject *obj, PyArray_Descr *dtype, intp count)PyArray_FromIter3423,92827
_array_fill_strides(intp *strides, intp *dims, int nd, size_t itemsize,_array_fill_strides3537,96304

numpy/core/src/multiarray/ctors.h,53
#define _NPY_ARRAY_CTORS_H__NPY_ARRAY_CTORS_H_2,28

numpy/core/src/multiarray/datetime.c,1595
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE7,87
#define NPY_NO_PREFIXNPY_NO_PREFIX8,113
#define NPY_FR_ERR NPY_FR_ERR18,275
    int year, month, day;year26,519
    int year, month, day;month26,519
    int year, month, day;day26,519
} ymdstruct;ymdstruct27,545
    int hour, min, sec;hour30,576
    int hour, min, sec;min30,576
    int hour, min, sec;sec30,576
} hmsstruct;hmsstruct31,600
#define Py_AssertWithArg(Py_AssertWithArg46,971
static int month_offset[2][13] = {month_offset49,1163
static int days_in_month[2][12] = {days_in_month55,1411
is_leapyear(long year)is_leapyear62,1634
day_of_week(npy_longlong absdate)day_of_week73,1843
year_offset(npy_longlong year)year_offset91,2245
days_from_ymd(int year, int month, int day)days_from_ymd109,2832
#define secs_from_hms(secs_from_hms156,4117
days_to_ymdstruct(npy_datetime dlong)days_to_ymdstruct173,4502
seconds_to_hmsstruct(npy_longlong dlong)seconds_to_hmsstruct233,5844
PyArray_DatetimeStructToDatetime(NPY_DATETIMEUNIT fr, npy_datetimestruct *d)PyArray_DatetimeStructToDatetime267,6641
#define _DAYS_PER_MONTH _DAYS_PER_MONTH392,10170
#define _DAYS_PER_YEAR _DAYS_PER_YEAR393,10204
PyArray_TimedeltaStructToTimedelta(NPY_DATETIMEUNIT fr, npy_timedeltastruct *d)PyArray_TimedeltaStructToTimedelta399,10360
PyArray_DatetimeToDatetimeStruct(npy_datetime val, NPY_DATETIMEUNIT fr,PyArray_DatetimeToDatetimeStruct495,13057
PyArray_TimedeltaToTimedeltaStruct(npy_timedelta val, NPY_DATETIMEUNIT fr,PyArray_TimedeltaToTimedeltaStruct791,21590

numpy/core/src/multiarray/descriptor.c,5578
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN3,26
#define _MULTIARRAYMODULE_MULTIARRAYMODULE7,98
#define NPY_NO_PREFIXNPY_NO_PREFIX8,124
#define _chk_byteorder(_chk_byteorder18,283
static PyObject *typeDict = NULL;   /* Must be explicitly loaded */typeDict21,405
_arraydescr_fromobj(PyObject *obj)_arraydescr_fromobj27,595
_check_for_commastring(char *type, int len)_check_for_commastring105,2705
_check_for_datetime(char *type, int len)_check_for_datetime138,3489
#undef _chk_byteorder_chk_byteorder163,3915
_convert_from_tuple(PyObject *obj)_convert_from_tuple166,3961
_convert_from_array_descr(PyObject *obj, int align)_convert_from_array_descr283,7405
_convert_from_list(PyObject *obj, int align)_convert_from_list451,12259
NPY_NO_EXPORT char *_datetime_strings[] = {_datetime_strings529,14320
 _unit_from_str(char *base)_unit_from_str547,14607
static int _multiples_table[16][4] = {_multiples_table569,15019
_convert_divisor_to_multiple(PyArray_DatetimeMetaData *meta)_convert_divisor_to_multiple591,15875
_get_datetime_tuple_from_cobj(PyObject *cobj)_get_datetime_tuple_from_cobj644,17166
_convert_datetime_tuple_to_cobj(PyObject *tuple)_convert_datetime_tuple_to_cobj665,17730
_convert_from_datetime_tuple(PyObject *obj)_convert_from_datetime_tuple693,18529
_convert_from_datetime(PyObject *obj)_convert_from_datetime751,20122
_convert_from_commastring(PyObject *obj, int align)_convert_from_commastring794,21365
_is_tuple_of_integers(PyObject *obj)_is_tuple_of_integers836,22504
_use_inherit(PyArray_Descr *type, PyObject *newobj, int *errflag)_use_inherit867,23253
_use_fields_dict(PyObject *obj, int align)_use_fields_dict943,25539
_convert_from_dict(PyObject *obj, int align)_convert_from_dict959,25954
PyArray_DescrNewFromType(int type_num)PyArray_DescrNewFromType1142,31184
PyArray_DescrConverter2(PyObject *obj, PyArray_Descr **at)PyArray_DescrConverter21157,31474
PyArray_DescrConverter(PyObject *obj, PyArray_Descr **at)PyArray_DescrConverter1181,32170
PyArray_DescrNew(PyArray_Descr *base)PyArray_DescrNew1454,39961
arraydescr_dealloc(PyArray_Descr *self)arraydescr_dealloc1488,40874
static PyMemberDef arraydescr_members[] = {arraydescr_members1516,41759
arraydescr_subdescr_get(PyArray_Descr *self)arraydescr_subdescr_get1537,42500
_append_to_datetime_typestr(PyArray_Descr *self, PyObject *ret)_append_to_datetime_typestr1548,42761
arraydescr_protocol_typestr_get(PyArray_Descr *self)arraydescr_protocol_typestr_get1590,43886
arraydescr_typename_get(PyArray_Descr *self)arraydescr_typename_get1616,44467
arraydescr_base_get(PyArray_Descr *self)arraydescr_base_get1659,45630
arraydescr_shape_get(PyArray_Descr *self)arraydescr_shape_get1670,45876
arraydescr_protocol_descr_get(PyArray_Descr *self)arraydescr_protocol_descr_get1683,46223
arraydescr_isbuiltin_get(PyArray_Descr *self)arraydescr_isbuiltin_get1720,47218
_arraydescr_isnative(PyArray_Descr *self)_arraydescr_isnative1734,47467
arraydescr_isnative_get(PyArray_Descr *self)arraydescr_isnative_get1767,48305
arraydescr_fields_get(PyArray_Descr *self)arraydescr_fields_get1781,48575
arraydescr_metadata_get(PyArray_Descr *self)arraydescr_metadata_get1791,48772
arraydescr_hasobject_get(PyArray_Descr *self)arraydescr_hasobject_get1801,48976
arraydescr_names_get(PyArray_Descr *self)arraydescr_names_get1815,49226
arraydescr_names_set(PyArray_Descr *self, PyObject *val)arraydescr_names_set1826,49425
static PyGetSetDef arraydescr_getsets[] = {arraydescr_getsets1883,51130
_invalid_metadata_check(PyObject *metadata)_invalid_metadata_check1925,52259
arraydescr_new(PyTypeObject *NPY_UNUSED(subtype), PyObject *args, PyObject *kwds)args1942,52632
_get_pickleabletype_from_metadata(PyObject *metadata)_get_pickleabletype_from_metadata2021,54999
arraydescr_reduce(PyArray_Descr *self, PyObject *NPY_UNUSED(args))arraydescr_reduce2043,55553
_descr_find_object(PyArray_Descr *self)_descr_find_object2158,58989
arraydescr_setstate(PyArray_Descr *self, PyObject *args)arraydescr_setstate2193,59961
#define _ARGSTR_ _ARGSTR_2218,60604
#undef _ARGSTR__ARGSTR_2226,60885
#define _ARGSTR_ _ARGSTR_2231,60960
#undef _ARGSTR__ARGSTR_2239,61228
#define _ARGSTR_ _ARGSTR_2244,61303
#undef _ARGSTR__ARGSTR_2252,61556
#define _ARGSTR_ _ARGSTR_2257,61631
#undef _ARGSTR__ARGSTR_2265,61876
#define _ARGSTR_ _ARGSTR_2271,61972
#undef _ARGSTR__ARGSTR_2278,62178
PyArray_DescrAlignConverter(PyObject *obj, PyArray_Descr **at)PyArray_DescrAlignConverter2409,65876
PyArray_DescrAlignConverter2(PyObject *obj, PyArray_Descr **at)PyArray_DescrAlignConverter22445,66801
PyArray_DescrNewByteorder(PyArray_Descr *self, char newendian)PyArray_DescrNewByteorder2496,68213
arraydescr_newbyteorder(PyArray_Descr *self, PyObject *args)arraydescr_newbyteorder2570,70486
static PyMethodDef arraydescr_methods[] = {arraydescr_methods2581,70769
arraydescr_str(PyArray_Descr *self)arraydescr_str2596,71185
arraydescr_repr(PyArray_Descr *self)arraydescr_repr2660,73218
arraydescr_richcompare(PyArray_Descr *self, PyObject *other, int cmp_op)arraydescr_richcompare2681,73736
descr_length(PyObject *self0)descr_length2755,75565
descr_repeat(PyObject *self, Py_ssize_t length)descr_repeat2768,75779
descr_subscript(PyArray_Descr *self, PyObject *op)descr_subscript2786,76235
static PySequenceMethods descr_as_sequence = {descr_as_sequence2857,78154
static PyMappingMethods descr_as_mapping = {descr_as_mapping2869,78648
NPY_NO_EXPORT PyTypeObject PyArrayDescr_Type = {PyArrayDescr_Type2877,78976

numpy/core/src/multiarray/descriptor.h,129
#define _NPY_ARRAYDESCR_H__NPY_ARRAYDESCR_H_2,27
array_set_typeDict(PyObject *NPY_UNUSED(ignored), PyObject *args);args8,231

numpy/core/src/multiarray/flagsobject.c,2089
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN3,26
#define _MULTIARRAYMODULE_MULTIARRAYMODULE7,98
#define NPY_NO_PREFIXNPY_NO_PREFIX8,124
PyArray_NewFlagsObject(PyObject *obj)PyArray_NewFlagsObject29,454
PyArray_UpdateFlags(PyArrayObject *ret, int flagmask)PyArray_UpdateFlags53,1003
_IsContiguous(PyArrayObject *ap)_IsContiguous108,2232
_IsFortranContiguous(PyArrayObject *ap)_IsFortranContiguous138,2830
arrayflags_dealloc(PyArrayFlagsObject *self)arrayflags_dealloc166,3371
#define _define_get(_define_get173,3495
arrayflags_forc_get(PyArrayFlagsObject *self)arrayflags_forc_get194,4406
arrayflags_fnc_get(PyArrayFlagsObject *self)arrayflags_fnc_get210,4708
arrayflags_farray_get(PyArrayFlagsObject *self)arrayflags_farray_get226,5010
arrayflags_num_get(PyArrayFlagsObject *self)arrayflags_num_get243,5364
arrayflags_updateifcopy_set(PyArrayFlagsObject *self, PyObject *obj)arrayflags_updateifcopy_set250,5520
arrayflags_aligned_set(PyArrayFlagsObject *self, PyObject *obj)arrayflags_aligned_set267,5995
arrayflags_writeable_set(PyArrayFlagsObject *self, PyObject *obj)arrayflags_writeable_set285,6495
static PyGetSetDef arrayflags_getsets[] = {arrayflags_getsets303,6987
arrayflags_getitem(PyArrayFlagsObject *self, PyObject *ind)arrayflags_getitem364,8455
arrayflags_setitem(PyArrayFlagsObject *self, PyObject *ind, PyObject *item)arrayflags_setitem482,11635
_torf_(int flags, int val)_torf_523,12828
arrayflags_print(PyArrayFlagsObject *self)arrayflags_print534,12980
arrayflags_compare(PyArrayFlagsObject *self, PyArrayFlagsObject *other)arrayflags_compare550,13608
arrayflags_richcompare(PyObject *self, PyObject *other, int cmp_op)arrayflags_richcompare565,13869
static PyMappingMethods arrayflags_as_mapping = {arrayflags_as_mapping592,14580
arrayflags_new(PyTypeObject *NPY_UNUSED(self), PyObject *args, PyObject *NPY_UNUSED(kwds))args604,14929
arrayflags_new(PyTypeObject *NPY_UNUSED(self), PyObject *args, PyObject *NPY_UNUSED(kwds))NPY_UNUSED604,14929
NPY_NO_EXPORT PyTypeObject PyArrayFlags_Type = {PyArrayFlags_Type618,15295

numpy/core/src/multiarray/getset.c,2317
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN3,26
#define _MULTIARRAYMODULE_MULTIARRAYMODULE7,98
#define NPY_NO_PREFIXNPY_NO_PREFIX8,124
array_ndim_get(PyArrayObject *self)array_ndim_get23,418
array_flags_get(PyArrayObject *self)array_flags_get29,514
array_shape_get(PyArrayObject *self)array_shape_get35,627
array_shape_set(PyArrayObject *self, PyObject *val)array_shape_set42,746
array_strides_get(PyArrayObject *self)array_strides_get87,1966
array_strides_set(PyArrayObject *self, PyObject *obj)array_strides_set93,2083
array_priority_get(PyArrayObject *self)array_priority_get153,3945
array_typestr_get(PyArrayObject *self)array_typestr_get164,4181
array_descr_get(PyArrayObject *self)array_descr_get170,4300
array_protocol_descr_get(PyArrayObject *self)array_protocol_descr_get177,4424
array_protocol_strides_get(PyArrayObject *self)array_protocol_strides_get205,5011
array_dataptr_get(PyArrayObject *self)array_dataptr_get217,5240
array_ctypes_get(PyArrayObject *self)array_ctypes_get226,5490
array_interface_get(PyArrayObject *self)array_interface_get241,5913
array_data_get(PyArrayObject *self)array_data_get280,6775
array_data_set(PyArrayObject *self, PyObject *op)array_data_set302,7384
array_itemsize_get(PyArrayObject *self)array_itemsize_get349,8713
array_size_get(PyArrayObject *self)array_size_get355,8831
array_nbytes_get(PyArrayObject *self)array_nbytes_get371,9163
array_descr_set(PyArrayObject *self, PyObject *arg)array_descr_set397,9776
array_struct_get(PyArrayObject *self)array_struct_get506,13108
array_base_get(PyArrayObject *self)array_base_get560,14676
_get_part(PyArrayObject *self, int imag)_get_part577,15016
array_real_get(PyArrayObject *self)array_real_get617,16129
array_real_set(PyArrayObject *self, PyObject *val)array_real_set633,16389
array_imag_get(PyArrayObject *self)array_imag_get666,17050
array_imag_set(PyArrayObject *self, PyObject *val)array_imag_set694,17921
array_flat_get(PyArrayObject *self)array_flat_get723,18630
array_flat_set(PyArrayObject *self, PyObject *val)array_flat_set729,18728
array_transpose_get(PyArrayObject *self)array_transpose_get798,20711
array_finalize_get(PyArrayObject *NPY_UNUSED(self))NPY_UNUSED807,20899
NPY_NO_EXPORT PyGetSetDef array_getsetlist[] = {array_getsetlist813,21000

numpy/core/src/multiarray/getset.h,55
#define _NPY_ARRAY_GETSET_H__NPY_ARRAY_GETSET_H_2,29

numpy/core/src/multiarray/hashdescr.c,747
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE3,45
static int _is_array_descr_builtin(PyArray_Descr* descr)_is_array_descr_builtin36,1326
static int _array_descr_builtin(PyArray_Descr* descr, PyObject *l)_array_descr_builtin50,1652
static int _array_descr_walk_fields(PyObject* fields, PyObject* l)_array_descr_walk_fields88,2569
static int _array_descr_walk_subarray(PyArray_ArrayDescr* adescr, PyObject *l)_array_descr_walk_subarray151,4415
static int _array_descr_walk(PyArray_Descr* descr, PyObject *l)_array_descr_walk190,5542
static int _PyArray_DescrHashImp(PyArray_Descr *descr, long *hash)_PyArray_DescrHashImp222,6355
PyArray_DescrHash(PyObject* odescr)PyArray_DescrHash276,7547

numpy/core/src/multiarray/hashdescr.h,49
#define _NPY_HASHDESCR_H__NPY_HASHDESCR_H_2,26

numpy/core/src/multiarray/item_selection.c,2120
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
#define PyAO PyAO19,305
#define _check_axis _check_axis20,332
PyArray_TakeFrom(PyArrayObject *self0, PyObject *indices0, int axis,PyArray_TakeFrom26,420
PyArray_PutTo(PyArrayObject *self, PyObject* values0, PyObject *indices0,PyArray_PutTo207,5816
PyArray_PutMask(PyArrayObject *self, PyObject* values0, PyObject* mask0)PyArray_PutMask385,11448
PyArray_Repeat(PyArrayObject *aop, PyObject *op, int axis)PyArray_Repeat490,14287
PyArray_Choose(PyArrayObject *ip, PyObject *op, PyArrayObject *ret,PyArray_Choose594,16830
_new_sort(PyArrayObject *op, int axis, NPY_SORTKIND which)_new_sort745,21271
_new_argsort(PyArrayObject *op, int axis, NPY_SORTKIND which)_new_argsort810,23050
static PyArrayObject *global_obj;global_obj904,25847
qsortCompare (const void *a, const void *b)qsortCompare907,25893
#define SWAPAXES(SWAPAXES917,26190
#define SWAPBACK(SWAPBACK932,26912
#define SWAPINTP(SWAPINTP942,27425
#define SWAPAXES2(SWAPAXES2943,27484
#define SWAPBACK2(SWAPBACK2952,28009
PyArray_Sort(PyArrayObject *op, int axis, NPY_SORTKIND which)PyArray_Sort964,28520
static char *global_data;global_data1037,30360
argsort_static_compare(const void *ip1, const void *ip2)argsort_static_compare1040,30398
PyArray_ArgSort(PyArrayObject *op, int axis, NPY_SORTKIND which)PyArray_ArgSort1054,30814
PyArray_LexSort(PyObject *sort_keys, int axis)PyArray_LexSort1152,33773
local_search_left(PyArrayObject *arr, PyArrayObject *key, PyArrayObject *ret)local_search_left1375,40701
local_search_right(PyArrayObject *arr, PyArrayObject *key, PyArrayObject *ret)local_search_right1418,42013
PyArray_SearchSorted(PyArrayObject *op1, PyObject *op2, NPY_SEARCHSIDE side)PyArray_SearchSorted1451,42870
PyArray_Diagonal(PyArrayObject *self, int offset, int axis1, int axis2)PyArray_Diagonal1514,44786
PyArray_Compress(PyArrayObject *self, PyObject *condition, int axis,PyArray_Compress1655,48715
PyArray_Nonzero(PyArrayObject *self)PyArray_Nonzero1687,49450

numpy/core/src/multiarray/iterators.c,5082
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
#define PseudoIndex PseudoIndex19,324
#define RubberIndex RubberIndex20,347
#define SingleIndex SingleIndex21,370
parse_subindex(PyObject *op, intp *step_size, intp *n_steps, intp max)parse_subindex24,413
parse_index(PyArrayObject *self, PyObject *op,parse_index79,1822
slice_coerce_index(PyObject *o, intp *v)slice_coerce_index183,5030
slice_GetIndices(PySliceObject *r, intp length,slice_GetIndices196,5357
get_ptr_simple(PyArrayIterObject* iter, npy_intp *coordinates)get_ptr_simple273,7321
array_iter_base_init(PyArrayIterObject *it, PyArrayObject *ao)array_iter_base_init294,7718
array_iter_base_dealloc(PyArrayIterObject *it)array_iter_base_dealloc332,8727
PyArray_IterNew(PyObject *obj)PyArray_IterNew341,8861
PyArray_BroadcastToShape(PyObject *obj, intp *dims, int nd)PyArray_BroadcastToShape366,9452
PyArray_IterAllButAxis(PyObject *obj, int *inaxis)PyArray_IterAllButAxis441,11308
PyArray_RemoveSmallest(PyArrayMultiIterObject *multi)PyArray_RemoveSmallest494,12786
arrayiter_next(PyArrayIterObject *it)arrayiter_next536,13815
arrayiter_dealloc(PyArrayIterObject *it)arrayiter_dealloc549,14049
iter_length(PyArrayIterObject *self)iter_length556,14165
iter_subscript_Bool(PyArrayIterObject *self, PyArrayObject *ind)iter_subscript_Bool563,14249
iter_subscript_int(PyArrayIterObject *self, PyArrayObject *ind)iter_subscript_int624,15891
iter_subscript(PyArrayIterObject *self, PyObject *ind)iter_subscript700,18132
iter_ass_sub_Bool(PyArrayIterObject *self, PyArrayObject *ind,iter_ass_sub_Bool848,22457
iter_ass_sub_int(PyArrayIterObject *self, PyArrayObject *ind,iter_ass_sub_int889,23567
iter_ass_subscript(PyArrayIterObject *self, PyObject *ind, PyObject *val)iter_ass_subscript937,24985
static PyMappingMethods iter_as_mapping = {iter_as_mapping1108,29799
iter_array(PyArrayIterObject *it, PyObject *NPY_UNUSED(op))iter_array1121,30155
iter_copy(PyArrayIterObject *it, PyObject *args)iter_copy1173,31664
static PyMethodDef iter_methods[] = {iter_methods1181,31823
iter_richcompare(PyArrayIterObject *self, PyObject *other, int cmp_op)iter_richcompare1193,32111
static PyMemberDef iter_members[] = {iter_members1207,32417
iter_coords_get(PyArrayIterObject *self)iter_coords_get1220,32699
static PyGetSetDef iter_getsets[] = {iter_getsets1244,33313
NPY_NO_EXPORT PyTypeObject PyArrayIter_Type = {PyArrayIter_Type1252,33474
PyArray_Broadcast(PyArrayMultiIterObject *mit)PyArray_Broadcast1321,36970
PyArray_MultiIterFromObjects(PyObject **mps, int n, int nadd, ...)PyArray_MultiIterFromObjects1412,39872
PyArray_MultiIterNew(int n, ...)PyArray_MultiIterNew1475,41350
arraymultiter_new(PyTypeObject *NPY_UNUSED(subtype), PyObject *args, PyObject *kwds)args1532,42660
arraymultiter_next(PyArrayMultiIterObject *multi)arraymultiter_next1590,44125
arraymultiter_dealloc(PyArrayMultiIterObject *multi)arraymultiter_dealloc1614,44667
arraymultiter_size_get(PyArrayMultiIterObject *self)arraymultiter_size_get1625,44889
arraymultiter_index_get(PyArrayMultiIterObject *self)arraymultiter_index_get1640,45220
arraymultiter_shape_get(PyArrayMultiIterObject *self)arraymultiter_shape_get1655,45555
arraymultiter_iters_get(PyArrayMultiIterObject *self)arraymultiter_iters_get1661,45697
static PyGetSetDef arraymultiter_getsetlist[] = {arraymultiter_getsetlist1678,46037
static PyMemberDef arraymultiter_members[] = {arraymultiter_members1698,46485
arraymultiter_reset(PyArrayMultiIterObject *self, PyObject *args)arraymultiter_reset1711,46785
static PyMethodDef arraymultiter_methods[] = {arraymultiter_methods1721,47001
NPY_NO_EXPORT PyTypeObject PyArrayMultiIter_Type = {PyArrayMultiIter_Type1728,47185
static char* _set_constant(PyArrayNeighborhoodIterObject* iter,_set_constant1794,50679
#define _INF_SET_PTR(_INF_SET_PTR1827,51468
get_ptr_constant(PyArrayIterObject* _iter, npy_intp *coordinates)get_ptr_constant1836,51732
#undef _INF_SET_PTR_INF_SET_PTR1849,52100
#define _NPY_IS_EVEN(_NPY_IS_EVEN1851,52121
__npy_pos_remainder(npy_intp i, npy_intp n)__npy_pos_remainder1862,52506
#undef _NPY_IS_EVEN_NPY_IS_EVEN1882,52874
#define _INF_SET_PTR_MIRROR(_INF_SET_PTR_MIRROR1884,52895
get_ptr_mirror(PyArrayIterObject* _iter, npy_intp *coordinates)get_ptr_mirror1891,53145
#undef _INF_SET_PTR_MIRROR_INF_SET_PTR_MIRROR1904,53522
__npy_euclidean_division(npy_intp i, npy_intp n)__npy_euclidean_division1908,53625
#define _INF_SET_PTR_CIRCULAR(_INF_SET_PTR_CIRCULAR1919,53764
get_ptr_circular(PyArrayIterObject* _iter, npy_intp *coordinates)get_ptr_circular1925,53970
#undef _INF_SET_PTR_CIRCULAR_INF_SET_PTR_CIRCULAR1938,54351
PyArray_NeighborhoodIterNew(PyArrayIterObject *x, intp *bounds,PyArray_NeighborhoodIterNew1947,54509
static void neighiter_dealloc(PyArrayNeighborhoodIterObject* iter)neighiter_dealloc2045,57961
NPY_NO_EXPORT PyTypeObject PyArrayNeighborhoodIter_Type = {PyArrayNeighborhoodIter_Type2061,58433

numpy/core/src/multiarray/iterators.h,59
#define _NPY_ARRAYITERATORS_H__NPY_ARRAYITERATORS_H_2,31

numpy/core/src/multiarray/mapping.c,2688
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE6,95
#define NPY_NO_PREFIXNPY_NO_PREFIX7,121
#define SOBJ_NOTFANCY SOBJ_NOTFANCY18,292
#define SOBJ_ISFANCY SOBJ_ISFANCY19,316
#define SOBJ_BADARRAY SOBJ_BADARRAY20,339
#define SOBJ_TOOMANY SOBJ_TOOMANY21,363
#define SOBJ_LISTTUP SOBJ_LISTTUP22,386
array_length(PyArrayObject *self)array_length32,754
array_big_item(PyArrayObject *self, intp i)array_big_item43,986
_array_ass_item(PyArrayObject *self, Py_ssize_t i, PyObject *v)_array_ass_item74,1957
array_item_nice(PyArrayObject *self, Py_ssize_t i)array_item_nice80,2143
array_ass_big_item(PyArrayObject *self, intp i, PyObject *v)array_ass_big_item96,2537
_swap_axes(PyArrayMapIterObject *mit, PyArrayObject **ret, int getmap)_swap_axes140,3580
PyArray_GetMap(PyArrayMapIterObject *mit)PyArray_GetMap216,5633
PyArray_SetMap(PyArrayMapIterObject *mit, PyObject *op)PyArray_SetMap277,7340
count_new_axes_0d(PyObject *tuple)count_new_axes_0d350,9467
add_new_axes_0d(PyArrayObject *arr,  int newaxis_count)add_new_axes_0d384,10393
fancy_indexing_check(PyObject *args)fancy_indexing_check410,11097
array_subscript_simple(PyArrayObject *self, PyObject *op)array_subscript_simple503,13791
array_subscript(PyArrayObject *self, PyObject *op)array_subscript538,14825
array_ass_sub_simple(PyArrayObject *self, PyObject *index, PyObject *op)array_ass_sub_simple690,19521
_tuple_of_integers(PyObject *seq, intp *vals, int maxvals)_tuple_of_integers740,20767
array_ass_sub(PyArrayObject *self, PyObject *index, PyObject *op)array_ass_sub763,21247
array_subscript_nice(PyArrayObject *self, PyObject *op)array_subscript_nice908,25830
NPY_NO_EXPORT PyMappingMethods array_as_mapping = {array_as_mapping1005,28777
_nonzero_indices(PyObject *myBool, PyArrayIterObject **iters)_nonzero_indices1031,29862
_convert_obj(PyObject *obj, PyArrayIterObject **iter)_convert_obj1125,32292
PyArray_MapIterReset(PyArrayMapIterObject *mit)PyArray_MapIterReset1153,33009
PyArray_MapIterNext(PyArrayMapIterObject *mit)PyArray_MapIterNext1200,34410
PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr)PyArray_MapIterBind1261,36303
PyArray_MapIterNew(PyObject *indexobj, int oned, int fancy)PyArray_MapIterNew1427,41306
#undef SOBJ_NOTFANCYSOBJ_NOTFANCY1472,42546
#undef SOBJ_ISFANCYSOBJ_ISFANCY1473,42567
#undef SOBJ_BADARRAYSOBJ_BADARRAY1474,42587
#undef SOBJ_TOOMANYSOBJ_TOOMANY1475,42608
#undef SOBJ_LISTTUPSOBJ_LISTTUP1476,42628
arraymapiter_dealloc(PyArrayMapIterObject *mit)arraymapiter_dealloc1602,46461
NPY_NO_EXPORT PyTypeObject PyArrayMapIter_Type = {PyArrayMapIter_Type1625,47117

numpy/core/src/multiarray/mapping.h,297
#define _NPY_ARRAYMAPPING_H__NPY_ARRAYMAPPING_H_2,29
NPY_NO_EXPORT PyMappingMethods array_as_mapping;array_as_mapping7,160
                #define array_ass_item array_ass_item27,656
                #define array_ass_item array_ass_item31,776
#define array_ass_item array_ass_item37,962

numpy/core/src/multiarray/methods.c,6046
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE6,92
#define NPY_NO_PREFIXNPY_NO_PREFIX7,118
NpyArg_ParseKeywords(PyObject *keys, const char *format, char **kwlist, ...)NpyArg_ParseKeywords29,532
#define _ARET(_ARET48,1032
array_take(PyArrayObject *self, PyObject *args, PyObject *kwds)array_take51,1105
array_fill(PyArrayObject *self, PyObject *args)array_fill72,1879
array_put(PyArrayObject *self, PyObject *args, PyObject *kwds)array_put86,2162
array_reshape(PyArrayObject *self, PyObject *args, PyObject *kwds)array_reshape101,2688
array_squeeze(PyArrayObject *self, PyObject *args)array_squeeze142,3780
array_view(PyArrayObject *self, PyObject *args, PyObject *kwds)array_view151,3954
array_argmax(PyArrayObject *self, PyObject *args, PyObject *kwds)array_argmax199,5569
array_argmin(PyArrayObject *self, PyObject *args, PyObject *kwds)array_argmin216,6115
array_max(PyArrayObject *self, PyObject *args, PyObject *kwds)array_max233,6661
array_ptp(PyArrayObject *self, PyObject *args, PyObject *kwds)array_ptp250,7194
array_min(PyArrayObject *self, PyObject *args, PyObject *kwds)array_min268,7728
array_swapaxes(PyArrayObject *self, PyObject *args)array_swapaxes285,8261
PyArray_GetField(PyArrayObject *self, PyArray_Descr *typed, int offset)PyArray_GetField301,8599
array_getfield(PyArrayObject *self, PyObject *args, PyObject *kwds)array_getfield330,9572
PyArray_SetField(PyArrayObject *self, PyArray_Descr *dtype,PyArray_SetField352,10129
array_setfield(PyArrayObject *self, PyObject *args, PyObject *kwds)array_setfield383,11171
PyArray_Byteswap(PyArrayObject *self, Bool inplace)PyArray_Byteswap409,11864
array_byteswap(PyArrayObject *self, PyObject *args)array_byteswap458,13328
array_tolist(PyArrayObject *self, PyObject *args)array_tolist469,13576
array_tostring(PyArrayObject *self, PyObject *args, PyObject *kwds)array_tostring479,13749
array_tofile(PyArrayObject *self, PyObject *args, PyObject *kwds)array_tofile497,14223
array_toscalar(PyArrayObject *self, PyObject *args) {array_toscalar545,15333
array_setscalar(PyArrayObject *self, PyObject *args) {array_setscalar635,18166
array_cast(PyArrayObject *self, PyObject *args)array_cast755,21876
array_wraparray(PyArrayObject *self, PyObject *args)array_wraparray786,22648
array_preparearray(PyArrayObject *self, PyObject *args)array_preparearray829,23866
array_getarray(PyArrayObject *self, PyObject *args)array_getarray863,24832
array_copy(PyArrayObject *self, PyObject *args)array_copy915,26254
array_resize(PyArrayObject *self, PyObject *args, PyObject *kwds)array_resize928,26559
array_repeat(PyArrayObject *self, PyObject *args, PyObject *kwds) {array_repeat971,27580
array_choose(PyArrayObject *self, PyObject *args, PyObject *kwds)array_choose985,28037
array_sort(PyArrayObject *self, PyObject *args, PyObject *kwds)array_sort1012,28718
array_argsort(PyArrayObject *self, PyObject *args, PyObject *kwds)array_argsort1067,30341
array_searchsorted(PyArrayObject *self, PyObject *args, PyObject *kwds)array_searchsorted1117,31939
_deepcopy_call(char *iptr, char *optr, PyArray_Descr *dtype,_deepcopy_call1132,32426
array_deepcopy(PyArrayObject *self, PyObject *args)array_deepcopy1172,33610
_getlist_pkl(PyArrayObject *self)_getlist_pkl1212,34724
_setlist_pkl(PyArrayObject *self, PyObject *list)_setlist_pkl1239,35385
array_reduce(PyArrayObject *self, PyObject *NPY_UNUSED(args))array_reduce1261,35934
array_setstate(PyArrayObject *self, PyObject *args)array_setstate1340,38629
PyArray_Dump(PyObject *self, PyObject *file, int protocol)PyArray_Dump1530,44649
PyArray_Dumps(PyObject *self, int protocol)PyArray_Dumps1567,45447
array_dump(PyArrayObject *self, PyObject *args)array_dump1589,45899
array_dumps(PyArrayObject *self, PyObject *args)array_dumps1607,46227
array_transpose(PyArrayObject *self, PyObject *args)array_transpose1617,46413
_get_type_num_double(PyArray_Descr *dtype1, PyArray_Descr *dtype2)_get_type_num_double1650,47159
#define _CHKTYPENUM(_CHKTYPENUM1664,47460
array_mean(PyArrayObject *self, PyObject *args, PyObject *kwds)array_mean1667,47547
array_sum(PyArrayObject *self, PyObject *args, PyObject *kwds)array_sum1691,48324
array_cumsum(PyArrayObject *self, PyObject *args, PyObject *kwds)array_cumsum1716,49084
array_prod(PyArrayObject *self, PyObject *args, PyObject *kwds)array_prod1740,49849
array_cumprod(PyArrayObject *self, PyObject *args, PyObject *kwds)array_cumprod1764,50610
array_dot(PyArrayObject *self, PyObject *args, PyObject *kwds)array_dot1789,51378
array_any(PyArrayObject *self, PyObject *args, PyObject *kwds)array_any1812,51918
array_all(PyArrayObject *self, PyObject *args, PyObject *kwds)array_all1830,52452
array_stddev(PyArrayObject *self, PyObject *args, PyObject *kwds)array_stddev1848,52986
array_variance(PyArrayObject *self, PyObject *args, PyObject *kwds)array_variance1874,53814
array_compress(PyArrayObject *self, PyObject *args, PyObject *kwds)array_compress1900,54644
array_nonzero(PyArrayObject *self, PyObject *args)array_nonzero1919,55264
array_trace(PyArrayObject *self, PyObject *args, PyObject *kwds)array_trace1929,55439
#undef _CHKTYPENUM_CHKTYPENUM1950,56166
array_clip(PyArrayObject *self, PyObject *args, PyObject *kwds)array_clip1954,56205
array_conjugate(PyArrayObject *self, PyObject *args)array_conjugate1975,56868
array_diagonal(PyArrayObject *self, PyObject *args, PyObject *kwds)array_diagonal1989,57170
array_flatten(PyArrayObject *self, PyObject *args)array_flatten2003,57590
array_ravel(PyArrayObject *self, PyObject *args)array_ravel2015,57856
array_round(PyArrayObject *self, PyObject *args, PyObject *kwds)array_round2028,58144
array_setflags(PyArrayObject *self, PyObject *args, PyObject *kwds)array_setflags2045,58608
array_newbyteorder(PyArrayObject *self, PyObject *args)array_newbyteorder2110,60460
NPY_NO_EXPORT PyMethodDef array_methods[] = {array_methods2127,60854
#undef _ARET_ARET2319,66415

numpy/core/src/multiarray/methods.h,57
#define _NPY_ARRAY_METHODS_H__NPY_ARRAY_METHODS_H_2,30

numpy/core/src/multiarray/multiarraymodule.c,6777
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN17,359
#define _MULTIARRAYMODULE_MULTIARRAYMODULE21,431
#define NPY_NO_PREFIXNPY_NO_PREFIX22,457
NPY_NO_EXPORT int NPY_NUMUSERTYPES = 0;NPY_NUMUSERTYPES32,624
#define PyAO PyAO34,665
PyArray_GetPriority(PyObject *obj, double default_)PyArray_GetPriority50,974
PyArray_MultiplyIntList(int *l1, int n)PyArray_MultiplyIntList74,1471
PyArray_MultiplyList(intp *l1, int n)PyArray_MultiplyList88,1646
PyArray_OverflowMultiplyList(intp *l1, int n)PyArray_OverflowMultiplyList102,1870
PyArray_GetPtr(PyArrayObject *obj, intp* ind)PyArray_GetPtr127,2288
PyArray_CompareLists(intp *l1, intp *l2, int n)PyArray_CompareLists143,2564
PyArray_AsCArray(PyObject **op, void *ptr, intp *dims, int nd,PyArray_AsCArray170,3214
PyArray_As1D(PyObject **op, char **ptr, int *d1, int typecode)PyArray_As1D233,4874
PyArray_As2D(PyObject **op, char ***ptr, int *d1, int *d2, int typecode)PyArray_As2D254,5333
PyArray_Free(PyObject *op, void *ptr)PyArray_Free278,5881
_swap_and_concat(PyObject *op, int axis, int n)_swap_and_concat294,6140
PyArray_Concatenate(PyObject *op, int axis)PyArray_Concatenate342,7361
_signbit_set(PyArrayObject *arr)_signbit_set461,10695
PyArray_ScalarKind(int typenum, PyArrayObject **arr)PyArray_ScalarKind485,11228
PyArray_CanCoerceScalar(int thistype, int neededtype,PyArray_CanCoerceScalar526,12252
new_array_for_sum(PyArrayObject *ap1, PyArrayObject *ap2,new_array_for_sum577,13757
PyArray_InnerProduct(PyObject *op1, PyObject *op2)PyArray_InnerProduct610,14794
PyArray_MatrixProduct(PyObject *op1, PyObject *op2)PyArray_MatrixProduct718,17829
PyArray_CopyAndTranspose(PyObject *op)PyArray_CopyAndTranspose848,21533
_pyarray_correlate(PyArrayObject *ap1, PyArrayObject *ap2, int typenum,_pyarray_correlate915,23280
_pyarray_revert(PyArrayObject *ret)_pyarray_revert1022,25638
PyArray_Correlate2(PyObject *op1, PyObject *op2, int mode)PyArray_Correlate21075,26928
PyArray_Correlate(PyObject *op1, PyObject *op2, int mode)PyArray_Correlate1141,28399
array_putmask(PyObject *NPY_UNUSED(module), PyObject *args, PyObject *kwds)args1180,29286
PyArray_OrderConverter(PyObject *object, NPY_ORDER *val)PyArray_OrderConverter1198,29780
PyArray_ClipmodeConverter(PyObject *object, NPY_CLIPMODE *val)PyArray_ClipmodeConverter1248,31105
_equivalent_fields(PyObject *field1, PyObject *field2) {_equivalent_fields1305,32566
_equivalent_units(PyObject *meta1, PyObject *meta2)_equivalent_units1337,33189
PyArray_EquivTypes(PyArray_Descr *typ1, PyArray_Descr *typ2)PyArray_EquivTypes1371,34030
PyArray_EquivTypenums(int typenum1, int typenum2)PyArray_EquivTypenums1401,34939
_prepend_ones(PyArrayObject *arr, int nd, int ndmin)_prepend_ones1417,35261
#define _ARET(_ARET1443,35977
#define STRIDING_OK(STRIDING_OK1445,36032
_array_fromobject(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws)args1452,36404
array_empty(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kwds)args1556,39441
array_scalar(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kwds)args1593,40388
array_zeros(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kwds)args1653,41998
array_fromstring(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *keywds)args1685,42884
array_fromfile(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *keywds)args1706,43480
array_fromiter(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *keywds)args1753,44713
array_frombuffer(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *keywds)args1770,45229
array_concatenate(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args1790,45899
array_correlate(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args1837,46981
array_correlate2(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args1851,47357
array_arange(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws) {args1865,47736
PyArray_GetNDArrayCVersion(void)PyArray_GetNDArrayCVersion1884,48382
PyArray_GetNDArrayCFeatureVersion(void)PyArray_GetNDArrayCFeatureVersion1893,48561
array__get_ndarray_c_version(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args1899,48670
PyArray_GetEndianness(void)PyArray_GetEndianness1912,48992
array_set_string_function(PyObject *NPY_UNUSED(self), PyObject *args,args1966,50215
array_set_datetimeparse_function(PyObject *NPY_UNUSED(self), PyObject *args,args2014,51519
PyArray_Where(PyObject *condition, PyObject *x, PyObject *y)PyArray_Where2051,52554
array_lexsort(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kwds)args2105,53914
#undef _ARET_ARET2117,54240
array_can_cast_safely(PyObject *NPY_UNUSED(self), PyObject *args,args2120,54272
buffer_buffer(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args2162,55278
jmp_buf _NPY_SIGSEGV_BUF;_NPY_SIGSEGV_BUF2188,55998
_SigSegv_Handler(int signum)_SigSegv_Handler2190,56036
#define _test_code(_test_code2196,56116
as_buffer(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args2210,56691
#undef _test_code_test_code2274,58306
format_longfloat(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args2277,58343
compare_chararrays(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args2303,59061
_vec_string_with_args(PyArrayObject* char_array, PyArray_Descr* type,_vec_string_with_args2382,61018
_vec_string_no_args(PyArrayObject* char_array,_vec_string_no_args2477,63582
_vec_string(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)args2545,65462
SIGJMP_BUF _NPY_SIGINT_BUF;_NPY_SIGINT_BUF2607,67065
_PyArray_SigintHandler(int signum)_PyArray_SigintHandler2612,67129
_PyArray_GetSigintBuf(void)_PyArray_GetSigintBuf2621,67280
_PyArray_SigintHandler(int signum)_PyArray_SigintHandler2629,67376
_PyArray_GetSigintBuf(void)_PyArray_GetSigintBuf2635,67448
static struct PyMethodDef array_module_methods[] = {array_module_methods2672,68083
setup_scalartypes(PyObject *NPY_UNUSED(dict))NPY_UNUSED2786,71831
#define SINGLE_INHERIT(SINGLE_INHERIT2811,72353
#define DUAL_INHERIT(DUAL_INHERIT2834,73396
#define DUAL_INHERIT_COMPARE(DUAL_INHERIT_COMPARE2849,74373
#define DUAL_INHERIT2(DUAL_INHERIT22856,74628
#undef SINGLE_INHERITSINGLE_INHERIT2925,77351
#undef DUAL_INHERITDUAL_INHERIT2926,77373
set_flaginfo(PyObject *d)set_flaginfo2937,77589
#define _addnew(_addnew2944,77681
#define _addone(_addone2950,77963
#undef _addone_addone2963,78328
#undef _addnew_addnew2964,78343
static struct PyModuleDef moduledef = {moduledef2972,78465
#define RETVAL RETVAL2987,78747
PyObject *PyInit_multiarray(void) {PyInit_multiarray2988,78764
#define ADDCONST(ADDCONST3092,81643
#undef ADDCONSTADDCONST3113,82145

numpy/core/src/multiarray/multiarraymodule.h,51
#define _NPY_MULTIARRAY_H__NPY_MULTIARRAY_H_2,27

numpy/core/src/multiarray/multiarraymodule_onefile.c,0

numpy/core/src/multiarray/number.c,4251
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE6,95
#define NPY_NO_PREFIXNPY_NO_PREFIX7,121
NPY_NO_EXPORT NumericOps n_ops; /* NB: static objects initialized to zero */n_ops20,475
#define SET(SET28,706
PyArray_SetNumericOps(PyObject *dict)PyArray_SetNumericOps43,1300
#define GET(GET84,2063
PyArray_GetNumericOps(void)PyArray_GetNumericOps92,2338
_get_keywords(int rtype, PyArrayObject *out)_get_keywords139,3175
PyArray_GenericReduceFunction(PyArrayObject *m1, PyObject *op, int axis,PyArray_GenericReduceFunction160,3758
PyArray_GenericAccumulateFunction(PyArrayObject *m1, PyObject *op, int axis,PyArray_GenericAccumulateFunction183,4389
PyArray_GenericBinaryFunction(PyArrayObject *m1, PyObject *m2, PyObject *op)PyArray_GenericBinaryFunction206,5032
PyArray_GenericUnaryFunction(PyArrayObject *m1, PyObject *op)PyArray_GenericUnaryFunction216,5291
PyArray_GenericInplaceBinaryFunction(PyArrayObject *m1,PyArray_GenericInplaceBinaryFunction226,5525
PyArray_GenericInplaceUnaryFunction(PyArrayObject *m1, PyObject *op)PyArray_GenericInplaceUnaryFunction237,5826
array_add(PyArrayObject *m1, PyObject *m2)array_add247,6070
array_subtract(PyArrayObject *m1, PyObject *m2)array_subtract253,6197
array_multiply(PyArrayObject *m1, PyObject *m2)array_multiply259,6334
array_divide(PyArrayObject *m1, PyObject *m2)array_divide265,6471
array_remainder(PyArrayObject *m1, PyObject *m2)array_remainder271,6604
array_power_is_scalar(PyObject *o2, double* exp)array_power_is_scalar277,6736
fast_scalar_power(PyArrayObject *a1, PyObject *o2, int inplace)fast_scalar_power326,8041
array_power(PyArrayObject *a1, PyObject *o2, PyObject *NPY_UNUSED(modulo))array_power384,9791
array_negative(PyArrayObject *m1)array_negative397,10092
array_absolute(PyArrayObject *m1)array_absolute403,10210
array_invert(PyArrayObject *m1)array_invert409,10328
array_left_shift(PyArrayObject *m1, PyObject *m2)array_left_shift415,10442
array_right_shift(PyArrayObject *m1, PyObject *m2)array_right_shift421,10583
array_bitwise_and(PyArrayObject *m1, PyObject *m2)array_bitwise_and427,10726
array_bitwise_or(PyArrayObject *m1, PyObject *m2)array_bitwise_or433,10869
array_bitwise_xor(PyArrayObject *m1, PyObject *m2)array_bitwise_xor439,11010
array_inplace_add(PyArrayObject *m1, PyObject *m2)array_inplace_add445,11153
array_inplace_subtract(PyArrayObject *m1, PyObject *m2)array_inplace_subtract451,11295
array_inplace_multiply(PyArrayObject *m1, PyObject *m2)array_inplace_multiply457,11447
array_inplace_divide(PyArrayObject *m1, PyObject *m2)array_inplace_divide463,11599
array_inplace_remainder(PyArrayObject *m1, PyObject *m2)array_inplace_remainder469,11747
array_inplace_power(PyArrayObject *a1, PyObject *o2, PyObject *NPY_UNUSED(modulo))array_inplace_power475,11901
array_inplace_left_shift(PyArrayObject *m1, PyObject *m2)array_inplace_left_shift487,12216
array_inplace_right_shift(PyArrayObject *m1, PyObject *m2)array_inplace_right_shift493,12372
array_inplace_bitwise_and(PyArrayObject *m1, PyObject *m2)array_inplace_bitwise_and499,12530
array_inplace_bitwise_or(PyArrayObject *m1, PyObject *m2)array_inplace_bitwise_or505,12688
array_inplace_bitwise_xor(PyArrayObject *m1, PyObject *m2)array_inplace_bitwise_xor511,12844
array_floor_divide(PyArrayObject *m1, PyObject *m2)array_floor_divide517,13002
array_true_divide(PyArrayObject *m1, PyObject *m2)array_true_divide523,13147
array_inplace_floor_divide(PyArrayObject *m1, PyObject *m2)array_inplace_floor_divide529,13290
array_inplace_true_divide(PyArrayObject *m1, PyObject *m2)array_inplace_true_divide536,13498
_array_nonzero(PyArrayObject *mp)_array_nonzero543,13697
array_divmod(PyArrayObject *op1, PyObject *op2)array_divmod566,14174
array_int(PyArrayObject *v)array_int587,14603
array_float(PyArrayObject *v)array_float618,15484
array_long(PyArrayObject *v)array_long650,16397
array_oct(PyArrayObject *v)array_oct675,17186
array_hex(PyArrayObject *v)array_hex700,17971
_array_copy_nice(PyArrayObject *self)_array_copy_nice727,18764
array_index(PyArrayObject *v)array_index734,18923
NPY_NO_EXPORT PyNumberMethods array_as_number = {array_as_number746,19239

numpy/core/src/multiarray/number.h,1555
#define _NPY_ARRAY_NUMBER_H__NPY_ARRAY_NUMBER_H_2,29
    PyObject *add;add5,76
    PyObject *subtract;subtract6,95
    PyObject *multiply;multiply7,119
    PyObject *divide;divide8,143
    PyObject *remainder;remainder9,165
    PyObject *power;power10,190
    PyObject *square;square11,211
    PyObject *reciprocal;reciprocal12,233
    PyObject *ones_like;ones_like13,259
    PyObject *sqrt;sqrt14,284
    PyObject *negative;negative15,304
    PyObject *absolute;absolute16,328
    PyObject *invert;invert17,352
    PyObject *left_shift;left_shift18,374
    PyObject *right_shift;right_shift19,400
    PyObject *bitwise_and;bitwise_and20,427
    PyObject *bitwise_xor;bitwise_xor21,454
    PyObject *bitwise_or;bitwise_or22,481
    PyObject *less;less23,507
    PyObject *less_equal;less_equal24,527
    PyObject *equal;equal25,553
    PyObject *not_equal;not_equal26,574
    PyObject *greater;greater27,599
    PyObject *greater_equal;greater_equal28,622
    PyObject *floor_divide;floor_divide29,651
    PyObject *true_divide;true_divide30,679
    PyObject *logical_or;logical_or31,706
    PyObject *logical_and;logical_and32,732
    PyObject *floor;floor33,759
    PyObject *ceil;ceil34,780
    PyObject *maximum;maximum35,800
    PyObject *minimum;minimum36,823
    PyObject *rint;rint37,846
    PyObject *conjugate;conjugate38,866
} NumericOps;NumericOps39,891
NPY_NO_EXPORT NumericOps n_ops;n_ops45,1044
NPY_NO_EXPORT PyNumberMethods array_as_number;array_as_number46,1076

numpy/core/src/multiarray/numpymemoryview.c,1970
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN9,196
#define _MULTIARRAYMODULE_MULTIARRAYMODULE13,268
#define NPY_NO_PREFIXNPY_NO_PREFIX14,294
memorysimpleview_traverse(PyMemorySimpleViewObject *self,memorysimpleview_traverse31,571
memorysimpleview_clear(PyMemorySimpleViewObject *self)memorysimpleview_clear42,837
memorysimpleview_dealloc(PyMemorySimpleViewObject *self)memorysimpleview_dealloc51,1011
memorysimpleview_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds)memorysimpleview_new63,1285
memorysimpleview_getbuffer(PyMemorySimpleViewObject *self,memorysimpleview_getbuffer80,1667
memorysimpleview_releasebuffer(PyMemorySimpleViewObject *self,memorysimpleview_releasebuffer87,1854
static PyBufferProcs memorysimpleview_as_buffer = {memorysimpleview_as_buffer93,1998
_IntTupleFromSsizet(int len, Py_ssize_t *vals)_IntTupleFromSsizet108,2433
memorysimpleview_format_get(PyMemorySimpleViewObject *self)memorysimpleview_format_get132,2925
memorysimpleview_itemsize_get(PyMemorySimpleViewObject *self)memorysimpleview_itemsize_get138,3060
memorysimpleview_shape_get(PyMemorySimpleViewObject *self)memorysimpleview_shape_get144,3197
memorysimpleview_strides_get(PyMemorySimpleViewObject *self)memorysimpleview_strides_get150,3346
memorysimpleview_suboffsets_get(PyMemorySimpleViewObject *self)memorysimpleview_suboffsets_get156,3499
memorysimpleview_readonly_get(PyMemorySimpleViewObject *self)memorysimpleview_readonly_get162,3658
memorysimpleview_ndim_get(PyMemorySimpleViewObject *self)memorysimpleview_ndim_get168,3792
static PyGetSetDef memorysimpleview_getsets[] =memorysimpleview_getsets174,3901
NPY_NO_EXPORT PyTypeObject PyMemorySimpleView_Type = {PyMemorySimpleView_Type186,4493
PyMemorySimpleView_FromObject(PyObject *base)PyMemorySimpleView_FromObject254,7871
_numpymemoryview_init(PyObject **typeobject)_numpymemoryview_init292,8806
_numpymemoryview_init(PyObject **typeobject)_numpymemoryview_init304,9029

numpy/core/src/multiarray/numpymemoryview.h,405
#define _NPY_PRIVATE_NUMPYMEMORYVIEW_H__NPY_PRIVATE_NUMPYMEMORYVIEW_H_2,40
    PyObject *base;base12,320
    Py_buffer view;view13,340
} PyMemorySimpleViewObject;PyMemorySimpleViewObject14,360
#define PyMemorySimpleView_GET_BUFFER(PyMemorySimpleView_GET_BUFFER19,462
#define PyMemoryView_FromObject PyMemoryView_FromObject21,549
#define PyMemoryView_GET_BUFFER PyMemoryView_GET_BUFFER22,611

numpy/core/src/multiarray/numpyos.c,2070
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE7,86
#define NPY_NO_PREFIXNPY_NO_PREFIX8,112
#define MIN_EXPONENT_DIGITS MIN_EXPONENT_DIGITS24,553
#define MIN_EXPONENT_DIGITS MIN_EXPONENT_DIGITS26,589
_ensure_minimum_exponent_length(char* buffer, size_t buf_size)_ensure_minimum_exponent_length34,733
_ensure_decimal_point(char* buffer, size_t buf_size)_ensure_decimal_point109,3244
#define FLOAT_FORMATBUFLEN FLOAT_FORMATBUFLEN163,4756
_change_decimal_from_locale_to_dot(char* buffer)_change_decimal_from_locale_to_dot171,4991
_check_ascii_format(const char *format)_check_ascii_format202,5953
_fix_ascii_format(char* buf, size_t buflen, int decimal)_fix_ascii_format246,7301
#define _ASCII_FORMAT(_ASCII_FORMAT290,8853
NumPyOS_ascii_isspace(char c)NumPyOS_ascii_isspace340,11663
NumPyOS_ascii_isalpha(char c)NumPyOS_ascii_isalpha353,11886
NumPyOS_ascii_isdigit(char c)NumPyOS_ascii_isdigit365,12064
NumPyOS_ascii_isalnum(char c)NumPyOS_ascii_isalnum377,12216
NumPyOS_ascii_tolower(char c)NumPyOS_ascii_tolower389,12399
NumPyOS_ascii_strncasecmp(const char* s1, const char* s2, size_t len)NumPyOS_ascii_strncasecmp404,12606
NumPyOS_ascii_strtod_plain(const char *s, char** endptr)NumPyOS_ascii_strtod_plain430,13198
NumPyOS_ascii_strtod(const char *s, char** endptr)NumPyOS_ascii_strtod456,13724
NumPyOS_ascii_ftolf(FILE *fp, double *value)NumPyOS_ascii_ftolf566,16504
#define END_MATCH(END_MATCH588,17071
#define NEXT_CHAR(NEXT_CHAR591,17177
#define MATCH_ALPHA_STRING_NOCASE(MATCH_ALPHA_STRING_NOCASE599,17666
#define MATCH_ONE_OR_NONE(MATCH_ONE_OR_NONE606,18077
#define MATCH_ONE_OR_MORE(MATCH_ONE_OR_MORE609,18209
#define MATCH_ZERO_OR_MORE(MATCH_ZERO_OR_MORE616,18620
#undef END_MATCHEND_MATCH685,20286
#undef NEXT_CHARNEXT_CHAR686,20303
#undef MATCH_ALPHA_STRING_NOCASEMATCH_ALPHA_STRING_NOCASE687,20320
#undef MATCH_ONE_OR_NONEMATCH_ONE_OR_NONE688,20353
#undef MATCH_ONE_OR_MOREMATCH_ONE_OR_MORE689,20378
#undef MATCH_ZERO_OR_MOREMATCH_ZERO_OR_MORE690,20403

numpy/core/src/multiarray/numpyos.h,45
#define _NPY_NUMPYOS_H__NPY_NUMPYOS_H_2,24

numpy/core/src/multiarray/refcount.c,598
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN6,126
#define _MULTIARRAYMODULE_MULTIARRAYMODULE10,198
#define NPY_NO_PREFIXNPY_NO_PREFIX11,224
PyArray_Item_INCREF(char *data, PyArray_Descr *descr)PyArray_Item_INCREF26,518
PyArray_Item_XDECREF(char *data, PyArray_Descr *descr)PyArray_Item_XDECREF61,1400
PyArray_INCREF(PyArrayObject *mp)PyArray_INCREF99,2466
PyArray_XDECREF(PyArrayObject *mp)PyArray_XDECREF157,3943
PyArray_FillObjectArray(PyArrayObject *arr, PyObject *obj)PyArray_FillObjectArray212,5326
_fillobject(char *optr, PyObject *obj, PyArray_Descr *dtype)_fillobject243,6052

numpy/core/src/multiarray/refcount.h,63
#define _NPY_PRIVATE_REFCOUNT_H__NPY_PRIVATE_REFCOUNT_H_2,33

numpy/core/src/multiarray/scalarapi.c,1386
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
_descr_from_subtype(PyObject *type)_descr_from_subtype23,378
scalar_value(PyObject *scalar, PyArray_Descr *descr)scalar_value34,664
#define CASE(CASE48,988
#undef CASECASE69,1683
#define _CHK(_CHK83,2049
#define _OBJ(_OBJ85,2147
#define _IFCASE(_IFCASE86,2207
#undef _IFCASE_IFCASE156,4061
#undef _OBJ_OBJ157,4076
#undef _CHK_CHK158,4088
PyArray_ScalarAsCtype(PyObject *scalar, void *ctypeptr)PyArray_ScalarAsCtype169,4350
PyArray_CastScalarToCtype(PyObject *scalar, void *ctypeptr,PyArray_CastScalarToCtype197,5100
PyArray_CastScalarDirect(PyObject *scalar, PyArray_Descr *indescr,PyArray_CastScalarDirect242,6329
PyArray_FromScalar(PyObject *scalar, PyArray_Descr *outcode)PyArray_FromScalar267,6992
PyArray_ScalarFromObject(PyObject *object)PyArray_ScalarFromObject349,9372
PyArray_DescrFromTypeObject(PyObject *type)PyArray_DescrFromTypeObject407,10956
PyArray_FieldNames(PyObject *fields)PyArray_FieldNames478,13207
PyArray_DescrFromScalar(PyObject *sc)PyArray_DescrFromScalar510,13974
PyArray_TypeObjectFromType(int type)PyArray_TypeObjectFromType594,16584
PyArray_Scalar(void *data, PyArray_Descr *descr, PyObject *base)PyArray_Scalar614,17022
PyArray_Return(PyArrayObject *mp)PyArray_Return790,22462

numpy/core/src/multiarray/scalartypes.h,53
#define _NPY_SCALARTYPES_H__NPY_SCALARTYPES_H_2,28

numpy/core/src/multiarray/sequence.c,502
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
array_slice(PyArrayObject *self, Py_ssize_t ilow,array_slice32,737
array_ass_slice(PyArrayObject *self, Py_ssize_t ilow,array_ass_slice87,1973
array_contains(PyArrayObject *self, PyObject *el)array_contains112,2606
NPY_NO_EXPORT PySequenceMethods array_as_sequence = {array_as_sequence129,3012
array_any_nonzero(PyArrayObject *mp)array_any_nonzero164,4442

numpy/core/src/multiarray/sequence.h,134
#define _NPY_ARRAY_SEQUENCE_H__NPY_ARRAY_SEQUENCE_H_2,31
NPY_NO_EXPORT PySequenceMethods array_as_sequence;array_as_sequence7,166

numpy/core/src/multiarray/shape.c,876
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE5,72
#define NPY_NO_PREFIXNPY_NO_PREFIX6,98
#define PyAO PyAO21,334
PyArray_Resize(PyArrayObject *self, PyArray_Dims *newshape, int refcheck,PyArray_Resize33,748
PyArray_Newshape(PyArrayObject *self, PyArray_Dims *newdims,PyArray_Newshape83,2250
PyArray_Reshape(PyArrayObject *self, PyObject *shape)PyArray_Reshape96,2525
_putzero(char *optr, PyObject *zero, PyArray_Descr *dtype)_putzero111,2829
PyArray_Squeeze(PyArrayObject *self)PyArray_Squeeze148,3772
PyArray_SwapAxes(PyArrayObject *ap, int a1, int a2)PyArray_SwapAxes157,3914
PyArray_Transpose(PyArrayObject *ap, PyArray_Dims *permute)PyArray_Transpose166,4087
PyArray_Ravel(PyArrayObject *a, NPY_ORDER fortran)PyArray_Ravel176,4288
PyArray_Flatten(PyArrayObject *a, NPY_ORDER order)PyArray_Flatten185,4447

numpy/core/src/multiarray/shape.h,53
#define _NPY_ARRAY_SHAPE_H__NPY_ARRAY_SHAPE_H_2,28

numpy/core/src/multiarray/ucsnarrow.c,487
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN1,0
#define _MULTIARRAYMODULE_MULTIARRAYMODULE7,86
#define NPY_NO_PREFIXNPY_NO_PREFIX8,112
PyUCS2Buffer_FromUCS4(Py_UNICODE *ucs2, PyArray_UCS4 *ucs4, int ucs4length)PyUCS2Buffer_FromUCS431,756
PyUCS2Buffer_AsUCS4(Py_UNICODE *ucs2, PyArray_UCS4 *ucs4, int ucs2len, int ucs4len)PyUCS2Buffer_AsUCS463,1603
MyPyUnicode_New(int length)MyPyUnicode_New89,2224
MyPyUnicode_Resize(PyUnicodeObject *uni, int length)MyPyUnicode_Resize112,2843

numpy/core/src/multiarray/ucsnarrow.h,49
#define _NPY_UCSNARROW_H__NPY_UCSNARROW_H_2,26

numpy/core/src/multiarray/usertypes.c,475
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN23,560
#define _MULTIARRAYMODULE_MULTIARRAYMODULE28,655
#define NPY_NO_PREFIXNPY_NO_PREFIX29,681
PyArray_InitArrFuncs(PyArray_ArrFuncs *f)PyArray_InitArrFuncs47,958
PyArray_RegisterDataType(PyArray_Descr *descr)PyArray_RegisterDataType62,1293
PyArray_RegisterCastFunc(PyArray_Descr *descr, int totype,PyArray_RegisterCastFunc72,1493
PyArray_RegisterCanCast(PyArray_Descr *descr, int totype,PyArray_RegisterCanCast83,1797

numpy/core/src/multiarray/usertypes.h,65
#define _NPY_PRIVATE_USERTYPES_H__NPY_PRIVATE_USERTYPES_H_2,34

numpy/core/src/multiarray/_datetime.h,65
#define _NPY_PRIVATE__DATETIME_H__NPY_PRIVATE__DATETIME_H_2,34

numpy/core/src/npymath/npy_math_common.h,0

numpy/core/src/npymath/npy_math_private.h,7659
#define _NPY_MATH_PRIVATE_H__NPY_MATH_PRIVATE_H_19,469
#define IEEE_WORD_ORDER IEEE_WORD_ORDER52,1516
  double value;value58,1611
    npy_uint32 msw;msw61,1640
    npy_uint32 lsw;lsw62,1660
  } parts;parts63,1680
} ieee_double_shape_type;ieee_double_shape_type64,1691
  double value;value72,1784
    npy_uint32 lsw;lsw75,1813
    npy_uint32 msw;msw76,1833
  } parts;parts77,1853
} ieee_double_shape_type;ieee_double_shape_type78,1864
#define EXTRACT_WORDS(EXTRACT_WORDS84,1942
#define GET_HIGH_WORD(GET_HIGH_WORD94,2410
#define GET_LOW_WORD(GET_LOW_WORD103,2812
#define SET_HIGH_WORD(SET_HIGH_WORD112,3221
#define SET_LOW_WORD(SET_LOW_WORD122,3696
#define INSERT_WORDS(INSERT_WORDS132,4148
  float value;value147,4657
  npy_uint32 word;word149,4708
} ieee_float_shape_type;ieee_float_shape_type150,4727
#define GET_FLOAT_WORD(GET_FLOAT_WORD154,4792
#define SET_FLOAT_WORD(SET_FLOAT_WORD163,5174
    typedef npy_uint32 IEEEl2bitsrep_part;IEEEl2bitsrep_part186,6034
    union IEEEl2bitsrep {IEEEl2bitsrep190,6096
        npy_longdouble     e;e191,6122
        IEEEl2bitsrep_part a[3];a192,6152
    #define LDBL_MANL_INDEX LDBL_MANL_INDEX195,6193
    #define LDBL_MANL_MASK LDBL_MANL_MASK196,6227
    #define LDBL_MANL_SHIFT LDBL_MANL_SHIFT197,6270
    #define LDBL_MANH_INDEX LDBL_MANH_INDEX199,6305
    #define LDBL_MANH_MASK LDBL_MANH_MASK200,6339
    #define LDBL_MANH_SHIFT LDBL_MANH_SHIFT201,6382
    #define LDBL_EXP_INDEX LDBL_EXP_INDEX203,6417
    #define LDBL_EXP_MASK LDBL_EXP_MASK204,6451
    #define LDBL_EXP_SHIFT LDBL_EXP_SHIFT205,6490
    #define LDBL_SIGN_INDEX LDBL_SIGN_INDEX207,6525
    #define LDBL_SIGN_MASK LDBL_SIGN_MASK208,6559
    #define LDBL_SIGN_SHIFT LDBL_SIGN_SHIFT209,6598
    #define LDBL_NBIT LDBL_NBIT211,6634
    typedef npy_uint32 ldouble_man_t;ldouble_man_t213,6678
    typedef npy_uint32 ldouble_exp_t;ldouble_exp_t214,6716
    typedef npy_uint32 ldouble_sign_t;ldouble_sign_t215,6754
    typedef npy_uint32 IEEEl2bitsrep_part;IEEEl2bitsrep_part225,7256
    union IEEEl2bitsrep {IEEEl2bitsrep227,7300
        npy_longdouble     e;e228,7326
        IEEEl2bitsrep_part a[4];a229,7356
    #define LDBL_MANL_INDEX LDBL_MANL_INDEX232,7397
    #define LDBL_MANL_MASK LDBL_MANL_MASK233,7431
    #define LDBL_MANL_SHIFT LDBL_MANL_SHIFT234,7474
    #define LDBL_MANH_INDEX LDBL_MANH_INDEX236,7509
    #define LDBL_MANH_MASK LDBL_MANH_MASK237,7543
    #define LDBL_MANH_SHIFT LDBL_MANH_SHIFT238,7586
    #define LDBL_EXP_INDEX LDBL_EXP_INDEX240,7621
    #define LDBL_EXP_MASK LDBL_EXP_MASK241,7655
    #define LDBL_EXP_SHIFT LDBL_EXP_SHIFT242,7694
    #define LDBL_SIGN_INDEX LDBL_SIGN_INDEX244,7729
    #define LDBL_SIGN_MASK LDBL_SIGN_MASK245,7763
    #define LDBL_SIGN_SHIFT LDBL_SIGN_SHIFT246,7802
    #define LDBL_NBIT LDBL_NBIT248,7838
    typedef npy_uint32 ldouble_man_t;ldouble_man_t250,7883
    typedef npy_uint32 ldouble_exp_t;ldouble_exp_t251,7921
    typedef npy_uint32 ldouble_sign_t;ldouble_sign_t252,7959
    typedef npy_uint32 IEEEl2bitsrep_part;IEEEl2bitsrep_part264,8467
    union IEEEl2bitsrep {IEEEl2bitsrep266,8511
        npy_longdouble     e;e267,8537
        IEEEl2bitsrep_part a[2];a268,8567
    #define LDBL_MANL_INDEX LDBL_MANL_INDEX271,8608
    #define LDBL_MANL_MASK LDBL_MANL_MASK272,8642
    #define LDBL_MANL_SHIFT LDBL_MANL_SHIFT273,8685
    #define LDBL_MANH_INDEX LDBL_MANH_INDEX275,8720
    #define LDBL_MANH_MASK LDBL_MANH_MASK276,8754
    #define LDBL_MANH_SHIFT LDBL_MANH_SHIFT277,8797
    #define LDBL_EXP_INDEX LDBL_EXP_INDEX279,8832
    #define LDBL_EXP_MASK LDBL_EXP_MASK280,8866
    #define LDBL_EXP_SHIFT LDBL_EXP_SHIFT281,8909
    #define LDBL_SIGN_INDEX LDBL_SIGN_INDEX283,8945
    #define LDBL_SIGN_MASK LDBL_SIGN_MASK284,8979
    #define LDBL_SIGN_SHIFT LDBL_SIGN_SHIFT285,9022
    #define LDBL_NBIT LDBL_NBIT287,9058
    typedef npy_uint32 ldouble_man_t;ldouble_man_t289,9093
    typedef npy_uint32 ldouble_exp_t;ldouble_exp_t290,9131
    typedef npy_uint32 ldouble_sign_t;ldouble_sign_t291,9169
    typedef npy_uint32 IEEEl2bitsrep_part;IEEEl2bitsrep_part301,9579
    union IEEEl2bitsrep {IEEEl2bitsrep303,9623
        npy_longdouble     e;e304,9649
        IEEEl2bitsrep_part a[2];a305,9679
    #define LDBL_MANL_INDEX LDBL_MANL_INDEX308,9720
    #define LDBL_MANL_MASK LDBL_MANL_MASK309,9754
    #define LDBL_MANL_SHIFT LDBL_MANL_SHIFT310,9797
    #define LDBL_MANH_INDEX LDBL_MANH_INDEX312,9832
    #define LDBL_MANH_MASK LDBL_MANH_MASK313,9866
    #define LDBL_MANH_SHIFT LDBL_MANH_SHIFT314,9909
    #define LDBL_EXP_INDEX LDBL_EXP_INDEX316,9944
    #define LDBL_EXP_MASK LDBL_EXP_MASK317,9978
    #define LDBL_EXP_SHIFT LDBL_EXP_SHIFT318,10021
    #define LDBL_SIGN_INDEX LDBL_SIGN_INDEX320,10057
    #define LDBL_SIGN_MASK LDBL_SIGN_MASK321,10091
    #define LDBL_SIGN_SHIFT LDBL_SIGN_SHIFT322,10134
    #define LDBL_NBIT LDBL_NBIT324,10170
    typedef npy_uint32 ldouble_man_t;ldouble_man_t326,10214
    typedef npy_uint32 ldouble_exp_t;ldouble_exp_t327,10252
    typedef npy_uint32 ldouble_sign_t;ldouble_sign_t328,10290
    typedef npy_uint64 IEEEl2bitsrep_part;IEEEl2bitsrep_part336,10651
    union IEEEl2bitsrep {IEEEl2bitsrep338,10695
        npy_longdouble     e;e339,10721
        IEEEl2bitsrep_part a[2];a340,10751
    #define LDBL_MANL_INDEX LDBL_MANL_INDEX343,10792
    #define LDBL_MANL_MASK LDBL_MANL_MASK344,10826
    #define LDBL_MANL_SHIFT LDBL_MANL_SHIFT345,10877
    #define LDBL_MANH_INDEX LDBL_MANH_INDEX347,10912
    #define LDBL_MANH_MASK LDBL_MANH_MASK348,10946
    #define LDBL_MANH_SHIFT LDBL_MANH_SHIFT349,10997
    #define LDBL_EXP_INDEX LDBL_EXP_INDEX351,11032
    #define LDBL_EXP_MASK LDBL_EXP_MASK352,11066
    #define LDBL_EXP_SHIFT LDBL_EXP_SHIFT353,11117
    #define LDBL_SIGN_INDEX LDBL_SIGN_INDEX355,11153
    #define LDBL_SIGN_MASK LDBL_SIGN_MASK356,11187
    #define LDBL_SIGN_SHIFT LDBL_SIGN_SHIFT357,11238
    #define LDBL_NBIT LDBL_NBIT359,11274
    typedef npy_uint64 ldouble_man_t;ldouble_man_t361,11309
    typedef npy_uint64 ldouble_exp_t;ldouble_exp_t362,11347
    typedef npy_uint32 ldouble_sign_t;ldouble_sign_t363,11385
#define GET_LDOUBLE_SIGN(GET_LDOUBLE_SIGN367,11495
#define SET_LDOUBLE_SIGN(SET_LDOUBLE_SIGN371,11661
#define GET_LDOUBLE_EXP(GET_LDOUBLE_EXP377,11974
#define SET_LDOUBLE_EXP(SET_LDOUBLE_EXP381,12135
#define GET_LDOUBLE_MANL(GET_LDOUBLE_MANL387,12446
#define SET_LDOUBLE_MANL(SET_LDOUBLE_MANL391,12612
#define GET_LDOUBLE_MANH(GET_LDOUBLE_MANH397,12926
#define SET_LDOUBLE_MANH(SET_LDOUBLE_MANH401,13092
        npy_cdouble npy_z;npy_z413,13523
        complex double c99_z;c99_z414,13550
} __npy_cdouble_to_c99_cast;__npy_cdouble_to_c99_cast415,13580
        npy_cfloat npy_z;npy_z418,13626
        complex float c99_z;c99_z419,13652
} __npy_cfloat_to_c99_cast;__npy_cfloat_to_c99_cast420,13681
        npy_clongdouble npy_z;npy_z423,13726
        complex long double c99_z;c99_z424,13757
} __npy_clongdouble_to_c99_cast;__npy_clongdouble_to_c99_cast425,13792
        npy_cdouble npy_z;npy_z428,13847
        npy_cdouble c99_z;c99_z429,13874
} __npy_cdouble_to_c99_cast;__npy_cdouble_to_c99_cast430,13901
        npy_cfloat npy_z;npy_z433,13947
        npy_cfloat c99_z;c99_z434,13973
} __npy_cfloat_to_c99_cast;__npy_cfloat_to_c99_cast435,13999
        npy_clongdouble npy_z;npy_z438,14044
        npy_clongdouble c99_z;c99_z439,14075
} __npy_clongdouble_to_c99_cast;__npy_clongdouble_to_c99_cast440,14106

numpy/core/src/npymath/_signbit.c,45
_npy_signbit_d(double x)_npy_signbit_d4,31

numpy/core/src/private/npy_3kcompat.h,4290
#define _NPY_3KCOMPAT_H__NPY_3KCOMPAT_H_2,25
static NPY_INLINE int PyInt_Check(PyObject *op) {PyInt_Check17,280
#define PyInt_FromLong PyInt_FromLong26,481
#define PyInt_AsLong PyInt_AsLong27,520
#define PyInt_AS_LONG PyInt_AS_LONG28,555
#define PyInt_AsSsize_t PyInt_AsSsize_t29,591
#define PyString_Type PyString_Type44,843
#define PyString_Check PyString_Check45,878
#define PyStringObject PyStringObject46,915
#define PyString_FromString PyString_FromString47,952
#define PyString_FromStringAndSize PyString_FromStringAndSize48,999
#define PyString_AS_STRING PyString_AS_STRING49,1060
#define PyString_AsStringAndSize PyString_AsStringAndSize50,1105
#define PyString_FromFormat PyString_FromFormat51,1162
#define PyString_Concat PyString_Concat52,1209
#define PyString_ConcatAndDel PyString_ConcatAndDel53,1248
#define PyString_AsString PyString_AsString54,1299
#define PyString_GET_SIZE PyString_GET_SIZE55,1342
#define PyString_Size PyString_Size56,1385
#define PyUString_Type PyUString_Type58,1421
#define PyUString_Check PyUString_Check59,1459
#define PyUStringObject PyUStringObject60,1499
#define PyUString_FromString PyUString_FromString61,1539
#define PyUString_FromStringAndSize PyUString_FromStringAndSize62,1589
#define PyUString_FromFormat PyUString_FromFormat63,1653
#define PyUString_Concat PyUString_Concat64,1703
#define PyUString_ConcatAndDel PyUString_ConcatAndDel65,1746
#define PyUString_GET_SIZE PyUString_GET_SIZE66,1800
#define PyUString_Size PyUString_Size67,1846
#define PyUString_InternFromString PyUString_InternFromString68,1884
#define PyUString_Format PyUString_Format69,1946
#define PyBytes_Type PyBytes_Type73,1996
#define PyBytes_Check PyBytes_Check74,2031
#define PyBytesObject PyBytesObject75,2068
#define PyBytes_FromString PyBytes_FromString76,2105
#define PyBytes_FromStringAndSize PyBytes_FromStringAndSize77,2152
#define PyBytes_AS_STRING PyBytes_AS_STRING78,2213
#define PyBytes_AsStringAndSize PyBytes_AsStringAndSize79,2258
#define PyBytes_FromFormat PyBytes_FromFormat80,2315
#define PyBytes_Concat PyBytes_Concat81,2362
#define PyBytes_ConcatAndDel PyBytes_ConcatAndDel82,2401
#define PyBytes_AsString PyBytes_AsString83,2452
#define PyBytes_GET_SIZE PyBytes_GET_SIZE84,2495
#define PyBytes_Size PyBytes_Size85,2538
#define PyUString_Type PyUString_Type87,2574
#define PyUString_Check PyUString_Check88,2611
#define PyUStringObject PyUStringObject89,2650
#define PyUString_FromString PyUString_FromString90,2689
#define PyUString_FromStringAndSize PyUString_FromStringAndSize91,2738
#define PyUString_FromFormat PyUString_FromFormat92,2801
#define PyUString_Concat PyUString_Concat93,2850
#define PyUString_ConcatAndDel PyUString_ConcatAndDel94,2891
#define PyUString_GET_SIZE PyUString_GET_SIZE95,2944
#define PyUString_Size PyUString_Size96,2989
#define PyUString_InternFromString PyUString_InternFromString97,3026
#define PyUString_Format PyUString_Format98,3087
PyUnicode_ConcatAndDel(PyObject **left, PyObject *right)PyUnicode_ConcatAndDel104,3176
PyUnicode_Concat2(PyObject **left, PyObject *right)PyUnicode_Concat2114,3383
#define Py_TYPE(Py_TYPE128,3613
#define Py_REFCNT(Py_REFCNT129,3663
#define Py_SIZE(Py_SIZE130,3715
npy_PyFile_Dup(PyObject *file, char *mode)npy_PyFile_Dup138,3846
npy_PyFile_OpenFile(PyObject *filename, char *mode)npy_PyFile_OpenFile168,4556
PyObject_Cmp(PyObject *i1, PyObject *i2, int *cmp)PyObject_Cmp183,4876
NpyCapsule_FromVoidPtr(void *ptr, void (*dtor)(PyObject *))NpyCapsule_FromVoidPtr225,5651
NpyCapsule_FromVoidPtrAndDesc(void *ptr, void* context, void (*dtor)(PyObject *))NpyCapsule_FromVoidPtrAndDesc235,5865
NpyCapsule_AsVoidPtr(PyObject *obj)NpyCapsule_AsVoidPtr247,6187
NpyCapsule_Check(PyObject *ptr)NpyCapsule_Check257,6367
simple_capsule_dtor(PyObject *cap)simple_capsule_dtor263,6454
NpyCapsule_FromVoidPtr(void *ptr, void (*dtor)(void *))NpyCapsule_FromVoidPtr271,6581
NpyCapsule_FromVoidPtrAndDesc(void *ptr, void* context,NpyCapsule_FromVoidPtrAndDesc277,6716
NpyCapsule_AsVoidPtr(PyObject *ptr)NpyCapsule_AsVoidPtr284,6901
NpyCapsule_Check(PyObject *ptr)NpyCapsule_Check290,7001
simple_capsule_dtor(void *ptr)simple_capsule_dtor296,7083

numpy/core/src/private/npy_config.h,475
#define _NPY_NPY_CONFIG_H__NPY_NPY_CONFIG_H_2,27
#undef HAVE_ATAN2HAVE_ATAN28,167
#undef HAVE_HYPOTHAVE_HYPOT9,185
#undef HAVE_ATAN2HAVE_ATAN214,282
    #undef SIZEOF_LONGSIZEOF_LONG23,497
    #undef SIZEOF_PY_INTPTR_TSIZEOF_PY_INTPTR_T24,520
        #define SIZEOF_LONG SIZEOF_LONG27,571
        #define SIZEOF_PY_INTPTR_T SIZEOF_PY_INTPTR_T28,609
        #define SIZEOF_LONG SIZEOF_LONG30,657
        #define SIZEOF_PY_INTPTR_T SIZEOF_PY_INTPTR_T31,695

numpy/core/src/private/npy_fpmath.h,533
#define _NPY_NPY_FPMATH_H__NPY_NPY_FPMATH_H_2,27
            #define HAVE_LDOUBLE_IEEE_DOUBLE_LEHAVE_LDOUBLE_IEEE_DOUBLE_LE19,604
            #define HAVE_LDOUBLE_IEEE_DOUBLE_BEHAVE_LDOUBLE_IEEE_DOUBLE_BE21,699
            #define HAVE_LDOUBLE_INTEL_EXTENDED_12_BYTES_LEHAVE_LDOUBLE_INTEL_EXTENDED_12_BYTES_LE27,861
            #define HAVE_LDOUBLE_INTEL_EXTENDED_16_BYTES_LEHAVE_LDOUBLE_INTEL_EXTENDED_16_BYTES_LE29,958
            #define HAVE_LDOUBLE_IEEE_DOUBLE_16_BYTES_BEHAVE_LDOUBLE_IEEE_DOUBLE_16_BYTES_BE31,1079

numpy/core/src/umath/loops.h,2778
#define _NPY_UMATH_LOOPS_H__NPY_UMATH_LOOPS_H_16,401
#define BOOL_invert BOOL_invert18,430
#define BOOL_negative BOOL_negative19,467
#define BOOL_add BOOL_add20,506
#define BOOL_bitwise_and BOOL_bitwise_and21,539
#define BOOL_bitwise_or BOOL_bitwise_or22,581
#define BOOL_bitwise_xor BOOL_bitwise_xor23,621
#define BOOL_multiply BOOL_multiply24,663
#define BOOL_subtract BOOL_subtract25,702
#define BOOL_fmax BOOL_fmax26,741
#define BOOL_fmin BOOL_fmin27,772
#define BYTE_floor_divide BYTE_floor_divide162,3983
#define BYTE_fmax BYTE_fmax163,4021
#define BYTE_fmin BYTE_fmin164,4052
#define UBYTE_floor_divide UBYTE_floor_divide285,7286
#define UBYTE_fmax UBYTE_fmax286,7326
#define UBYTE_fmin UBYTE_fmin287,7359
#define SHORT_floor_divide SHORT_floor_divide435,11453
#define SHORT_fmax SHORT_fmax436,11493
#define SHORT_fmin SHORT_fmin437,11526
#define USHORT_floor_divide USHORT_floor_divide558,14791
#define USHORT_fmax USHORT_fmax559,14833
#define USHORT_fmin USHORT_fmin560,14868
#define INT_floor_divide INT_floor_divide708,19001
#define INT_fmax INT_fmax709,19037
#define INT_fmin INT_fmin710,19066
#define UINT_floor_divide UINT_floor_divide831,22269
#define UINT_fmax UINT_fmax832,22307
#define UINT_fmin UINT_fmin833,22338
#define LONG_floor_divide LONG_floor_divide981,26393
#define LONG_fmax LONG_fmax982,26431
#define LONG_fmin LONG_fmin983,26462
#define ULONG_floor_divide ULONG_floor_divide1104,29696
#define ULONG_fmax ULONG_fmax1105,29736
#define ULONG_fmin ULONG_fmin1106,29769
#define LONGLONG_floor_divide LONGLONG_floor_divide1254,33863
#define LONGLONG_fmax LONGLONG_fmax1255,33909
#define LONGLONG_fmin LONGLONG_fmin1256,33948
#define ULONGLONG_floor_divide ULONGLONG_floor_divide1377,37306
#define ULONGLONG_fmax ULONGLONG_fmax1378,37354
#define ULONGLONG_fmin ULONGLONG_fmin1379,37395
#define FLOAT_true_divide FLOAT_true_divide1680,46002
#define DOUBLE_true_divide DOUBLE_true_divide1832,50208
#define LONGDOUBLE_true_divide LONGDOUBLE_true_divide1984,54566
#define CGE(CGE1995,54864
#define CLE(CLE1996,54926
#define CGT(CGT1997,54988
#define CLT(CLT1998,55049
#define CEQ(CEQ1999,55110
#define CNE(CNE2000,55159
#define CFLOAT_true_divide CFLOAT_true_divide2115,58428
#define CDOUBLE_true_divide CDOUBLE_true_divide2231,61719
#define CLONGDOUBLE_true_divide CLONGDOUBLE_true_divide2347,65128
#undef CGECGE2351,65182
#undef CLECLE2352,65193
#undef CGTCGT2353,65204
#undef CLTCLT2354,65215
#undef CEQCEQ2355,65226
#undef CNECNE2356,65237
#define DATETIME_fmax DATETIME_fmax2365,65504
#define DATETIME_fmin DATETIME_fmin2366,65543
#define TIMEDELTA_fmax TIMEDELTA_fmax2369,65593
#define TIMEDELTA_fmin TIMEDELTA_fmin2370,65634

numpy/core/src/umath/ufunc_object.c,6900
#define _UMATHMODULE_UMATHMODULE26,637
#define PY_ARRAY_UNIQUE_SYMBOL PY_ARRAY_UNIQUE_SYMBOL32,739
#define NO_IMPORT_ARRAYNO_IMPORT_ARRAY33,797
#define USE_USE_DEFAULTS USE_USE_DEFAULTS43,943
_error_handler(int method, PyObject *errobj, char *errtype, int retstatus, int *first)_error_handler67,1553
PyUFunc_getfperr(void)PyUFunc_getfperr145,3862
#define HANDLEIT(HANDLEIT152,3966
PyUFunc_handlefperr(int errmask, PyObject *errobj, int retstatus, int *first)PyUFunc_handlefperr162,4454
#undef HANDLEITHANDLEIT174,4781
PyUFunc_checkfperr(int errmask, PyObject *errobj, int *first)PyUFunc_checkfperr179,4831
PyUFunc_clearfperr()PyUFunc_clearfperr192,5165
#define NO_UFUNCLOOP NO_UFUNCLOOP198,5216
#define ZERO_EL_REDUCELOOP ZERO_EL_REDUCELOOP199,5246
#define ONE_UFUNCLOOP ONE_UFUNCLOOP200,5276
#define ONE_EL_REDUCELOOP ONE_EL_REDUCELOOP201,5306
#define NOBUFFER_UFUNCLOOP NOBUFFER_UFUNCLOOP202,5336
#define NOBUFFER_REDUCELOOP NOBUFFER_REDUCELOOP203,5366
#define BUFFER_UFUNCLOOP BUFFER_UFUNCLOOP204,5396
#define BUFFER_REDUCELOOP BUFFER_REDUCELOOP205,5426
#define SIGNATURE_NOBUFFER_UFUNCLOOP SIGNATURE_NOBUFFER_UFUNCLOOP206,5456
_lowest_type(char intype)_lowest_type210,5509
static char *_types_msg =  "function not supported for these types, "   \_types_msg240,6200
_find_array_prepare(PyObject *args, PyObject **output_wrap, int nin, int nout)_find_array_prepare260,6890
_find_matching_userloop(PyObject *obj, int *arg_types,_find_matching_userloop367,10144
extract_specified_loop(PyUFuncObject *self, int *arg_types,extract_specified_loop406,11451
select_types(PyUFuncObject *self, int *arg_types,select_types591,16843
static int PyUFunc_NUM_NODEFAULTS = 0;PyUFunc_NUM_NODEFAULTS699,19842
static PyObject *PyUFunc_PYVALS_NAME = NULL;PyUFunc_PYVALS_NAME701,19888
_extract_pyvals(PyObject *ref, char *name, int *bufsize,_extract_pyvals705,19946
PyUFunc_GetPyValues(char *name, int *bufsize, int *errmask, PyObject **errobj)PyUFunc_GetPyValues768,21805
_create_copies(PyUFuncLoopObject *loop, int *arg_types, PyArrayObject **mps)_create_copies802,22792
#define _GETATTR_(_GETATTR_843,24159
_has_reflected_op(PyObject *op, char *name)_has_reflected_op847,24311
#undef _GETATTR__GETATTR_865,24802
_next_non_white_space(const char* str, int offset)_next_non_white_space870,24901
_is_alpha_underscore(char ch)_is_alpha_underscore880,25077
_is_alnum_underscore(char ch)_is_alnum_underscore886,25201
_get_end_of_name(const char* str, int offset)_get_end_of_name895,25368
_is_same_name(const char* s1, const char* s2)_is_same_name909,25636
_parse_signature(PyUFuncObject *self, const char *signature)_parse_signature927,26089
_compute_output_dims(PyUFuncLoopObject *loop, int iarg,_compute_output_dims1076,30953
_compute_dimension_size(PyUFuncLoopObject *loop, PyArrayObject **mps, int i)_compute_dimension_size1107,31928
_trunc_coredim(PyArrayObject *ap, int core_nd)_trunc_coredim1134,33019
construct_arrays(PyUFuncLoopObject *loop, PyObject *args, PyArrayObject **mps,construct_arrays1161,33780
ufuncreduce_dealloc(PyUFuncReduceObject *self)ufuncreduce_dealloc1809,55419
ufuncloop_dealloc(PyUFuncLoopObject *self)ufuncloop_dealloc1826,55805
construct_loop(PyUFuncObject *self, PyObject *args, PyObject *kwds, PyArrayObject **mps)construct_loop1850,56381
PyUFunc_GenericFunction(PyUFuncObject *self, PyObject *args, PyObject *kwds,PyUFunc_GenericFunction2026,61080
_getidentity(PyUFuncObject *self, int otype, char *str)_getidentity2353,73161
_create_reduce_copy(PyUFuncReduceObject *loop, PyArrayObject **arr, int rtype)_create_reduce_copy2377,73803
construct_reduce(PyUFuncObject *self, PyArrayObject **arr, PyArrayObject *out,construct_reduce2412,74782
PyUFunc_Reduce(PyUFuncObject *self, PyArrayObject *arr, PyArrayObject *out,PyUFunc_Reduce2704,83926
PyUFunc_Accumulate(PyUFuncObject *self, PyArrayObject *arr, PyArrayObject *out,PyUFunc_Accumulate2863,89557
PyUFunc_Reduceat(PyUFuncObject *self, PyArrayObject *arr, PyArrayObject *ind,PyUFunc_Reduceat3047,96141
PyUFunc_GenericReduction(PyUFuncObject *self, PyObject *args,PyUFunc_GenericReduction3210,101799
_find_array_wrap(PyObject *args, PyObject **output_wrap, int nin, int nout)_find_array_wrap3403,108159
ufunc_generic_call(PyUFuncObject *self, PyObject *args, PyObject *kwds)ufunc_generic_call3502,111107
ufunc_update_use_defaults(void)ufunc_update_use_defaults3662,115958
PyUFunc_ReplaceLoopBySignature(PyUFuncObject *func,PyUFunc_ReplaceLoopBySignature3726,117516
PyUFunc_FromFuncAndData(PyUFuncGenericFunction *func, void **data,PyUFunc_FromFuncAndData3755,118307
PyUFunc_FromFuncAndDataAndSignature(PyUFuncGenericFunction *func, void **data,PyUFunc_FromFuncAndDataAndSignature3766,118724
PyUFunc_SetUsesArraysAsData(void **data, size_t i)PyUFunc_SetUsesArraysAsData3827,120306
_does_loop_use_arrays(void *data)_does_loop_use_arrays3837,120551
    void *c_obj;c_obj3854,121002
} _simple_cobj;_simple_cobj3855,121019
#define _SETCPTR(_SETCPTR3857,121036
cmp_arg_types(int *arg1, int *arg2, int n)cmp_arg_types3861,121188
_free_loop1d_list(PyUFunc_Loop1d *data)_free_loop1d_list3880,121623
_loop1d_list_free(PyObject *ptr)_loop1d_list_free3892,121871
_loop1d_list_free(void *ptr)_loop1d_list_free3900,122034
PyUFunc_RegisterLoopForType(PyUFuncObject *ufunc,PyUFunc_RegisterLoopForType3910,122187
#undef _SETCPTR_SETCPTR4025,125472
ufunc_dealloc(PyUFuncObject *self)ufunc_dealloc4029,125502
ufunc_repr(PyUFuncObject *self)ufunc_repr4052,126004
ufunc_outer(PyUFuncObject *self, PyObject *args, PyObject *kwds)ufunc_outer4073,126576
ufunc_reduce(PyUFuncObject *self, PyObject *args, PyObject *kwds)ufunc_reduce4164,128940
ufunc_accumulate(PyUFuncObject *self, PyObject *args, PyObject *kwds)ufunc_accumulate4170,129098
ufunc_reduceat(PyUFuncObject *self, PyObject *args, PyObject *kwds)ufunc_reduceat4176,129264
static struct PyMethodDef ufunc_methods[] = {ufunc_methods4182,129409
_makeargs(int num, char *ltr, int null_if_none)_makeargs4206,130204
_typecharfromnum(int num) {_typecharfromnum4228,130677
ufunc_get_doc(PyUFuncObject *self)ufunc_get_doc4239,130868
ufunc_get_nin(PyUFuncObject *self)ufunc_get_nin4269,131938
ufunc_get_nout(PyUFuncObject *self)ufunc_get_nout4275,132034
ufunc_get_nargs(PyUFuncObject *self)ufunc_get_nargs4281,132132
ufunc_get_ntypes(PyUFuncObject *self)ufunc_get_ntypes4287,132232
ufunc_get_types(PyUFuncObject *self)ufunc_get_types4293,132334
ufunc_get_name(PyUFuncObject *self)ufunc_get_name4327,133158
ufunc_get_identity(PyUFuncObject *self)ufunc_get_identity4333,133262
ufunc_get_signature(PyUFuncObject *self)ufunc_get_signature4345,133493
#undef _typecharfromnum_typecharfromnum4353,133655
static PyGetSetDef ufunc_getset[] = {ufunc_getset4359,133764
NPY_NO_EXPORT PyTypeObject PyUFunc_Type = {PyUFunc_Type4395,134778

numpy/core/src/umath/ufunc_object.h,206
#define _NPY_UMATH_UFUNC_OBJECT_H__NPY_UMATH_UFUNC_OBJECT_H_2,35
ufunc_geterr(PyObject *NPY_UNUSED(dummy), PyObject *args);args5,96
ufunc_seterr(PyObject *NPY_UNUSED(dummy), PyObject *args);args8,181

numpy/core/src/umath/umathmodule_onefile.c,0

numpy/distutils/mingw/gfortran_vs2003_hack.c,106
int _get_output_format(void)_get_output_format1,0
int _imp____lc_codepage = 0;_imp____lc_codepage6,45

numpy/distutils/tests/swig_ext/src/example.c,113
double My_variable = 3.0;My_variable3,24
int  fact(int n) {fact6,80
int my_mod(int n, int m) {my_mod12,179

numpy/distutils/tests/swig_ext/src/zoo.h,72
class Zoo{Zoo2,1
		int n;n3,12
		char animals[10][50];animals4,21

numpy/f2py/doc/multiarray/array_from_pyobj.c,561
#define ARR_IS_NULL(ARR_IS_NULL21,626
#define CHECK_DIMS_DEFINED(CHECK_DIMS_DEFINED27,747
#define HAS_PROPER_ELSIZE(HAS_PROPER_ELSIZE33,891
int count_nonpos(const int rank,count_nonpos49,1385
PyArrayObject* array_from_pyobj(const int type_num,array_from_pyobj67,1759
int array_has_column_major_storage(const PyArrayObject *ap) {array_has_column_major_storage215,6646
void lazy_transpose(PyArrayObject* arr) {lazy_transpose236,7282
int check_and_fix_dimensions(const PyArrayObject* arr,const int rank,int *dims) {check_and_fix_dimensions258,7907

numpy/f2py/doc/multiarray/bar.c,40
void bar(int *a,int m,int n) {bar4,21

numpy/f2py/src/fortranobject.c,4399
#define FORTRANOBJECT_CFORTRANOBJECT_C1,0
F2PyDict_SetItemString(PyObject *dict, char *name, PyObject *obj)F2PyDict_SetItemString17,271
typedef PyObject *(*fortranfunc)(PyObject *,PyObject *,PyObject *,void *);fortranfunc32,662
PyFortranObject_New(FortranDataDef* defs, f2py_void_func init) {PyFortranObject_New35,749
PyFortranObject_NewAsAttr(FortranDataDef* defs) { /* used for calling F90 module routines */PyFortranObject_NewAsAttr76,2469
fortran_dealloc(PyFortranObject *fp) {fortran_dealloc89,2841
static PyMethodDef fortran_methods[] = {fortran_methods97,2968
fortran_doc (FortranDataDef def) {fortran_doc104,3090
static FortranDataDef *save_def; /* save pointer of an allocatable array */save_def183,5588
static void set_data(char *d,npy_intp *f) {  /* callback from Fortran */set_data184,5664
fortran_getattr(PyFortranObject *fp, char *name) {fortran_getattr193,5948
fortran_setattr(PyFortranObject *fp, char *name, PyObject *v) {fortran_setattr269,8591
fortran_call(PyFortranObject *fp, PyObject *arg, PyObject *kw) {fortran_call332,11233
fortran_repr(PyFortranObject *fp)fortran_repr354,12114
PyTypeObject PyFortran_Type = {PyFortran_Type379,12754
static int passed_time = 0;passed_time406,13708
static int passed_counter = 0;passed_counter407,13736
static int passed_call_time = 0;passed_call_time408,13767
static struct timeb start_time;start_time409,13800
static struct timeb stop_time;stop_time410,13832
static struct timeb start_call_time;start_call_time411,13863
static struct timeb stop_call_time;stop_call_time412,13900
static int cb_passed_time = 0;cb_passed_time413,13936
static int cb_passed_counter = 0;cb_passed_counter414,13967
static int cb_passed_call_time = 0;cb_passed_call_time415,14001
static struct timeb cb_start_time;cb_start_time416,14037
static struct timeb cb_stop_time;cb_stop_time417,14072
static struct timeb cb_start_call_time;cb_start_call_time418,14106
static struct timeb cb_stop_call_time;cb_stop_call_time419,14146
extern void f2py_start_clock(void) { ftime(&start_time); }f2py_start_clock421,14186
void f2py_start_call_clock(void) {f2py_start_call_clock423,14252
void f2py_stop_clock(void) {f2py_stop_clock428,14348
void f2py_stop_call_clock(void) {f2py_stop_call_clock434,14528
extern void f2py_cb_start_clock(void) { ftime(&cb_start_time); }f2py_cb_start_clock442,14791
void f2py_cb_start_call_clock(void) {f2py_cb_start_call_clock444,14863
void f2py_cb_stop_clock(void) {f2py_cb_stop_clock449,14968
void f2py_cb_stop_call_clock(void) {f2py_cb_stop_call_clock455,15172
static int f2py_report_on_exit_been_here = 0;f2py_report_on_exit_been_here463,15465
void f2py_report_on_exit(int exit_flag,void *name) {f2py_report_on_exit465,15518
static void f2py_report_on_array_copy(PyArrayObject* arr) {f2py_report_on_array_copy495,16920
static void f2py_report_on_array_copy_fromany(void) {f2py_report_on_array_copy_fromany502,17206
#define F2PY_REPORT_ON_ARRAY_COPY_FROMARR F2PY_REPORT_ON_ARRAY_COPY_FROMARR506,17317
#define F2PY_REPORT_ON_ARRAY_COPY_FROMANY F2PY_REPORT_ON_ARRAY_COPY_FROMANY507,17407
#define F2PY_REPORT_ON_ARRAY_COPY_FROMARRF2PY_REPORT_ON_ARRAY_COPY_FROMARR509,17491
#define F2PY_REPORT_ON_ARRAY_COPY_FROMANYF2PY_REPORT_ON_ARRAY_COPY_FROMANY510,17533
count_nonpos(const int rank,count_nonpos536,18290
void dump_dims(int rank, npy_intp* dims) {dump_dims551,18656
void dump_attrs(const PyArrayObject* arr) {dump_attrs559,18824
#define SWAPTYPE(SWAPTYPE571,19184
static int swap_arrays(PyArrayObject* arr1, PyArrayObject* arr2) {swap_arrays573,19246
#define ARRAY_ISCOMPATIBLE(ARRAY_ISCOMPATIBLE585,19733
PyArrayObject* array_from_pyobj(const int type_num,array_from_pyobj593,20120
int check_and_fix_dimensions(const PyArrayObject* arr,const int rank,npy_intp *dims) {check_and_fix_dimensions775,26963
int copy_ND_array(const PyArrayObject *arr, PyArrayObject *out)copy_ND_array910,31967
F2PyCapsule_FromVoidPtr(void *ptr, void (*dtor)(PyObject *))F2PyCapsule_FromVoidPtr923,32321
F2PyCapsule_AsVoidPtr(PyObject *obj)F2PyCapsule_AsVoidPtr933,32514
F2PyCapsule_Check(PyObject *ptr)F2PyCapsule_Check943,32677
F2PyCapsule_FromVoidPtr(void *ptr, void (*dtor)(void *))F2PyCapsule_FromVoidPtr951,32771
F2PyCapsule_AsVoidPtr(PyObject *ptr)F2PyCapsule_AsVoidPtr957,32885
F2PyCapsule_Check(PyObject *ptr)F2PyCapsule_Check963,32968

numpy/f2py/src/fortranobject.h,3220
#define Py_FORTRANOBJECT_HPy_FORTRANOBJECT_H2,27
#define NO_IMPORT_ARRAYNO_IMPORT_ARRAY10,138
#define PY_ARRAY_UNIQUE_SYMBOL PY_ARRAY_UNIQUE_SYMBOL12,169
#define PyString_Check PyString_Check19,311
#define PyString_GET_SIZE PyString_GET_SIZE20,348
#define PyString_AS_STRING PyString_AS_STRING21,391
#define PyString_FromString PyString_FromString22,436
#define PyString_ConcatAndDel PyString_ConcatAndDel23,483
#define PyString_AsString PyString_AsString24,534
#define PyInt_Check PyInt_Check26,578
#define PyInt_FromLong PyInt_FromLong27,611
#define PyInt_AS_LONG PyInt_AS_LONG28,650
#define PyInt_AsLong PyInt_AsLong29,686
#define PyNumber_Int PyNumber_Int31,722
#define Py_TYPE(Py_TYPE35,799
#define Py_REFCNT(Py_REFCNT36,849
#define Py_SIZE(Py_SIZE37,901
#define F2PY_MAX_DIMS F2PY_MAX_DIMS84,1895
typedef void (*f2py_set_data_func)(char*,npy_intp*);f2py_set_data_func86,1921
typedef void (*f2py_void_func)(void);f2py_void_func87,1974
typedef void (*f2py_init_func)(int*,npy_intp*,f2py_set_data_func,int*);f2py_init_func88,2012
typedef void *(*f2pycfunc)(void);f2pycfunc92,2133
  char *name;                /* attribute (array||routine) name */name95,2185
  int rank;                  /* array rank, 0 for scalar, max is F2PY_MAX_DIMS,rank96,2252
  struct {npy_intp d[F2PY_MAX_DIMS];} dims; /* dimensions of the array, || not used */d98,2370
  struct {npy_intp d[F2PY_MAX_DIMS];} dims; /* dimensions of the array, || not used */dims98,2370
  int type;                  /* PyArray_<type> || not used */type99,2457
  char *data;                /* pointer to array || Fortran routine */data100,2519
  f2py_init_func func;            /* initialization function forfunc101,2590
  char *doc;                 /* documentation string; only recommendeddoc105,2772
} FortranDataDef;FortranDataDef107,2864
  int len;                   /* Number of attributes */len111,2916
  FortranDataDef *defs;      /* An array of FortranDataDef's */defs112,2972
  PyObject       *dict;      /* Fortran object attribute dictionary */dict113,3036
} PyFortranObject;PyFortranObject114,3107
#define PyFortran_Check(PyFortran_Check116,3127
#define PyFortran_Check1(PyFortran_Check1117,3188
#define ISCONTIGUOUS(ISCONTIGUOUS138,3893
#define F2PY_INTENT_IN F2PY_INTENT_IN139,3947
#define F2PY_INTENT_INOUT F2PY_INTENT_INOUT140,3972
#define F2PY_INTENT_OUT F2PY_INTENT_OUT141,4000
#define F2PY_INTENT_HIDE F2PY_INTENT_HIDE142,4026
#define F2PY_INTENT_CACHE F2PY_INTENT_CACHE143,4053
#define F2PY_INTENT_COPY F2PY_INTENT_COPY144,4082
#define F2PY_INTENT_C F2PY_INTENT_C145,4110
#define F2PY_OPTIONAL F2PY_OPTIONAL146,4135
#define F2PY_INTENT_INPLACE F2PY_INTENT_INPLACE147,4161
#define F2PY_INTENT_ALIGNED4 F2PY_INTENT_ALIGNED4148,4193
#define F2PY_INTENT_ALIGNED8 F2PY_INTENT_ALIGNED8149,4226
#define F2PY_INTENT_ALIGNED16 F2PY_INTENT_ALIGNED16150,4260
#define ARRAY_ISALIGNED(ARRAY_ISALIGNED152,4296
#define F2PY_ALIGN4(F2PY_ALIGN4153,4375
#define F2PY_ALIGN8(F2PY_ALIGN8154,4435
#define F2PY_ALIGN16(F2PY_ALIGN16155,4495
#define F2PY_GET_ALIGNMENT(F2PY_GET_ALIGNMENT157,4558
#define F2PY_CHECK_ALIGNMENT(F2PY_CHECK_ALIGNMENT161,4694

numpy/f2py/src/test/foomodule.c,1138
static PyObject *foo_error;foo_error15,316
#define F_FUNC(F_FUNC19,407
#define F_FUNC(F_FUNC21,435
#define F_FUNC(F_FUNC25,501
#define F_FUNC(F_FUNC27,532
static char doc_foo_bar[] = "\doc_foo_bar32,610
static PyObject *foo_bar(PyObject *capi_self, PyObject *capi_args,foo_bar36,678
static PyObject *mod_init(PyObject *capi_self, PyObject *capi_args,mod_init50,1224
static FortranDataDef f2py_mod_def[] = {f2py_mod_def65,1752
static void f2py_setup_mod(char *a,char *b,char *c,void (*d)(),char *init) {f2py_setup_mod73,1983
                                           static void f2py_init_mod() {f2py_init_mod81,2262
static FortranDataDef f2py_foodata_def[] = {f2py_foodata_def86,2496
static void f2py_setup_foodata(char *a,char *b,char *c) {f2py_setup_foodata92,2652
                                                   static void f2py_init_foodata() {f2py_init_foodata98,2869
                                                      static FortranDataDef f2py_routines_def[] = {f2py_routines_def105,3277
static PyMethodDef foo_module_methods[] = {foo_module_methods111,3760
void initfoo() {initfoo116,3843

numpy/f2py/tests/src/array_from_pyobj/wrapmodule.c,679
static PyObject *wrap_error;wrap_error21,608
static PyObject *wrap_module;wrap_module22,637
static char doc_f2py_rout_wrap_call[] = "\doc_f2py_rout_wrap_call25,749
static PyObject *f2py_rout_wrap_call(PyObject *capi_self,f2py_rout_wrap_call35,1033
static char doc_f2py_rout_wrap_attrs[] = "\doc_f2py_rout_wrap_attrs63,1878
static PyObject *f2py_rout_wrap_attrs(PyObject *capi_self,f2py_rout_wrap_attrs78,2264
static PyMethodDef f2py_module_methods[] = {f2py_module_methods110,3260
static struct PyModuleDef moduledef = {moduledef118,3504
#define RETVAL RETVAL132,3730
PyObject *PyInit_test_array_from_pyobj_ext(void) {PyInit_test_array_from_pyobj_ext133,3747

numpy/fft/fftpack.c,2361
#define DOUBLEDOUBLE11,234
#define Treal Treal14,264
#define Treal Treal16,291
#define ref(ref20,320
#define MAXFAC MAXFAC22,343
#define NSPECIAL NSPECIAL23,418
static void passf2(int ido, int l1, const Treal cc[], Treal ch[], const Treal wa1[], int isign)passf234,768
static void passf3(int ido, int l1, const Treal cc[], Treal ch[],passf365,1822
static void passf4(int ido, int l1, const Treal cc[], Treal ch[],passf4119,3798
static void passf5(int ido, int l1, const Treal cc[], Treal ch[],passf5179,6250
static void passf(int *nac, int ido, int ip, int l1, int idl1,passf268,10107
static void radf2(int ido, int l1, const Treal cc[], Treal ch[], const Treal wa1[])radf2400,14194
static void radb2(int ido, int l1, const Treal cc[], Treal ch[], const Treal wa1[])radb2432,15273
static void radf3(int ido, int l1, const Treal cc[], Treal ch[],radf3468,16429
static void radb3(int ido, int l1, const Treal cc[], Treal ch[],radb3507,18004
static void radf4(int ido, int l1, const Treal cc[], Treal ch[],radf4547,19577
static void radb4(int ido, int l1, const Treal cc[], Treal ch[],radb4607,22174
static void radf5(int ido, int l1, const Treal cc[], Treal ch[],radf5667,24826
static void radb5(int ido, int l1, const Treal cc[], Treal ch[],radb5731,27860
static void radfg(int ido, int ip, int l1, int idl1,radfg801,30910
static void radbg(int ido, int ip, int l1, int idl1,radbg971,36571
static void cfftf1(int n, Treal c[], Treal ch[], const Treal wa[], const int ifac[MAXFAC+2], int isign)cfftf11149,42508
void cfftf(int n, Treal c[], Treal wsave[])cfftf1207,43970
void cfftb(int n, Treal c[], Treal wsave[])cfftb1217,44173
static void factorize(int n, int ifac[MAXFAC+2], const int ntryh[NSPECIAL])factorize1227,44376
static void cffti1(int n, Treal wa[], int ifac[MAXFAC+2])cffti11259,45120
void cffti(int n, Treal wsave[])cffti1307,46152
static void rfftf1(int n, Treal c[], Treal ch[], const Treal wa[], const int ifac[MAXFAC+2])rfftf11320,46536
void rfftb1(int n, Treal c[], Treal ch[], const Treal wa[], const int ifac[MAXFAC+2])rfftb11381,48006
void rfftf(int n, Treal r[], Treal wsave[])rfftf1437,49349
void rfftb(int n, Treal r[], Treal wsave[])rfftb1444,49492
static void rffti1(int n, Treal wa[], int ifac[MAXFAC+2])rffti11451,49635
void rffti(int n, Treal wsave[])rffti1493,50603

numpy/fft/fftpack.h,85
#define DOUBLEDOUBLE10,140
#define Treal Treal13,170
#define Treal Treal15,197

numpy/fft/fftpack_litemodule.c,782
static PyObject *ErrorObject;ErrorObject5,73
static char fftpack_cfftf__doc__[] = "";fftpack_cfftf__doc__9,165
static char fftpack_cfftb__doc__[] = "";fftpack_cfftb__doc__60,1390
static char fftpack_cffti__doc__[] ="";fftpack_cffti__doc__111,2615
static char fftpack_rfftf__doc__[] ="";fftpack_rfftf__doc__138,3222
static char fftpack_rfftb__doc__[] ="";fftpack_rfftb__doc__203,4955
static char fftpack_rffti__doc__[] ="";fftpack_rffti__doc__265,6537
static struct PyMethodDef fftpack_methods[] = {fftpack_methods294,7155
static char fftpack_module_documentation[] = "" ;fftpack_module_documentation307,7713
static struct PyModuleDef moduledef = {moduledef310,7790
#define RETVAL RETVAL325,8073
PyObject *PyInit_fftpack_lite(void)PyInit_fftpack_lite326,8090

numpy/lib/src/_compiled_base.c,1895
incr_slot_(double x, double *bins, intp lbins)incr_slot_7,111
decr_slot_(double x, double * bins, intp lbins)decr_slot_20,311
monotonic_(double * a, int lena)monotonic_33,514
mxx (intp *i , intp len)mxx61,1074
mnx (intp *i , intp len)mnx77,1362
arr_bincount(PyObject *NPY_UNUSED(self), PyObject *args, PyObject *kwds)args102,2144
arr_digitize(PyObject *NPY_UNUSED(self), PyObject *args, PyObject *kwds)args183,4678
static char arr_insert__doc__[] = "Insert vals sequentially into equivalent 1-d positions indicated by mask.";arr_insert__doc__264,6752
arr_insert(PyObject *NPY_UNUSED(self), PyObject *args, PyObject *kwdict)args271,6983
binary_search(double key, double arr [], npy_intp len)binary_search425,11576
arr_interp(PyObject *NPY_UNUSED(self), PyObject *args, PyObject *kwdict)args446,11986
static PyTypeObject *PyMemberDescr_TypePtr = NULL;PyMemberDescr_TypePtr554,14793
static PyTypeObject *PyGetSetDescr_TypePtr = NULL;PyGetSetDescr_TypePtr555,14844
static PyTypeObject *PyMethodDescr_TypePtr = NULL;PyMethodDescr_TypePtr556,14895
#define _TESTDOC1(_TESTDOC1586,15639
#define _TESTDOC2(_TESTDOC2587,15706
#define _ADDDOC(_ADDDOC588,15775
#undef _TESTDOC1_TESTDOC1633,17563
#undef _TESTDOC2_TESTDOC2634,17580
#undef _ADDDOC_ADDDOC635,17597
_packbits( void *In,_packbits651,17807
_unpackbits(void *In,_unpackbits704,19239
pack_or_unpack_bits(PyObject *input, int axis, int unpack)pack_or_unpack_bits733,19914
io_pack(PyObject *NPY_UNUSED(self), PyObject *args, PyObject *kwds)args865,23521
io_unpack(PyObject *NPY_UNUSED(self), PyObject *args, PyObject *kwds)args879,23905
static struct PyMethodDef methods[] = {methods892,24273
define_types(void)define_types911,24990
static struct PyModuleDef moduledef = {moduledef937,25600
#define RETVAL RETVAL951,25828
PyObject *PyInit__compiled_base(void)PyInit__compiled_base952,25845

numpy/linalg/blas_lite.c,4167
#define EPSILON EPSILON11,204
#define SAFEMINIMUM SAFEMINIMUM12,239
#define PRECISION PRECISION13,283
#define BASE BASE14,322
static integer c__1 = 1;c__123,451
static doublecomplex c_b359 = {1.,0.};c_b35924,476
/* Subroutine */ int daxpy_(integer *n, doublereal *da, doublereal *dx,daxpy_26,516
doublereal dcabs1_(doublecomplex *z__)dcabs1_114,2083
#define t t121,2246
#define zz zz122,2280
#undef zzzz129,2412
#undef tt130,2422
/* Subroutine */ int dcopy_(integer *n, doublereal *dx, integer *incx,dcopy_133,2433
doublereal ddot_(integer *n, doublereal *dx, integer *incx, doublereal *dy,ddot_221,3985
/* Subroutine */ int dgemm_(char *transa, char *transb, integer *m, integer *dgemm_312,5662
/* Subroutine */ int dgemv_(char *trans, integer *m, integer *n, doublereal *dgemv_674,15118
/* Subroutine */ int dger_(integer *m, integer *n, doublereal *alpha,dger_962,21765
doublereal dnrm2_(integer *n, doublereal *x, integer *incx)dnrm2_1133,25818
/* Subroutine */ int drot_(integer *n, doublereal *dx, integer *incx,drot_1205,27278
/* Subroutine */ int dscal_(integer *n, doublereal *da, doublereal *dx,dscal_1272,28567
/* Subroutine */ int dswap_(integer *n, doublereal *dx, integer *incx,dswap_1347,29984
/* Subroutine */ int dsymv_(char *uplo, integer *n, doublereal *alpha,dsymv_1442,31630
/* Subroutine */ int dsyr2_(char *uplo, integer *n, doublereal *alpha,dsyr2_1730,38728
/* Subroutine */ int dsyr2k_(char *uplo, char *trans, integer *n, integer *k,dsyr2k_1982,45230
/* Subroutine */ int dsyrk_(char *uplo, char *trans, integer *n, integer *k,dsyrk_2362,55744
/* Subroutine */ int dtrmm_(char *side, char *uplo, char *transa, char *diag,dtrmm_2707,64633
/* Subroutine */ int dtrmv_(char *uplo, char *trans, char *diag, integer *n,dtrmv_3133,75101
/* Subroutine */ int dtrsm_(char *side, char *uplo, char *transa, char *diag,dtrsm_3455,82546
doublereal dzasum_(integer *n, doublecomplex *zx, integer *incx)dzasum_3918,93790
doublereal dznrm2_(integer *n, doublecomplex *x, integer *incx)dznrm2_3975,94886
integer idamax_(integer *n, doublereal *dx, integer *incx)idamax_4060,96692
integer izamax_(integer *n, doublecomplex *zx, integer *incx)izamax_4130,98012
logical lsame_(char *ca, char *cb)lsame_4200,99309
/* Subroutine */ int xerbla_DISABLE(char *srname, integer *info)xerbla_DISABLE4310,101693
/* Subroutine */ int zaxpy_(integer *n, doublecomplex *za, doublecomplex *zx,zaxpy_4366,103211
/* Subroutine */ int zcopy_(integer *n, doublecomplex *zx, integer *incx,zcopy_4444,104911
/* Double Complex */ VOID zdotc_(doublecomplex * ret_val, integer *n,zdotc_4510,106130
/* Double Complex */ VOID zdotu_(doublecomplex * ret_val, integer *n,zdotu_4590,108001
/* Subroutine */ int zdscal_(integer *n, doublereal *da, doublecomplex *zx,zdscal_4667,109801
/* Subroutine */ int zgemm_(char *transa, char *transb, integer *m, integer *zgemm_4729,111113
/* Subroutine */ int zgemv_(char *trans, integer *m, integer *n,zgemv_5401,130526
/* Subroutine */ int zgerc_(integer *m, integer *n, doublecomplex *alpha,zgerc_5789,140540
/* Subroutine */ int zgeru_(integer *m, integer *n, doublecomplex *alpha,zgeru_5984,145641
/* Subroutine */ int zhemv_(char *uplo, integer *n, doublecomplex *alpha,zhemv_6176,150655
/* Subroutine */ int zher2_(char *uplo, integer *n, doublecomplex *alpha,zher2_6584,162618
/* Subroutine */ int zher2k_(char *uplo, char *trans, integer *n, integer *k,zher2k_7008,175185
/* Subroutine */ int zherk_(char *uplo, char *trans, integer *n, integer *k,zherk_7656,195113
/* Subroutine */ int zscal_(integer *n, doublecomplex *za, doublecomplex *zx,zscal_8162,209547
/* Subroutine */ int zswap_(integer *n, doublecomplex *zx, integer *incx,zswap_8222,210792
/* Subroutine */ int ztrmm_(char *side, char *uplo, char *transa, char *diag,ztrmm_8296,212250
/* Subroutine */ int ztrmv_(char *uplo, char *trans, char *diag, integer *n,ztrmv_8957,230898
/* Subroutine */ int ztrsm_(char *side, char *uplo, char *transa, char *diag,ztrsm_9488,245325
/* Subroutine */ int ztrsv_(char *uplo, char *trans, char *diag, integer *n,ztrsv_10160,263822

numpy/linalg/dlamch.c,483
doublereal dlamch_(char *cmach)dlamch_6,109
/* Subroutine */ int dlamc1_(integer *beta, integer *t, logical *rnd, logical dlamc1_133,3693
/* Subroutine */ int dlamc2_(integer *beta, integer *t, logical *rnd, dlamc2_345,8800
doublereal dlamc3_(doublereal *a, doublereal *b)dlamc3_648,16904
/* Subroutine */ int dlamc4_(integer *emin, doublereal *start, integer *base)dlamc4_689,17799
/* Subroutine */ int dlamc5_(integer *beta, integer *p, integer *emin, dlamc5_779,19813

numpy/linalg/dlapack_lite.c,11723
#define MAXITERLOOPS MAXITERLOOPS1,0
#define EPSILON EPSILON13,230
#define SAFEMINIMUM SAFEMINIMUM14,265
#define PRECISION PRECISION15,309
#define BASE BASE16,348
static integer c__9 = 9;c__925,477
static integer c__0 = 0;c__026,502
static doublereal c_b15 = 1.;c_b1527,527
static integer c__1 = 1;c__128,557
static doublereal c_b29 = 0.;c_b2929,582
static doublereal c_b94 = -.125;c_b9430,612
static doublereal c_b151 = -1.;c_b15131,645
static integer c_n1 = -1;c_n132,677
static integer c__3 = 3;c__333,703
static integer c__2 = 2;c__234,728
static integer c__8 = 8;c__835,753
static integer c__4 = 4;c__436,778
static integer c__65 = 65;c__6537,803
static integer c__6 = 6;c__638,830
static integer c__15 = 15;c__1539,855
static logical c_false = FALSE_;c_false40,882
static integer c__10 = 10;c__1041,915
static integer c__11 = 11;c__1142,942
static doublereal c_b2804 = 2.;c_b280443,969
static logical c_true = TRUE_;c_true44,1001
static real c_b3825 = 0.f;c_b382545,1032
static real c_b3826 = 1.f;c_b382646,1059
/* Subroutine */ int dbdsdc_(char *uplo, char *compq, integer *n, doublereal *dbdsdc_48,1087
/* Subroutine */ int dbdsqr_(char *uplo, integer *n, integer *ncvt, integer *dbdsqr_536,16359
/* Subroutine */ int dgebak_(char *job, char *side, integer *n, integer *ilo,dgebak_1435,39645
/* Subroutine */ int dgebal_(char *job, integer *n, doublereal *a, integer *dgebal_1648,44735
/* Subroutine */ int dgebd2_(integer *m, integer *n, doublereal *a, integer *dgebd2_2022,53162
/* Subroutine */ int dgebrd_(integer *m, integer *n, doublereal *a, integer *dgebrd_2299,61757
/* Subroutine */ int dgeev_(char *jobvl, char *jobvr, integer *n, doublereal *dgeev_2611,71811
/* Subroutine */ int dgehd2_(integer *n, integer *ilo, integer *ihi,dgehd2_3177,89235
/* Subroutine */ int dgehrd_(integer *n, integer *ilo, integer *ihi,dgehrd_3340,94262
/* Subroutine */ int dgelq2_(integer *m, integer *n, doublereal *a, integer *dgelq2_3638,103360
/* Subroutine */ int dgelqf_(integer *m, integer *n, doublereal *a, integer *dgelqf_3771,106964
/* Subroutine */ int dgelsd_(integer *m, integer *n, integer *nrhs,dgelsd_4001,113343
/* Subroutine */ int dgeqr2_(integer *m, integer *n, doublereal *a, integer *dgeqr2_4686,134937
/* Subroutine */ int dgeqrf_(integer *m, integer *n, doublereal *a, integer *dgeqrf_4819,138544
/* Subroutine */ int dgesdd_(char *jobz, integer *m, integer *n, doublereal *dgesdd_5050,144948
/* Subroutine */ int dgesv_(integer *n, integer *nrhs, doublereal *a, integerdgesv_6780,197880
/* Subroutine */ int dgetf2_(integer *m, integer *n, doublereal *a, integer *dgetf2_6898,201515
/* Subroutine */ int dgetrf_(integer *m, integer *n, doublereal *a, integer *dgetrf_7046,205494
/* Subroutine */ int dgetrs_(char *trans, integer *n, integer *nrhs,dgetrs_7235,210871
/* Subroutine */ int dhseqr_(char *job, char *compz, integer *n, integer *ilo,dhseqr_7393,215102
/* Subroutine */ int dlabad_(doublereal *small, doublereal *large)dlabad_7997,233068
/* Subroutine */ int dlabrd_(integer *m, integer *n, integer *nb, doublereal *dlabrd_8053,234859
/* Subroutine */ int dlacpy_(char *uplo, integer *m, integer *n, doublereal *dlacpy_8456,248686
/* Subroutine */ int dladiv_(doublereal *a, doublereal *b, doublereal *c__,dladiv_8559,251295
/* Subroutine */ int dlae2_(doublereal *a, doublereal *b, doublereal *c__,dlae2_8619,252724
/* Subroutine */ int dlaed0_(integer *icompq, integer *qsiz, integer *n,dlaed0_8745,255746
/* Subroutine */ int dlaed1_(integer *n, doublereal *d__, doublereal *q,dlaed1_9165,267993
/* Subroutine */ int dlaed2_(integer *k, integer *n, integer *n1, doublereal *dlaed2_9391,275060
/* Subroutine */ int dlaed3_(integer *k, integer *n, integer *n1, doublereal *dlaed3_9906,288956
/* Subroutine */ int dlaed4_(integer *n, integer *i__, doublereal *d__,dlaed4_10214,298514
/* Subroutine */ int dlaed5_(integer *i__, doublereal *d__, doublereal *z__,dlaed5_11163,319723
/* Subroutine */ int dlaed6_(integer *kniter, logical *orgati, doublereal *dlaed6_11289,323058
/* Subroutine */ int dlaed7_(integer *icompq, integer *n, integer *qsiz,dlaed7_11615,331057
/* Subroutine */ int dlaed8_(integer *icompq, integer *k, integer *n, integerdlaed8_11943,342029
/* Subroutine */ int dlaed9_(integer *k, integer *kstart, integer *kstop,dlaed9_12396,354932
/* Subroutine */ int dlaeda_(integer *n, integer *tlvls, integer *curlvl,dlaeda_12644,362112
/* Subroutine */ int dlaev2_(doublereal *a, doublereal *b, doublereal *c__,dlaev2_12908,370139
/* Subroutine */ int dlahqr_(logical *wantt, logical *wantz, integer *n,dlahqr_13080,374234
/* Subroutine */ int dlahrd_(integer *n, integer *k, integer *nb, doublereal *dlahrd_13614,389254
/* Subroutine */ int dlaln2_(logical *ltrans, integer *na, integer *nw,dlaln2_13872,397160
#define ci ci13892,397965
#define cr cr13893,397986
#define civ civ13896,398133
#define crv crv13898,398200
#undef crvcrv14423,412759
#undef civciv14424,412770
#undef crcr14425,412781
#undef cici14426,412791
/* Subroutine */ int dlals0_(integer *icompq, integer *nl, integer *nr,dlals0_14429,412803
/* Subroutine */ int dlalsa_(integer *icompq, integer *smlsiz, integer *n,dlalsa_14878,426515
/* Subroutine */ int dlalsd_(char *uplo, integer *smlsiz, integer *n, integerdlalsd_15324,440256
/* Subroutine */ int dlamrg_(integer *n1, integer *n2, doublereal *a, integerdlamrg_15827,455828
doublereal dlange_(char *norm, integer *m, integer *n, doublereal *a, integerdlange_15940,458471
doublereal dlanhs_(char *norm, integer *n, doublereal *a, integer *lda,dlanhs_16109,462619
doublereal dlanst_(char *norm, integer *n, doublereal *d__, doublereal *e)dlanst_16284,466978
doublereal dlansy_(char *norm, char *uplo, integer *n, doublereal *a, integerdlansy_16420,470596
/* Subroutine */ int dlanv2_(doublereal *a, doublereal *b, doublereal *c__,dlanv2_16629,476184
doublereal dlapy2_(doublereal *x, doublereal *y)dlapy2_16847,481438
doublereal dlapy3_(doublereal *x, doublereal *y, doublereal *z__)dlapy3_16900,482528
/* Subroutine */ int dlarf_(char *side, integer *m, integer *n, doublereal *v,dlarf_16960,483850
/* Subroutine */ int dlarfb_(char *side, char *trans, char *direct, char *dlarfb_17087,487210
/* Subroutine */ int dlarfg_(integer *n, doublereal *alpha, doublereal *x,dlarfg_17810,505290
/* Subroutine */ int dlarft_(char *direct, char *storev, integer *n, integer *dlarft_17960,508754
/* Subroutine */ int dlarfx_(char *side, integer *m, integer *n, doublereal *dlarfx_18214,516248
/* Subroutine */ int dlartg_(doublereal *f, doublereal *g, doublereal *cs,dlartg_18942,533781
/* Subroutine */ int dlas2_(doublereal *f, doublereal *g, doublereal *h__,dlas2_19105,537484
/* Subroutine */ int dlascl_(char *type__, integer *kl, integer *ku,dlascl_19231,540747
/* Subroutine */ int dlasd0_(integer *n, integer *sqre, doublereal *d__,dlasd0_19544,548014
/* Subroutine */ int dlasd1_(integer *nl, integer *nr, integer *sqre,dlasd1_19816,555369
/* Subroutine */ int dlasd2_(integer *nl, integer *nr, integer *sqre, integerdlasd2_20076,564001
/* Subroutine */ int dlasd3_(integer *nl, integer *nr, integer *sqre, integerdlasd3_20672,581223
/* Subroutine */ int dlasd4_(integer *n, integer *i__, doublereal *d__,dlasd4_21096,594669
/* Subroutine */ int dlasd5_(integer *i__, doublereal *d__, doublereal *z__,dlasd5_22107,618458
/* Subroutine */ int dlasd6_(integer *icompq, integer *nl, integer *nr,dlasd6_22284,623281
/* Subroutine */ int dlasd7_(integer *icompq, integer *nl, integer *nr,dlasd7_22625,635621
/* Subroutine */ int dlasd8_(integer *icompq, integer *k, doublereal *d__,dlasd8_23124,649703
/* Subroutine */ int dlasda_(integer *icompq, integer *smlsiz, integer *n,dlasda_23419,658894
/* Subroutine */ int dlasdq_(char *uplo, integer *sqre, integer *n, integer *dlasdq_23883,674527
/* Subroutine */ int dlasdt_(integer *n, integer *lvl, integer *nd, integer *dlasdt_24244,685153
/* Subroutine */ int dlaset_(char *uplo, integer *m, integer *n, doublereal *dlaset_24360,687983
/* Subroutine */ int dlasq1_(integer *n, doublereal *d__, doublereal *e,dlasq1_24494,691318
/* Subroutine */ int dlasq2_(integer *n, doublereal *z__, integer *info)dlasq2_24677,696457
/* Subroutine */ int dlasq3_(integer *i0, integer *n0, doublereal *z__,dlasq3_25191,709363
/* Subroutine */ int dlasq4_(integer *i0, integer *n0, doublereal *z__,dlasq4_25517,717223
/* Subroutine */ int dlasq5_(integer *i0, integer *n0, doublereal *z__,dlasq5_25896,725273
/* Subroutine */ int dlasq6_(integer *i0, integer *n0, doublereal *z__,dlasq6_26108,730268
/* Subroutine */ int dlasr_(char *side, char *pivot, char *direct, integer *m,dlasr_26290,734791
/* Subroutine */ int dlasrt_(char *id, integer *n, doublereal *d__, integer *dlasrt_26680,745201
/* Subroutine */ int dlassq_(integer *n, doublereal *x, integer *incx,dlassq_26942,750417
/* Subroutine */ int dlasv2_(doublereal *f, doublereal *g, doublereal *h__,dlasv2_27036,752966
/* Subroutine */ int dlaswp_(integer *n, doublereal *a, integer *lda, integerdlaswp_27286,758747
/* Subroutine */ int dlatrd_(char *uplo, integer *n, integer *nb, doublereal *dlatrd_27426,762092
/* Subroutine */ int dorg2r_(integer *m, integer *n, integer *k, doublereal *dorg2r_27752,773144
/* Subroutine */ int dorgbr_(char *vect, integer *m, integer *n, integer *k,dorgbr_27899,776875
/* Subroutine */ int dorghr_(integer *n, integer *ilo, integer *ihi,dorghr_28177,784628
/* Subroutine */ int dorgl2_(integer *m, integer *n, integer *k, doublereal *dorgl2_28365,789660
/* Subroutine */ int dorglq_(integer *m, integer *n, integer *k, doublereal *dorglq_28516,793402
/* Subroutine */ int dorgqr_(integer *m, integer *n, integer *k, doublereal *dorgqr_28773,800259
/* Subroutine */ int dorm2l_(char *side, char *trans, integer *m, integer *n,dorm2l_29031,807160
/* Subroutine */ int dorm2r_(char *side, char *trans, integer *m, integer *n,dorm2r_29232,812319
/* Subroutine */ int dormbr_(char *vect, char *side, char *trans, integer *m,dormbr_29437,817505
/* Subroutine */ int dorml2_(char *side, char *trans, integer *m, integer *n,dorml2_29772,827199
/* Subroutine */ int dormlq_(char *side, char *trans, integer *m, integer *n,dormlq_29977,832409
/* Subroutine */ int dormql_(char *side, char *trans, integer *m, integer *n,dormql_30284,840797
/* Subroutine */ int dormqr_(char *side, char *trans, integer *m, integer *n,dormqr_30579,848997
/* Subroutine */ int dormtr_(char *side, char *uplo, char *trans, integer *m,dormtr_30879,857223
/* Subroutine */ int dpotf2_(char *uplo, integer *n, doublereal *a, integer *dpotf2_31148,864975
/* Subroutine */ int dpotrf_(char *uplo, integer *n, doublereal *a, integer *dpotrf_31339,870063
/* Subroutine */ int dstedc_(char *compz, integer *n, doublereal *d__,dstedc_31556,876255
/* Subroutine */ int dsteqr_(char *compz, integer *n, doublereal *d__,dsteqr_32013,889768
/* Subroutine */ int dsterf_(integer *n, doublereal *d__, doublereal *e,dsterf_32614,903462
/* Subroutine */ int dsyevd_(char *jobz, char *uplo, integer *n, doublereal *dsyevd_33055,912328
/* Subroutine */ int dsytd2_(char *uplo, integer *n, doublereal *a, integer *dsytd2_33364,922028
/* Subroutine */ int dsytrd_(char *uplo, integer *n, doublereal *a, integer *dsytrd_33647,930547
/* Subroutine */ int dtrevc_(char *side, char *howmny, logical *select,dtrevc_33993,940712
integer ieeeck_(integer *ispec, real *zero, real *one)ieeeck_35248,974083
integer ilaenv_(integer *ispec, char *name__, char *opts, integer *n1,ilaenv_35397,976893

numpy/linalg/f2c.h,5767
#define F2C_INCLUDEF2C_INCLUDE8,219
typedef int integer;integer10,240
typedef char *address;address11,261
typedef short int shortint;shortint12,284
typedef float real;real13,312
typedef double doublereal;doublereal14,332
typedef struct { real r, i; } complex;r15,359
typedef struct { real r, i; } complex;i15,359
typedef struct { real r, i; } complex;complex15,359
typedef struct { doublereal r, i; } doublecomplex;r16,398
typedef struct { doublereal r, i; } doublecomplex;i16,398
typedef struct { doublereal r, i; } doublecomplex;doublecomplex16,398
typedef int logical;logical17,449
typedef short int shortlogical;shortlogical18,470
typedef char logical1;logical119,502
typedef char integer1;integer120,525
#define TRUE_ TRUE_22,549
#define FALSE_ FALSE_23,567
#define Extern Extern27,634
typedef short flag;flag34,709
typedef short ftnlen;ftnlen35,729
typedef short ftnint;ftnint36,751
typedef int flag;flag38,779
typedef int ftnlen;ftnlen39,797
typedef int ftnint;ftnint40,817
{	flag cierr;cierr45,885
	ftnint ciunit;ciunit46,899
	flag ciend;ciend47,915
	char *cifmt;cifmt48,928
	ftnint cirec;cirec49,942
} cilist;cilist50,957
{	flag icierr;icierr54,1008
	char *iciunit;iciunit55,1023
	flag iciend;iciend56,1039
	char *icifmt;icifmt57,1053
	ftnint icirlen;icirlen58,1068
	ftnint icirnum;icirnum59,1085
} icilist;icilist60,1102
{	flag oerr;oerr64,1138
	ftnint ounit;ounit65,1151
	char *ofnm;ofnm66,1166
	ftnlen ofnmlen;ofnmlen67,1179
	char *osta;osta68,1196
	char *oacc;oacc69,1209
	char *ofm;ofm70,1222
	ftnint orl;orl71,1234
	char *oblnk;oblnk72,1247
} olist;olist73,1261
{	flag cerr;cerr77,1296
	ftnint cunit;cunit78,1309
	char *csta;csta79,1324
} cllist;cllist80,1337
{	flag aerr;aerr84,1394
	ftnint aunit;aunit85,1407
} alist;alist86,1422
{	flag inerr;inerr90,1461
	ftnint inunit;inunit91,1475
	char *infile;infile92,1491
	ftnlen infilen;infilen93,1506
	ftnint	*inex;	/*parameters in standard's order*/inex94,1523
	ftnint	*inopen;inopen95,1573
	ftnint	*innum;innum96,1590
	ftnint	*innamed;innamed97,1606
	char	*inname;inname98,1624
	ftnlen	innamlen;innamlen99,1639
	char	*inacc;inacc100,1657
	ftnlen	inacclen;inacclen101,1671
	char	*inseq;inseq102,1689
	ftnlen	inseqlen;inseqlen103,1703
	char 	*indir;indir104,1721
	ftnlen	indirlen;indirlen105,1736
	char	*infmt;infmt106,1754
	ftnlen	infmtlen;infmtlen107,1768
	char	*inform;inform108,1786
	ftnint	informlen;informlen109,1801
	char	*inunf;inunf110,1820
	ftnlen	inunflen;inunflen111,1834
	ftnint	*inrecl;inrecl112,1852
	ftnint	*innrec;innrec113,1869
	char	*inblank;inblank114,1886
	ftnlen	inblanklen;inblanklen115,1902
} inlist;inlist116,1922
#define VOID VOID118,1933
union Multitype {	/* for multiple entry points */Multitype120,1952
	shortint h;h121,2002
	integer i;i122,2015
	real r;r123,2027
	doublereal d;d124,2036
	complex c;c125,2051
	doublecomplex z;z126,2063
typedef union Multitype Multitype;Multitype129,2086
typedef long Long;	/* No longer used; formerly in Namelist */Long131,2122
struct Vardesc {	/* for Namelist */Vardesc133,2185
	char *name;name134,2221
	char *addr;addr135,2234
	ftnlen *dims;dims136,2247
	int  type;type137,2262
typedef struct Vardesc Vardesc;Vardesc139,2278
struct Namelist {Namelist141,2311
	char *name;name142,2329
	Vardesc **vars;vars143,2342
	int nvars;nvars144,2359
typedef struct Namelist Namelist;Namelist146,2375
#define abs(abs149,2422
#define dabs(dabs151,2468
#define min(min153,2515
#define max(max156,2576
#define dmin(dmin158,2625
#define dmax(dmax159,2664
#define F2C_proc_par_types F2C_proc_par_types163,2753
typedef int /* Unknown procedure type */ (*U_fp)(...);U_fp165,2801
typedef shortint (*J_fp)(...);J_fp166,2856
typedef integer (*I_fp)(...);I_fp167,2887
typedef real (*R_fp)(...);R_fp168,2917
typedef doublereal (*D_fp)(...), (*E_fp)(...);D_fp169,2944
typedef doublereal (*D_fp)(...), (*E_fp)(...);E_fp169,2944
typedef /* Complex */ VOID (*C_fp)(...);C_fp170,2991
typedef /* Double Complex */ VOID (*Z_fp)(...);Z_fp171,3032
typedef logical (*L_fp)(...);L_fp172,3080
typedef shortlogical (*K_fp)(...);K_fp173,3110
typedef /* Character */ VOID (*H_fp)(...);H_fp174,3145
typedef /* Subroutine */ int (*S_fp)(...);S_fp175,3188
typedef int /* Unknown procedure type */ (*U_fp)(void);U_fp177,3237
typedef shortint (*J_fp)(void);J_fp178,3293
typedef integer (*I_fp)(void);I_fp179,3325
typedef real (*R_fp)(void);R_fp180,3356
typedef doublereal (*D_fp)(void), (*E_fp)(void);D_fp181,3384
typedef doublereal (*D_fp)(void), (*E_fp)(void);E_fp181,3384
typedef /* Complex */ VOID (*C_fp)(void);C_fp182,3433
typedef /* Double Complex */ VOID (*Z_fp)(void);Z_fp183,3475
typedef logical (*L_fp)(void);L_fp184,3524
typedef shortlogical (*K_fp)(void);K_fp185,3555
typedef /* Character */ VOID (*H_fp)(void);H_fp186,3591
typedef /* Subroutine */ int (*S_fp)(void);S_fp187,3635
typedef VOID C_f;	/* complex function */C_f190,3744
typedef VOID H_f;	/* character function */H_f191,3785
typedef VOID Z_f;	/* double complex function */Z_f192,3828
typedef doublereal E_f;	/* real function with -R not specified */E_f193,3876
#undef craycray198,4042
#undef gcosgcos199,4054
#undef mc68010mc68010200,4066
#undef mc68020mc68020201,4081
#undef mipsmips202,4096
#undef pdp11pdp11203,4108
#undef sgisgi204,4121
#undef sparcsparc205,4132
#undef sunsun206,4145
#undef sun2sun2207,4156
#undef sun3sun3208,4168
#undef sun4sun4209,4180
#undef u370u370210,4192
#undef u3bu3b211,4204
#undef u3b2u3b2212,4215
#undef u3b5u3b5213,4227
#undef unixunix214,4239
#undef vaxvax215,4251

numpy/linalg/f2c_lite.c,1146
extern void s_wsfe(cilist *f) {;}s_wsfe8,96
extern void e_wsfe(void) {;}e_wsfe9,130
extern void do_fio(integer *c, char *s, ftnlen l) {;}do_fio10,159
s_rnge(char *var, int index, char *routine, int lineno)s_rnge16,406
#undef absabs29,714
double f__cabs(real, imag) double real, imag;f__cabs27,662
d_cnjg(r, z) doublecomplex *r, *z;d_cnjg56,1066
#define log10e log10e76,1309
#undef absabs82,1418
double d_sign(a,b) doublereal *a, *b;d_sign92,1518
#undef absabs107,1756
#undef absabs121,1947
double pow_dd(ap, bp) doublereal *ap, *bp;pow_dd119,1898
#define NO_OVERWRITENO_OVERWRITE167,2621
#undef absabs172,2666
s_cat(lp, rpp, rnp, np, ll) char *lp, *rpp[]; ftnlen rnp[], *np, ll;s_cat186,2869
VOID s_copy(a, b, la, lb) register char *a, *b; ftnlen la, lb;s_copy292,4612
void z_div(doublecomplex *c, doublecomplex *a, doublecomplex *b)z_div351,5572
#undef absabs387,6243
void z_sqrt(doublecomplex *r, doublecomplex *z)z_sqrt390,6294
integer pow_ii(ap, bp) integer *ap, *bp;pow_ii415,6668
#undef absabs453,7165
#undef minmin454,7176
#undef maxmax455,7187
int s_stop(char *s, ftnlen n)s_stop464,7296

numpy/linalg/lapack_litemodule.c,1191
# define FNAME(FNAME10,184
# define FNAME(FNAME12,210
typedef struct { float r, i; } f2c_complex;r15,241
typedef struct { float r, i; } f2c_complex;i15,241
typedef struct { float r, i; } f2c_complex;f2c_complex15,241
typedef struct { double r, i; } f2c_doublecomplex;r16,285
typedef struct { double r, i; } f2c_doublecomplex;i16,285
typedef struct { double r, i; } f2c_doublecomplex;f2c_doublecomplex16,285
static PyObject *LapackError;LapackError95,4393
#define TRY(TRY97,4424
check_object(PyObject *ob, int t, char *obname,check_object100,4473
#define CHDATA(CHDATA129,5578
#define SHDATA(SHDATA130,5636
#define DDATA(DDATA131,5699
#define FDATA(FDATA132,5758
#define CDATA(CDATA133,5816
#define ZDATA(ZDATA134,5880
#define IDATA(IDATA135,5950
#define STR(STR803,29985
#define lameth(lameth804,30003
static struct PyMethodDef lapack_lite_module_methods[] = {lapack_lite_module_methods805,30076
static char lapack_lite_module_documentation[] = "";lapack_lite_module_documentation827,30520
static struct PyModuleDef moduledef = {moduledef831,30601
#define RETVAL RETVAL846,30894
PyObject *PyInit_lapack_lite(void)PyInit_lapack_lite847,30911

numpy/linalg/python_xerbla.c,56
int xerbla_(char *srname, integer *info)xerbla_21,571

numpy/linalg/zlapack_lite.c,7453
#define EPSILON EPSILON11,204
#define SAFEMINIMUM SAFEMINIMUM12,239
#define PRECISION PRECISION13,283
#define BASE BASE14,322
static integer c__1 = 1;c__123,451
static doublecomplex c_b59 = {0.,0.};c_b5924,476
static doublecomplex c_b60 = {1.,0.};c_b6025,514
static integer c_n1 = -1;c_n126,552
static integer c__3 = 3;c__327,578
static integer c__2 = 2;c__228,603
static integer c__0 = 0;c__029,628
static integer c__8 = 8;c__830,653
static integer c__4 = 4;c__431,678
static integer c__65 = 65;c__6532,703
static integer c__6 = 6;c__633,730
static integer c__9 = 9;c__934,755
static doublereal c_b324 = 0.;c_b32435,780
static doublereal c_b1015 = 1.;c_b101536,811
static integer c__15 = 15;c__1537,843
static logical c_false = FALSE_;c_false38,870
static doublereal c_b1294 = -1.;c_b129439,903
static doublereal c_b2210 = .5;c_b221040,936
/* Subroutine */ int zdrot_(integer *n, doublecomplex *cx, integer *incx,zdrot_42,969
/* Subroutine */ int zgebak_(char *job, char *side, integer *n, integer *ilo,zgebak_136,3278
/* Subroutine */ int zgebal_(char *job, integer *n, doublecomplex *a, integerzgebal_347,8315
/* Subroutine */ int zgebd2_(integer *m, integer *n, doublecomplex *a,zgebd2_729,17066
/* Subroutine */ int zgebrd_(integer *m, integer *n, doublecomplex *a,zgebrd_1048,26858
/* Subroutine */ int zgeev_(char *jobvl, char *jobvr, integer *n,zgeev_1376,37291
/* Subroutine */ int zgehd2_(integer *n, integer *ilo, integer *ihi,zgehd2_1922,53647
/* Subroutine */ int zgehrd_(integer *n, integer *ilo, integer *ihi,zgehrd_2093,58918
/* Subroutine */ int zgelq2_(integer *m, integer *n, doublecomplex *a,zgelq2_2393,68197
/* Subroutine */ int zgelqf_(integer *m, integer *n, doublecomplex *a,zgelqf_2534,72117
/* Subroutine */ int zgelsd_(integer *m, integer *n, integer *nrhs,zgelsd_2770,78682
/* Subroutine */ int zgeqr2_(integer *m, integer *n, doublecomplex *a,zgeqr2_3467,100689
/* Subroutine */ int zgeqrf_(integer *m, integer *n, doublecomplex *a,zgeqrf_3608,104577
/* Subroutine */ int zgesdd_(char *jobz, integer *m, integer *n,zgesdd_3845,111167
/* Subroutine */ int zgesv_(integer *n, integer *nrhs, doublecomplex *a,zgesv_6343,187640
/* Subroutine */ int zgetf2_(integer *m, integer *n, doublecomplex *a,zgetf2_6463,191290
/* Subroutine */ int zgetrf_(integer *m, integer *n, doublecomplex *a,zgetrf_6616,195450
/* Subroutine */ int zgetrs_(char *trans, integer *n, integer *nrhs,zgetrs_6806,200869
/* Subroutine */ int zheevd_(char *jobz, char *uplo, integer *n,zheevd_6965,205163
/* Subroutine */ int zhetd2_(char *uplo, integer *n, doublecomplex *a,zhetd2_7313,216266
/* Subroutine */ int zhetrd_(char *uplo, integer *n, doublecomplex *a,zhetrd_7652,226503
/* Subroutine */ int zhseqr_(char *job, char *compz, integer *n, integer *ilo,zhseqr_8008,237024
/* Subroutine */ int zlabrd_(integer *m, integer *n, integer *nb,zlabrd_8659,256334
/* Subroutine */ int zlacgv_(integer *n, doublecomplex *x, integer *incx)zlacgv_9132,272336
/* Subroutine */ int zlacp2_(char *uplo, integer *m, integer *n, doublereal *zlacp2_9207,273975
/* Subroutine */ int zlacpy_(char *uplo, integer *m, integer *n,zlacpy_9319,276719
/* Subroutine */ int zlacrm_(integer *m, integer *n, doublecomplex *a,zlacrm_9431,279483
/* Double Complex */ VOID zladiv_(doublecomplex * ret_val, doublecomplex *x,zladiv_9579,283265
/* Subroutine */ int zlaed0_(integer *qsiz, integer *n, doublereal *d__,zlaed0_9634,284583
/* Subroutine */ int zlaed7_(integer *n, integer *cutpnt, integer *qsiz,zlaed7_9984,294432
/* Subroutine */ int zlaed8_(integer *k, integer *n, integer *qsiz,zlaed8_10295,304760
/* Subroutine */ int zlahqr_(logical *wantt, logical *wantz, integer *n,zlahqr_10710,316843
/* Subroutine */ int zlahrd_(integer *n, integer *k, integer *nb,zlahrd_11285,334234
/* Subroutine */ int zlals0_(integer *icompq, integer *nl, integer *nr,zlals0_11560,342786
/* Subroutine */ int zlalsa_(integer *icompq, integer *smlsiz, integer *n,zlalsa_12105,359066
/* Subroutine */ int zlalsd_(char *uplo, integer *smlsiz, integer *n, integerzlalsd_12767,378222
doublereal zlange_(char *norm, integer *m, integer *n, doublecomplex *a,zlange_13507,400008
doublereal zlanhe_(char *norm, char *uplo, integer *n, doublecomplex *a,zlanhe_13676,404142
doublereal zlanhs_(char *norm, integer *n, doublecomplex *a, integer *lda,zlanhs_13911,410458
/* Subroutine */ int zlarcm_(integer *m, integer *n, doublereal *a, integer *zlarcm_14086,414800
/* Subroutine */ int zlarf_(char *side, integer *m, integer *n, doublecomplexzlarf_14234,418585
/* Subroutine */ int zlarfb_(char *side, char *trans, char *direct, char *zlarfb_14364,422122
/* Subroutine */ int zlarfg_(integer *n, doublecomplex *alpha, doublecomplex *zlarfg_15142,442430
/* Subroutine */ int zlarft_(char *direct, char *storev, integer *n, integer *zlarft_15315,447093
/* Subroutine */ int zlarfx_(char *side, integer *m, integer *n,zlarfx_15603,455826
/* Subroutine */ int zlascl_(char *type__, integer *kl, integer *ku,zlascl_17647,533152
/* Subroutine */ int zlaset_(char *uplo, integer *m, integer *n,zlaset_17982,541283
/* Subroutine */ int zlasr_(char *side, char *pivot, char *direct, integer *m,zlasr_18129,544839
/* Subroutine */ int zlassq_(integer *n, doublecomplex *x, integer *incx,zlassq_18674,561164
/* Subroutine */ int zlaswp_(integer *n, doublecomplex *a, integer *lda,zlaswp_18790,564187
/* Subroutine */ int zlatrd_(char *uplo, integer *n, integer *nb,zlatrd_18938,567834
/* Subroutine */ int zlatrs_(char *uplo, char *trans, char *diag, char *zlatrs_19331,581131
/* Subroutine */ int zpotf2_(char *uplo, integer *n, doublecomplex *a,zpotf2_20500,611239
/* Subroutine */ int zpotrf_(char *uplo, integer *n, doublecomplex *a,zpotrf_20713,617060
/* Subroutine */ int zstedc_(char *compz, integer *n, doublereal *d__,zstedc_20934,623413
/* Subroutine */ int zsteqr_(char *compz, integer *n, doublereal *d__,zsteqr_21392,637627
/* Subroutine */ int ztrevc_(char *side, char *howmny, logical *select,ztrevc_21992,651365
/* Subroutine */ int zung2r_(integer *m, integer *n, integer *k,zung2r_22501,666220
/* Subroutine */ int zungbr_(char *vect, integer *m, integer *n, integer *k,zungbr_22658,670261
/* Subroutine */ int zunghr_(integer *n, integer *ilo, integer *ihi,zunghr_22947,678412
/* Subroutine */ int zungl2_(integer *m, integer *n, integer *k,zungl2_23143,683779
/* Subroutine */ int zunglq_(integer *m, integer *n, integer *k,zunglq_23312,688147
/* Subroutine */ int zungqr_(integer *m, integer *n, integer *k,zungqr_23576,695265
/* Subroutine */ int zunm2l_(char *side, char *trans, integer *m, integer *n,zunm2l_23841,702413
/* Subroutine */ int zunm2r_(char *side, char *trans, integer *m, integer *n,zunm2r_24056,707990
/* Subroutine */ int zunmbr_(char *vect, char *side, char *trans, integer *m,zunmbr_24275,713593
/* Subroutine */ int zunml2_(char *side, char *trans, integer *m, integer *n,zunml2_24607,723304
/* Subroutine */ int zunmlq_(char *side, char *trans, integer *m, integer *n,zunmlq_24834,729178
/* Subroutine */ int zunmql_(char *side, char *trans, integer *m, integer *n,zunmql_25145,737728
/* Subroutine */ int zunmqr_(char *side, char *trans, integer *m, integer *n,zunmqr_25445,746098
/* Subroutine */ int zunmtr_(char *side, char *uplo, char *trans, integer *m,zunmtr_25750,754504

numpy/numarray/include/numpy/arraybase.h,2341
#define _arraybase_h _arraybase_h2,28
#define SZ_BUF SZ_BUF4,52
#define MAXDIM MAXDIM5,71
#define MAXARGS MAXARGS6,98
typedef npy_intp maybelong;maybelong8,118
typedef npy_bool Bool;Bool9,146
typedef npy_int8 Int8;Int810,169
typedef npy_uint8 UInt8;UInt811,192
typedef npy_int16 Int16;Int1612,217
typedef npy_uint16 UInt16;UInt1613,242
typedef npy_int32 Int32;Int3214,269
typedef npy_uint32 UInt32; UInt3215,294
typedef npy_int64 Int64;Int6416,322
typedef npy_uint64 UInt64;UInt6417,347
typedef npy_float32 Float32;Float3218,374
typedef npy_float64 Float64;Float6419,403
  tAny=-1,tAny23,448
  tBool=PyArray_BOOL,tBool24,459
  tInt8=PyArray_INT8,tInt825,481
  tUInt8=PyArray_UINT8,tUInt826,503
  tInt16=PyArray_INT16,tInt1627,527
  tUInt16=PyArray_UINT16,tUInt1628,551
  tInt32=PyArray_INT32,tInt3229,577
  tUInt32=PyArray_UINT32,tUInt3230,601
  tInt64=PyArray_INT64,tInt6431,627
  tUInt64=PyArray_UINT64,tUInt6432,651
  tFloat32=PyArray_FLOAT32,tFloat3233,677
  tFloat64=PyArray_FLOAT64,tFloat6434,705
  tComplex32=PyArray_COMPLEX64,tComplex3235,733
  tComplex64=PyArray_COMPLEX128,tComplex6436,765
  tObject=PyArray_OBJECT,        /* placeholder... does nothing */tObject37,798
  tMaxType=PyArray_NTYPES,tMaxType38,865
  tDefault = tFloat64,tDefault39,892
  tLong = tInt64,tLong41,941
} NumarrayType;NumarrayType45,990
#define nNumarrayType nNumarrayType47,1007
#define HAS_UINT64 HAS_UINT6449,1045
        NUM_LITTLE_ENDIAN=0,NUM_LITTLE_ENDIAN53,1082
        NUM_BIG_ENDIAN = 1NUM_BIG_ENDIAN54,1111
} NumarrayByteOrder;NumarrayByteOrder55,1138
typedef struct { Float32 r, i; } Complex32;r57,1160
typedef struct { Float32 r, i; } Complex32;i57,1160
typedef struct { Float32 r, i; } Complex32;Complex3257,1160
typedef struct { Float64 r, i; } Complex64;r58,1204
typedef struct { Float64 r, i; } Complex64;i58,1204
typedef struct { Float64 r, i; } Complex64;Complex6458,1204
#define WRITABLE WRITABLE60,1249
#define CHECKOVERFLOW CHECKOVERFLOW61,1280
#define UPDATEDICT UPDATEDICT62,1308
#define FORTRAN_CONTIGUOUS FORTRAN_CONTIGUOUS63,1334
#define IS_CARRAY IS_CARRAY64,1373
#define PyArray(PyArray66,1423
#define PyArray_ISFORTRAN_CONTIGUOUS(PyArray_ISFORTRAN_CONTIGUOUS67,1486
#define PyArray_ISWRITABLE PyArray_ISWRITABLE68,1576

numpy/numarray/include/numpy/cfunc.h,2068
#define __cfunc__ __cfunc__2,24
typedef PyObject *(*CFUNCasPyValue)(void *);CFUNCasPyValue4,45
typedef int (*UFUNC)(long, long, long, void **, long*);UFUNC5,90
typedef int (*CFUNCfromPyValue)(PyObject *, void *);CFUNCfromPyValue8,266
typedef int (*CFUNC_STRIDE_CONV_FUNC)(long, long, maybelong *, CFUNC_STRIDE_CONV_FUNC9,319
typedef int (*CFUNC_STRIDED_FUNC)(PyObject *, long, PyArrayObject **, CFUNC_STRIDED_FUNC12,445
#define MAXARRAYS MAXARRAYS15,538
	CFUNC_UFUNC,CFUNC_UFUNC18,575
	CFUNC_STRIDING,CFUNC_STRIDING19,589
	CFUNC_NSTRIDING,CFUNC_NSTRIDING20,606
	CFUNC_AS_PY_VALUE,CFUNC_AS_PY_VALUE21,624
	CFUNC_FROM_PY_VALUECFUNC_FROM_PY_VALUE22,644
} eCfuncType;eCfuncType23,665
	char *name;name26,697
        void *fptr;            /* Pointer to "un-wrapped" c function */fptr27,710
	eCfuncType type;       /* UFUNC, STRIDING, AsPyValue, FromPyValue */type28,782
	Bool chkself;          /* CFUNC does own alignment/bounds checking */chkself29,852
	Bool align;            /* CFUNC requires aligned buffer pointers */align30,923
	Int8 wantIn, wantOut;  /* required input/output arg counts. */wantIn31,992
	Int8 wantIn, wantOut;  /* required input/output arg counts. */wantOut31,992
	Int8 sizes[MAXARRAYS]; /* array of align/itemsizes. */sizes32,1056
	Int8 iters[MAXARRAYS]; /*  array of element counts. 0 --> niter. */iters33,1112
} CfuncDescriptor;CfuncDescriptor34,1181
    CfuncDescriptor descr;descr38,1236
} CfuncObject;CfuncObject39,1263
#define SELF_CHECKED_CFUNC_DESCR(SELF_CHECKED_CFUNC_DESCR41,1279
#define CHECK_ALIGN CHECK_ALIGN44,1434
#define CFUNC_DESCR(CFUNC_DESCR46,1457
#define UFUNC_DESCR1(UFUNC_DESCR150,1704
#define UFUNC_DESCR2(UFUNC_DESCR253,1857
#define UFUNC_DESCR3(UFUNC_DESCR356,2011
#define UFUNC_DESCR3sv(UFUNC_DESCR3sv59,2166
#define UFUNC_DESCR3vs(UFUNC_DESCR3vs62,2321
#define STRIDING_DESCR2(STRIDING_DESCR265,2476
#define NSTRIDING_DESCR1(NSTRIDING_DESCR168,2627
#define NSTRIDING_DESCR2(NSTRIDING_DESCR271,2773
#define NSTRIDING_DESCR3(NSTRIDING_DESCR374,2919

numpy/numarray/include/numpy/ieeespecial.h,4104
#define MKINT(MKINT4,57
#define MKINT64(MKINT645,82
#define BIT(BIT6,111
#define MKINT(MKINT8,147
#define MKINT64(MKINT649,171
#define BIT(BIT10,199
#define NEG_QUIET_NAN_MIN32 NEG_QUIET_NAN_MIN3214,237
#define NEG_QUIET_NAN_MAX32 NEG_QUIET_NAN_MAX3215,286
#define INDETERMINATE_MIN32 INDETERMINATE_MIN3217,336
#define INDETERMINATE_MAX32 INDETERMINATE_MAX3218,385
#define NEG_SIGNAL_NAN_MIN32 NEG_SIGNAL_NAN_MIN3220,435
#define NEG_SIGNAL_NAN_MAX32 NEG_SIGNAL_NAN_MAX3221,484
#define NEG_INFINITY_MIN32 NEG_INFINITY_MIN3223,534
#define NEG_NORMALIZED_MIN32 NEG_NORMALIZED_MIN3225,584
#define NEG_NORMALIZED_MAX32 NEG_NORMALIZED_MAX3226,633
#define NEG_DENORMALIZED_MIN32 NEG_DENORMALIZED_MIN3228,683
#define NEG_DENORMALIZED_MAX32 NEG_DENORMALIZED_MAX3229,732
#define NEG_ZERO_MIN32 NEG_ZERO_MIN3231,782
#define NEG_ZERO_MAX32 NEG_ZERO_MAX3232,831
#define POS_ZERO_MIN32 POS_ZERO_MIN3234,881
#define POS_ZERO_MAX32 POS_ZERO_MAX3235,930
#define POS_DENORMALIZED_MIN32 POS_DENORMALIZED_MIN3237,980
#define POS_DENORMALIZED_MAX32 POS_DENORMALIZED_MAX3238,1029
#define POS_NORMALIZED_MIN32 POS_NORMALIZED_MIN3240,1079
#define POS_NORMALIZED_MAX32 POS_NORMALIZED_MAX3241,1128
#define POS_INFINITY_MIN32 POS_INFINITY_MIN3243,1178
#define POS_INFINITY_MAX32 POS_INFINITY_MAX3244,1227
#define POS_SIGNAL_NAN_MIN32 POS_SIGNAL_NAN_MIN3246,1277
#define POS_SIGNAL_NAN_MAX32 POS_SIGNAL_NAN_MAX3247,1326
#define POS_QUIET_NAN_MIN32 POS_QUIET_NAN_MIN3249,1376
#define POS_QUIET_NAN_MAX32 POS_QUIET_NAN_MAX3250,1425
#define NEG_QUIET_NAN_MIN64 NEG_QUIET_NAN_MIN6454,1510
#define NEG_QUIET_NAN_MAX64 NEG_QUIET_NAN_MAX6455,1569
#define INDETERMINATE_MIN64 INDETERMINATE_MIN6457,1629
#define INDETERMINATE_MAX64 INDETERMINATE_MAX6458,1688
#define NEG_SIGNAL_NAN_MIN64 NEG_SIGNAL_NAN_MIN6460,1748
#define NEG_SIGNAL_NAN_MAX64 NEG_SIGNAL_NAN_MAX6461,1807
#define NEG_INFINITY_MIN64 NEG_INFINITY_MIN6463,1867
#define NEG_NORMALIZED_MIN64 NEG_NORMALIZED_MIN6465,1927
#define NEG_NORMALIZED_MAX64 NEG_NORMALIZED_MAX6466,1986
#define NEG_DENORMALIZED_MIN64 NEG_DENORMALIZED_MIN6468,2046
#define NEG_DENORMALIZED_MAX64 NEG_DENORMALIZED_MAX6469,2105
#define NEG_ZERO_MIN64 NEG_ZERO_MIN6471,2165
#define NEG_ZERO_MAX64 NEG_ZERO_MAX6472,2224
#define POS_ZERO_MIN64 POS_ZERO_MIN6474,2284
#define POS_ZERO_MAX64 POS_ZERO_MAX6475,2343
#define POS_DENORMALIZED_MIN64 POS_DENORMALIZED_MIN6477,2403
#define POS_DENORMALIZED_MAX64 POS_DENORMALIZED_MAX6478,2462
#define POS_NORMALIZED_MIN64 POS_NORMALIZED_MIN6480,2522
#define POS_NORMALIZED_MAX64 POS_NORMALIZED_MAX6481,2581
#define POS_INFINITY_MIN64 POS_INFINITY_MIN6483,2641
#define POS_INFINITY_MAX64 POS_INFINITY_MAX6484,2700
#define POS_SIGNAL_NAN_MIN64 POS_SIGNAL_NAN_MIN6486,2760
#define POS_SIGNAL_NAN_MAX64 POS_SIGNAL_NAN_MAX6487,2819
#define POS_QUIET_NAN_MIN64 POS_QUIET_NAN_MIN6489,2879
#define POS_QUIET_NAN_MAX64 POS_QUIET_NAN_MAX6490,2938
	POS_QNAN_BIT,POS_QNAN_BIT94,3013
	NEG_QNAN_BIT,NEG_QNAN_BIT95,3028
	POS_SNAN_BIT,POS_SNAN_BIT96,3043
	NEG_SNAN_BIT,NEG_SNAN_BIT97,3058
	POS_INF_BIT,POS_INF_BIT98,3073
	NEG_INF_BIT,NEG_INF_BIT99,3087
	POS_DEN_BIT,POS_DEN_BIT100,3101
	NEG_DEN_BIT,NEG_DEN_BIT101,3115
	POS_NOR_BIT,POS_NOR_BIT102,3129
	NEG_NOR_BIT,NEG_NOR_BIT103,3143
	POS_ZERO_BIT,POS_ZERO_BIT104,3157
	NEG_ZERO_BIT,NEG_ZERO_BIT105,3172
	INDETERM_BIT,INDETERM_BIT106,3187
	BUG_BITBUG_BIT107,3202
} ieee_selects;ieee_selects108,3211
#define MSK_POS_QNAN MSK_POS_QNAN110,3228
#define MSK_POS_SNAN MSK_POS_SNAN111,3267
#define MSK_POS_INF MSK_POS_INF112,3306
#define MSK_POS_DEN MSK_POS_DEN113,3344
#define MSK_POS_NOR MSK_POS_NOR114,3382
#define MSK_POS_ZERO MSK_POS_ZERO115,3420
#define MSK_NEG_QNAN MSK_NEG_QNAN116,3459
#define MSK_NEG_SNAN MSK_NEG_SNAN117,3498
#define MSK_NEG_INF MSK_NEG_INF118,3537
#define MSK_NEG_DEN MSK_NEG_DEN119,3575
#define MSK_NEG_NOR MSK_NEG_NOR120,3613
#define MSK_NEG_ZERO MSK_NEG_ZERO121,3651
#define MSK_INDETERM MSK_INDETERM122,3690
#define MSK_BUG MSK_BUG123,3729

numpy/numarray/include/numpy/libnumarray.h,7479
#define NUMPY_LIBNUMARRAY_HNUMPY_LIBNUMARRAY_H5,90
void **libnumarray_API;libnumarray_API37,1019
static void **libnumarray_API;libnumarray_API39,1049
#define _import_libnumarray(_import_libnumarray44,1128
#define _import_libnumarray(_import_libnumarray61,2305
#define import_libnumarray(import_libnumarray78,3469
#define libnumarray_FatalApiError libnumarray_FatalApiError83,3660
static PyObject *_Error;_Error91,3939
#define  getBuffer getBuffer359,12692
#define  isBuffer isBuffer361,12849
#define  getWriteBufferDataPtr getWriteBufferDataPtr363,12993
#define  isBufferWriteable isBufferWriteable365,13166
#define  getReadBufferDataPtr getReadBufferDataPtr367,13319
#define  getBufferSize getBufferSize369,13491
#define  num_log num_log371,13640
#define  num_log10 num_log10373,13785
#define  num_pow num_pow375,13932
#define  num_acosh num_acosh377,14097
#define  num_asinh num_asinh379,14244
#define  num_atanh num_atanh381,14392
#define  num_round num_round383,14540
#define  int_dividebyzero_error int_dividebyzero_error385,14688
#define  int_overflow_error int_overflow_error387,14873
#define  umult64_overflow umult64_overflow389,15034
#define  smult64_overflow smult64_overflow391,15203
#define  NA_Done NA_Done393,15372
#define  NA_NewAll NA_NewAll395,15506
#define  NA_NewAllStrides NA_NewAllStrides397,15946
#define  NA_New NA_New399,16389
#define  NA_Empty NA_Empty401,16624
#define  NA_NewArray NA_NewArray403,16861
#define  NA_vNewArray NA_vNewArray405,17103
#define  NA_ReturnOutput NA_ReturnOutput407,17372
#define  NA_getBufferPtrAndSize NA_getBufferPtrAndSize409,17564
#define  NA_checkIo NA_checkIo411,17745
#define  NA_checkOneCBuffer NA_checkOneCBuffer413,17914
#define  NA_checkNCBuffers NA_checkNCBuffers415,18105
#define  NA_checkOneStriding NA_checkOneStriding417,18317
#define  NA_new_cfunc NA_new_cfunc419,18555
#define  NA_add_cfunc NA_add_cfunc421,18728
#define  NA_InputArray NA_InputArray423,18921
#define  NA_OutputArray NA_OutputArray425,19125
#define  NA_IoArray NA_IoArray427,19330
#define  NA_OptionalOutputArray NA_OptionalOutputArray429,19531
#define  NA_get_offset NA_get_offset431,19774
#define  NA_get_Float64 NA_get_Float64433,19950
#define  NA_set_Float64 NA_set_Float64435,20127
#define  NA_get_Complex64 NA_get_Complex64437,20314
#define  NA_set_Complex64 NA_set_Complex64439,20497
#define  NA_get_Int64 NA_get_Int64441,20690
#define  NA_set_Int64 NA_set_Int64443,20861
#define  NA_get1_Float64 NA_get1_Float64445,21042
#define  NA_get2_Float64 NA_get2_Float64447,21220
#define  NA_get3_Float64 NA_get3_Float64449,21408
#define  NA_set1_Float64 NA_set1_Float64451,21606
#define  NA_set2_Float64 NA_set2_Float64453,21794
#define  NA_set3_Float64 NA_set3_Float64455,21992
#define  NA_get1_Complex64 NA_get1_Complex64457,22200
#define  NA_get2_Complex64 NA_get2_Complex64459,22384
#define  NA_get3_Complex64 NA_get3_Complex64461,22578
#define  NA_set1_Complex64 NA_set1_Complex64463,22782
#define  NA_set2_Complex64 NA_set2_Complex64465,22976
#define  NA_set3_Complex64 NA_set3_Complex64467,23180
#define  NA_get1_Int64 NA_get1_Int64469,23394
#define  NA_get2_Int64 NA_get2_Int64471,23566
#define  NA_get3_Int64 NA_get3_Int64473,23748
#define  NA_set1_Int64 NA_set1_Int64475,23940
#define  NA_set2_Int64 NA_set2_Int64477,24122
#define  NA_set3_Int64 NA_set3_Int64479,24314
#define  NA_get1D_Float64 NA_get1D_Float64481,24516
#define  NA_set1D_Float64 NA_set1D_Float64483,24713
#define  NA_get1D_Int64 NA_get1D_Int64485,24910
#define  NA_set1D_Int64 NA_set1D_Int64487,25101
#define  NA_get1D_Complex64 NA_get1D_Complex64489,25292
#define  NA_set1D_Complex64 NA_set1D_Complex64491,25495
#define  NA_ShapeEqual NA_ShapeEqual493,25698
#define  NA_ShapeLessThan NA_ShapeLessThan495,25886
#define  NA_ByteOrder NA_ByteOrder497,26077
#define  NA_IeeeSpecial32 NA_IeeeSpecial32499,26214
#define  NA_IeeeSpecial64 NA_IeeeSpecial64501,26379
#define  NA_updateDataPtr NA_updateDataPtr503,26544
#define  NA_typeNoToName NA_typeNoToName505,26727
#define  NA_nameToTypeNo NA_nameToTypeNo507,26869
#define  NA_typeNoToTypeObject NA_typeNoToTypeObject509,27011
#define  NA_intTupleFromMaybeLongs NA_intTupleFromMaybeLongs511,27167
#define  NA_maybeLongsFromIntTuple NA_maybeLongsFromIntTuple513,27349
#define  NA_intTupleProduct NA_intTupleProduct515,27541
#define  NA_isIntegerSequence NA_isIntegerSequence517,27732
#define  NA_setArrayFromSequence NA_setArrayFromSequence519,27889
#define  NA_maxType NA_maxType521,28089
#define  NA_isPythonScalar NA_isPythonScalar523,28234
#define  NA_getPythonScalar NA_getPythonScalar525,28394
#define  NA_setFromPythonScalar NA_setFromPythonScalar527,28579
#define  NA_NDArrayCheck NA_NDArrayCheck529,28776
#define  NA_NumArrayCheck NA_NumArrayCheck531,28926
#define  NA_ComplexArrayCheck NA_ComplexArrayCheck533,29077
#define  NA_elements NA_elements535,29232
#define  NA_typeObjectToTypeNo NA_typeObjectToTypeNo537,29408
#define  NA_copyArray NA_copyArray539,29564
#define  NA_copy NA_copy541,29781
#define  NA_getType NA_getType543,29955
#define  NA_callCUFuncCore NA_callCUFuncCore545,30144
#define  NA_callStrideConvCFuncCore NA_callStrideConvCFuncCore547,30476
#define  NA_stridesFromShape NA_stridesFromShape549,31057
#define  NA_OperatorCheck NA_OperatorCheck551,31335
#define  NA_ConverterCheck NA_ConverterCheck553,31494
#define  NA_UfuncCheck NA_UfuncCheck555,31654
#define  NA_CfuncCheck NA_CfuncCheck557,31810
#define  NA_getByteOffset NA_getByteOffset559,31966
#define  NA_swapAxes NA_swapAxes561,32236
#define  NA_initModuleGlobal NA_initModuleGlobal563,32433
#define  NA_NumarrayType NA_NumarrayType565,32636
#define  NA_NewAllFromBuffer NA_NewAllFromBuffer567,32813
#define  NA_alloc1D_Float64 NA_alloc1D_Float64569,33286
#define  NA_alloc1D_Int64 NA_alloc1D_Int64571,33510
#define  NA_updateAlignment NA_updateAlignment573,33728
#define  NA_updateContiguous NA_updateContiguous575,33904
#define  NA_updateStatus NA_updateStatus577,34081
#define  NA_NumArrayCheckExact NA_NumArrayCheckExact579,34254
#define  NA_NDArrayCheckExact NA_NDArrayCheckExact581,34417
#define  NA_OperatorCheckExact NA_OperatorCheckExact583,34579
#define  NA_ConverterCheckExact NA_ConverterCheckExact585,34742
#define  NA_UfuncCheckExact NA_UfuncCheckExact587,34906
#define  NA_CfuncCheckExact NA_CfuncCheckExact589,35066
#define  NA_getArrayData NA_getArrayData591,35226
#define  NA_updateByteswap NA_updateByteswap593,35399
#define  NA_DescrFromType NA_DescrFromType595,35570
#define  NA_Cast NA_Cast597,35744
#define  NA_checkFPErrors NA_checkFPErrors599,35935
#define  NA_clearFPErrors NA_clearFPErrors601,36077
#define  NA_checkAndReportFPErrors NA_checkAndReportFPErrors603,36221
#define  NA_IeeeMask32 NA_IeeeMask32605,36384
#define  NA_IeeeMask64 NA_IeeeMask64607,36543
#define  _NA_callStridingHelper _NA_callStridingHelper609,36702
#define  NA_FromDimsStridesDescrAndData NA_FromDimsStridesDescrAndData611,37046
#define  NA_FromDimsTypeAndData NA_FromDimsTypeAndData613,37372
#define  NA_FromDimsStridesTypeAndData NA_FromDimsStridesTypeAndData615,37626
#define  NA_scipy_typestr NA_scipy_typestr617,37927
#define  NA_FromArrayStruct NA_FromArrayStruct619,38149
#define libnumarray_API_pointers libnumarray_API_pointers624,38378

numpy/numarray/include/numpy/numcomplex.h,2354
typedef struct { Float32 a, theta; } PolarComplex32;a7,137
typedef struct { Float32 a, theta; } PolarComplex32;theta7,137
typedef struct { Float32 a, theta; } PolarComplex32;PolarComplex327,137
typedef struct { Float64 a, theta; } PolarComplex64;a8,190
typedef struct { Float64 a, theta; } PolarComplex64;theta8,190
typedef struct { Float64 a, theta; } PolarComplex64;PolarComplex648,190
#define NUM_SQ(NUM_SQ10,244
#define NUM_CABSSQ(NUM_CABSSQ12,281
#define NUM_CABS(NUM_CABS14,340
#define NUM_C_TO_P(NUM_C_TO_P16,387
#define NUM_P_TO_C(NUM_P_TO_C19,527
#define NUM_CASS(NUM_CASS22,664
#define NUM_CADD(NUM_CADD24,720
#define NUM_CSUB(NUM_CSUB27,849
#define NUM_CMUL(NUM_CMUL30,978
#define NUM_CDIV(NUM_CDIV37,1391
#define NUM_CREM(NUM_CREM52,2412
#define NUM_CMINUS(NUM_CMINUS61,2985
#define NUM_CNEG NUM_CNEG62,3043
#define NUM_CEQ(NUM_CEQ64,3072
#define NUM_CNE(NUM_CNE65,3134
#define NUM_CLT(NUM_CLT66,3196
#define NUM_CGT(NUM_CGT67,3235
#define NUM_CLE(NUM_CLE68,3274
#define NUM_CGE(NUM_CGE69,3314
#define NUM_CEXP(NUM_CEXP74,3461
#define NUM_CLOG(NUM_CLOG86,3933
#define NUM_LOG10_E NUM_LOG10_E92,4258
#define NUM_CLOG10(NUM_CLOG1094,4300
#define NUM_CPOW(NUM_CPOW101,4643
#define NUM_CSQRT(NUM_CSQRT114,5536
#define NUM_CSQR(NUM_CSQR118,5725
#define NUM_CSIN(NUM_CSIN122,5914
#define NUM_CCOS(NUM_CCOS128,6260
#define NUM_CTAN(NUM_CTAN134,6606
#define NUM_CSINH(NUM_CSINH140,6952
#define NUM_CCOSH(NUM_CCOSH146,7298
#define NUM_CTANH(NUM_CTANH152,7644
#define NUM_CRPOW(NUM_CRPOW158,7990
#define NUM_CRMUL(NUM_CRMUL162,8180
#define NUM_CIMUL(NUM_CIMUL164,8247
#define NUM_CASIN(NUM_CASIN169,8485
#define NUM_CACOS(NUM_CACOS182,9338
#define NUM_CATAN(NUM_CATAN195,10190
#define NUM_CASINH(NUM_CASINH206,10927
#define NUM_CACOSH(NUM_CACOSH215,11480
#define NUM_CATANH(NUM_CATANH224,12031
#define NUM_CMIN(NUM_CMIN234,12619
#define NUM_CMAX(NUM_CMAX235,12666
#define NUM_CNZ(NUM_CNZ237,12714
#define NUM_CLAND(NUM_CLAND238,12769
#define NUM_CLOR(NUM_CLOR239,12819
#define NUM_CLXOR(NUM_CLXOR240,12870
#define NUM_CLNOT(NUM_CLNOT241,12920
#define NUM_CFLOOR(NUM_CFLOOR243,12959
#define NUM_CCEIL(NUM_CCEIL244,13028
#define NUM_CFABS(NUM_CFABS246,13095
#define NUM_CROUND(NUM_CROUND247,13163
#define NUM_CHYPOT(NUM_CHYPOT248,13240

numpy/numarray/include/numpy/nummacro.h,6107
#define _ndarraymacro_ndarraymacro4,83
#define PY_BOOL_CHAR PY_BOOL_CHAR10,226
#define PY_INT8_CHAR PY_INT8_CHAR11,251
#define PY_INT16_CHAR PY_INT16_CHAR12,276
#define PY_INT32_CHAR PY_INT32_CHAR13,302
#define PY_FLOAT32_CHAR PY_FLOAT32_CHAR14,328
#define PY_FLOAT64_CHAR PY_FLOAT64_CHAR15,356
#define PY_UINT8_CHAR PY_UINT8_CHAR16,384
#define PY_UINT16_CHAR PY_UINT16_CHAR17,410
#define PY_UINT32_CHAR PY_UINT32_CHAR18,437
#define PY_COMPLEX64_CHAR PY_COMPLEX64_CHAR19,498
#define PY_COMPLEX128_CHAR PY_COMPLEX128_CHAR20,528
#define PY_LONG_CHAR PY_LONG_CHAR22,560
#define PY_LONG_LONG_CHAR PY_LONG_LONG_CHAR23,585
#define pyFPE_DIVIDE_BY_ZERO pyFPE_DIVIDE_BY_ZERO25,616
#define pyFPE_OVERFLOW pyFPE_OVERFLOW26,648
#define pyFPE_UNDERFLOW pyFPE_UNDERFLOW27,680
#define pyFPE_INVALID pyFPE_INVALID28,712
#define isNonZERO(isNonZERO30,745
	NUM_CONTIGUOUS=1,NUM_CONTIGUOUS34,837
	NUM_NOTSWAPPED=0x0200,NUM_NOTSWAPPED35,856
	NUM_ALIGNED=0x0100,NUM_ALIGNED36,880
	NUM_WRITABLE=0x0400,NUM_WRITABLE37,901
	NUM_COPY=0x0020,NUM_COPY38,923
	NUM_C_ARRAY  = (NUM_CONTIGUOUS | NUM_ALIGNED | NUM_NOTSWAPPED),NUM_C_ARRAY40,942
	NUM_UNCONVERTED = 0NUM_UNCONVERTED41,1007
} NumRequirements;NumRequirements42,1028
#define UNCONVERTED UNCONVERTED44,1048
#define C_ARRAY C_ARRAY45,1070
#define MUST_BE_COMPUTED MUST_BE_COMPUTED47,1139
#define NUM_FLOORDIVIDE(NUM_FLOORDIVIDE49,1170
#define NA_Begin(NA_Begin51,1227
#define NA_End(NA_End52,1285
#define NA_OFFSETDATA(NA_OFFSETDATA54,1331
#define NA_COPY1(NA_COPY157,1422
#define NA_COPY2(NA_COPY258,1460
#define NA_COPY4(NA_COPY459,1519
#define NA_COPY8(NA_COPY860,1578
#define NA_COPY16(NA_COPY1661,1637
#define NA_SWAP1(NA_SWAP164,1743
#define NA_SWAP2(NA_SWAP265,1782
#define NA_SWAP4(NA_SWAP466,1841
#define NA_SWAP8(NA_SWAP867,1900
#define NA_SWAP16(NA_SWAP1668,1959
#define NA_COMPLEX_SWAP8(NA_COMPLEX_SWAP871,2090
#define NA_COMPLEX_SWAP16(NA_COMPLEX_SWAP1672,2157
#define NA_TSWAP1(NA_TSWAP175,2279
#define NA_TSWAP2(NA_TSWAP276,2337
#define NA_TSWAP4(NA_TSWAP477,2395
#define NA_TSWAP8(NA_TSWAP878,2453
#define NA_ACOPY1(NA_ACOPY181,2561
#define NA_ACOPY2(NA_ACOPY282,2627
#define NA_ACOPY4(NA_ACOPY483,2693
#define NA_ACOPY8(NA_ACOPY884,2759
#define NA_ACOPY16(NA_ACOPY1685,2825
#define NA_PTR(NA_PTR89,2943
#define NA_PTR1(NA_PTR190,2995
#define NA_PTR2(NA_PTR292,3126
#define NA_PTR3(NA_PTR395,3336
#define NA_SET_TEMP(NA_SET_TEMP100,3626
#define NA_SWAPComplex64 NA_SWAPComplex64102,3690
#define NA_SWAPComplex32 NA_SWAPComplex32103,3733
#define NA_SWAPFloat64 NA_SWAPFloat64104,3775
#define NA_SWAPFloat32 NA_SWAPFloat32105,3809
#define NA_SWAPInt64 NA_SWAPInt64106,3843
#define NA_SWAPUInt64 NA_SWAPUInt64107,3877
#define NA_SWAPInt32 NA_SWAPInt32108,3911
#define NA_SWAPUInt32 NA_SWAPUInt32109,3945
#define NA_SWAPInt16 NA_SWAPInt16110,3979
#define NA_SWAPUInt16 NA_SWAPUInt16111,4013
#define NA_SWAPInt8 NA_SWAPInt8112,4047
#define NA_SWAPUInt8 NA_SWAPUInt8113,4081
#define NA_SWAPBool NA_SWAPBool114,4115
#define NA_COPYComplex64 NA_COPYComplex64116,4150
#define NA_COPYComplex32 NA_COPYComplex32117,4185
#define NA_COPYFloat64 NA_COPYFloat64118,4219
#define NA_COPYFloat32 NA_COPYFloat32119,4253
#define NA_COPYInt64 NA_COPYInt64120,4287
#define NA_COPYUInt64 NA_COPYUInt64121,4321
#define NA_COPYInt32 NA_COPYInt32122,4355
#define NA_COPYUInt32 NA_COPYUInt32123,4389
#define NA_COPYInt16 NA_COPYInt16124,4423
#define NA_COPYUInt16 NA_COPYUInt16125,4457
#define NA_COPYInt8 NA_COPYInt8126,4491
#define NA_COPYUInt8 NA_COPYUInt8127,4525
#define NA_COPYBool NA_COPYBool128,4559
#define _makeGetPb(_makeGetPb134,4634
#define _makeGetPa(_makeGetPa142,4790
#undef _makeGetPb_makeGetPb178,5463
#undef _makeGetPa_makeGetPa179,5481
#define _makeSetPb(_makeSetPb181,5500
#define _makeSetPa(_makeSetPa188,5642
#undef _makeSetPb_makeSetPb223,6279
#undef _makeSetPa_makeSetPa224,6297
#define NA_GETPb(NA_GETPb233,6444
#define NA_GETPa(NA_GETPa236,6514
#define NA_GETPf(NA_GETPf239,6604
#define NA_GETP(NA_GETP241,6657
#define NA_SETPb(NA_SETPb250,7116
#define NA_SETPa(NA_SETPa253,7192
#define NA_SETPf(NA_SETPf256,7288
#define NA_SETP(NA_SETP258,7350
#define NA_GET1b(NA_GET1b269,7964
#define NA_GET1a(NA_GET1a271,8047
#define NA_GET1f(NA_GET1f273,8150
#define NA_GET1(NA_GET1275,8232
#define NA_SET1b(NA_SET1b278,8319
#define NA_SET1a(NA_SET1a280,8405
#define NA_SET1f(NA_SET1f282,8511
#define NA_SET1(NA_SET1284,8596
#define NA_GET2b(NA_GET2b289,8767
#define NA_GET2a(NA_GET2a291,8856
#define NA_GET2f(NA_GET2f293,8965
#define NA_GET2(NA_GET2295,9053
#define NA_SET2b(NA_SET2b298,9146
#define NA_SET2a(NA_SET2a300,9238
#define NA_SET2f(NA_SET2f302,9350
#define NA_SET2(NA_SET2304,9428
#define NA_GET3b(NA_GET3b309,9606
#define NA_GET3a(NA_GET3a311,9701
#define NA_GET3f(NA_GET3f313,9816
#define NA_GET3(NA_GET3315,9910
#define NA_SET3b(NA_SET3b318,10009
#define NA_SET3a(NA_SET3a321,10156
#define NA_SET3f(NA_SET3f324,10323
#define NA_SET3(NA_SET3326,10455
#define NA_GET1Db(NA_GET1Db331,10668
#define NA_GET1Da(NA_GET1Da339,11160
#define NA_GET1Df(NA_GET1Df347,11652
#define NA_GET1D(NA_GET1D355,12144
#define NA_SET1Db(NA_SET1Db364,12709
#define NA_SET1Da(NA_SET1Da372,13200
#define NA_SET1Df(NA_SET1Df380,13691
#define NA_SET1D(NA_SET1D388,14182
#define MIN(MIN400,14844
#define MAX(MAX404,14912
#define ABS(ABS408,14980
#define ELEM(ELEM411,15029
#define BOOLEAN_BITWISE_NOT(BOOLEAN_BITWISE_NOT413,15072
#define NA_NBYTES(NA_NBYTES415,15114
#define BEGIN_THREADS BEGIN_THREADS418,15192
#define END_THREADS END_THREADS419,15237
#define BEGIN_THREADSBEGIN_THREADS421,15284
#define END_THREADSEND_THREADS422,15306
#define U32(U32427,15358
#define U64(U64428,15393
#define NA_isnan32(NA_isnan32430,15429
#define NA_isnan64(NA_isnan64434,15560
#define NA_isnan64(NA_isnan64437,15703
#define NA_isnanC32(NA_isnanC32441,15851
#define NA_isnanC64(NA_isnanC64442,15949

numpy/numarray/_capi.c,13518
#define _libnumarray_MODULE_libnumarray_MODULE3,21
static PyObject *pCfuncClass;pCfuncClass19,459
static PyTypeObject CfuncType;CfuncType20,489
static PyObject *pHandleErrorFunc;pHandleErrorFunc21,520
deferred_libnumarray_init(void)deferred_libnumarray_init24,567
getBuffer( PyObject *obj)getBuffer55,1203
isBuffer (PyObject *obj)isBuffer74,1966
getWriteBufferDataPtr(PyObject *buffobj, void **buff)getWriteBufferDataPtr90,2281
isBufferWriteable (PyObject *buffobj)isBufferWriteable114,2927
getReadBufferDataPtr(PyObject *buffobj, void **buff)getReadBufferDataPtr127,3263
getBufferSize(PyObject *buffobj)getBufferSize150,3902
static double numarray_zero = 0.0;numarray_zero172,4385
static double raiseDivByZero(void)raiseDivByZero174,4421
static double raiseNegDivByZero(void)raiseNegDivByZero179,4491
static double num_log(double x)num_log184,4565
static double num_log10(double x)num_log10192,4688
static double num_pow(double x, double y)num_pow200,4815
static double num_acosh(double x)num_acosh210,5035
static double num_asinh(double xx)num_asinh215,5117
static double num_atanh(double x)num_atanh230,5338
static double num_round(double x)num_round236,5470
static int int_dividebyzero_error(long NPY_UNUSED(value), long NPY_UNUSED(unused)) {int_dividebyzero_error250,5990
static int int_overflow_error(Float64 value) { /* For x86_64 */int_overflow_error261,6429
static int int_overflow_error(Float64 value) {int_overflow_error266,6557
static int umult64_overflow(UInt64 a, UInt64 b)umult64_overflow276,6796
static int smult64_overflow(Int64 a0, Int64 b0)smult64_overflow296,7243
NA_Done(void)NA_Done329,7890
NA_NewAll(int ndim, maybelong *shape, NumarrayType type,NA_NewAll335,7944
NA_NewAllStrides(int ndim, maybelong *shape, maybelong *strides,NA_NewAllStrides360,8740
NA_New(void *buffer, NumarrayType type, int ndim, ...)NA_New375,9181
NA_Empty(int ndim, maybelong *shape, NumarrayType type)NA_Empty389,9511
NA_vNewArray(void *buffer, NumarrayType type, int ndim, maybelong *shape)NA_vNewArray401,9864
NA_NewArray(void *buffer, NumarrayType type, int ndim, ...)NA_NewArray408,10073
NA_ReturnOutput(PyObject *out, PyArrayObject *shadow)NA_ReturnOutput422,10401
static long NA_getBufferPtrAndSize(PyObject *buffobj, int readonly, void **ptr)NA_getBufferPtrAndSize438,10854
static int NA_checkIo(char *name,NA_checkIo449,11102
static int NA_checkOneCBuffer(char *name, long niter,NA_checkOneCBuffer467,11596
static int NA_checkNCBuffers(char *name, int N, long niter,NA_checkNCBuffers488,12229
static int NA_checkOneStriding(char *name, long dim, maybelong *shape,NA_checkOneStriding500,12566
NA_callCUFuncCore(PyObject *self,NA_callCUFuncCore565,14888
callCUFunc(PyObject *self, PyObject *args) {callCUFunc621,16940
callStrideConvCFunc(PyObject *self, PyObject *args) {callStrideConvCFunc651,18128
_NA_callStridingHelper(PyObject *aux, long dim,_NA_callStridingHelper700,19949
callStridingCFunc(PyObject *self, PyObject *args) {callStridingCFunc722,20606
NumTypeAsPyValue(PyObject *self, PyObject *args) {NumTypeAsPyValue783,22495
NumTypeFromPyValue(PyObject *self, PyObject *args) {NumTypeFromPyValue845,24643
cfunc_call(PyObject *self, PyObject *argsTuple, PyObject *NPY_UNUSED(argsDict))cfunc_call901,26699
static PyTypeObject CfuncType;CfuncType926,27475
cfunc_dealloc(PyObject* self)cfunc_dealloc929,27519
cfunc_repr(PyObject *self)cfunc_repr935,27596
static PyTypeObject CfuncType = {CfuncType946,27965
NA_new_cfunc(CfuncDescriptor *cfd)NA_new_cfunc1007,31340
static int NA_add_cfunc(PyObject *dict, char *keystr, CfuncDescriptor *descr)NA_add_cfunc1028,31786
NA_InputArray(PyObject *a, NumarrayType t, int requires)NA_InputArray1036,32016
satisfies(PyArrayObject *a, int requirements, NumarrayType t)satisfies1049,32418
NA_OutputArray(PyObject *a, NumarrayType t, int requires)NA_OutputArray1070,33032
NA_IoArray(PyObject *a, NumarrayType t, int requires)NA_IoArray1111,34167
NA_OptionalOutputArray(PyObject *optional, NumarrayType t, int requires,NA_OptionalOutputArray1137,35067
Complex64 NA_get_Complex64(PyArrayObject *a, long offset)NA_get_Complex641153,35583
void NA_set_Complex64(PyArrayObject *a, long offset, Complex64 v)NA_set_Complex641175,36044
Int64 NA_get_Int64(PyArrayObject *a, long offset)NA_get_Int641194,36462
void NA_set_Int64(PyArrayObject *a, long offset, Int64 v)NA_set_Int641232,37706
long NA_get_offset(PyArrayObject *a, int N, ...)NA_get_offset1284,39702
Float64 NA_get_Float64(PyArrayObject *a, long offset)NA_get_Float641302,40170
void NA_set_Float64(PyArrayObject *a, long offset, Float64 v)NA_set_Float641341,41485
Float64 NA_get1_Float64(PyArrayObject *a, long i)NA_get1_Float641393,43333
Float64 NA_get2_Float64(PyArrayObject *a, long i, long j)NA_get2_Float641399,43463
Float64 NA_get3_Float64(PyArrayObject *a, long i, long j, long k)NA_get3_Float641406,43630
void NA_set1_Float64(PyArrayObject *a, long i, Float64 v)NA_set1_Float641414,43833
void NA_set2_Float64(PyArrayObject *a, long i, long j, Float64 v)NA_set2_Float641420,43967
void NA_set3_Float64(PyArrayObject *a, long i, long j, long k, Float64 v)NA_set3_Float641427,44138
Complex64 NA_get1_Complex64(PyArrayObject *a, long i)NA_get1_Complex641435,44345
Complex64 NA_get2_Complex64(PyArrayObject *a, long i, long j)NA_get2_Complex641441,44481
Complex64 NA_get3_Complex64(PyArrayObject *a, long i, long j, long k)NA_get3_Complex641448,44654
void NA_set1_Complex64(PyArrayObject *a, long i, Complex64 v)NA_set1_Complex641456,44863
void NA_set2_Complex64(PyArrayObject *a, long i, long j, Complex64 v)NA_set2_Complex641462,45003
void NA_set3_Complex64(PyArrayObject *a, long i, long j, long k, Complex64 v)NA_set3_Complex641469,45180
Int64 NA_get1_Int64(PyArrayObject *a, long i)NA_get1_Int641477,45393
Int64 NA_get2_Int64(PyArrayObject *a, long i, long j)NA_get2_Int641483,45517
Int64 NA_get3_Int64(PyArrayObject *a, long i, long j, long k)NA_get3_Int641490,45678
void NA_set1_Int64(PyArrayObject *a, long i, Int64 v)NA_set1_Int641498,45875
void NA_set2_Int64(PyArrayObject *a, long i, long j, Int64 v)NA_set2_Int641504,46003
void NA_set3_Int64(PyArrayObject *a, long i, long j, long k, Int64 v)NA_set3_Int641511,46168
#define NA_SET_CMPLX(NA_SET_CMPLX1521,46445
NA_get1D_Float64(PyArrayObject *a, long offset, int cnt, Float64*out)NA_get1D_Float641534,47219
NA_alloc1D_Float64(PyArrayObject *a, long offset, int cnt)NA_alloc1D_Float641591,48620
NA_set1D_Float64(PyArrayObject *a, long offset, int cnt, Float64*in)NA_set1D_Float641603,48910
NA_get1D_Int64(PyArrayObject *a, long offset, int cnt, Int64*out)NA_get1D_Int641660,50299
NA_alloc1D_Int64(PyArrayObject *a, long offset, int cnt)NA_alloc1D_Int641715,51670
NA_set1D_Int64(PyArrayObject *a, long offset, int cnt, Int64*in)NA_set1D_Int641727,51952
NA_get1D_Complex64(PyArrayObject *a, long offset, int cnt, Complex64*out)NA_get1D_Complex641782,53313
NA_set1D_Complex64(PyArrayObject *a, long offset, int cnt, Complex64*in)NA_set1D_Complex641801,53770
NA_ShapeEqual(PyArrayObject *a, PyArrayObject *b)NA_ShapeEqual1823,54305
NA_ShapeLessThan(PyArrayObject *a, PyArrayObject *b)NA_ShapeLessThan1847,54961
NA_ByteOrder(void)NA_ByteOrder1867,55497
NA_IeeeSpecial32( Float32 *f, Int32 *mask)NA_IeeeSpecial321878,55702
NA_IeeeSpecial64( Float64 *f, Int32 *mask)NA_IeeeSpecial641884,55799
NA_updateDataPtr(PyArrayObject *me)NA_updateDataPtr1890,55907
#define ELEM(ELEM1896,55964
    char *name;name1900,56023
    int typeno;typeno1901,56039
} NumarrayTypeNameMapping;NumarrayTypeNameMapping1902,56055
static NumarrayTypeNameMapping NumarrayTypeNameMap[] = {NumarrayTypeNameMap1904,56083
NA_typeNoToName(int typeno)NA_typeNoToName1926,56621
NA_nameToTypeNo(char *typename)NA_nameToTypeNo1948,57147
getTypeObject(NumarrayType type)getTypeObject1958,57388
NA_typeNoToTypeObject(int typeno)NA_typeNoToTypeObject1965,57497
NA_intTupleFromMaybeLongs(int len, maybelong *Longs)NA_intTupleFromMaybeLongs1975,57642
NA_maybeLongsFromIntTuple(int len, maybelong *arr, PyObject *sequence)NA_maybeLongsFromIntTuple1981,57761
NA_intTupleProduct(PyObject  *shape, long *prod)NA_intTupleProduct1988,57906
NA_isIntegerSequence(PyObject *sequence)NA_isIntegerSequence2018,58697
getShape(PyObject *a, maybelong *shape, int dims)getShape2048,59311
    NOTHING,NOTHING2092,60440
    NUMBER,NUMBER2093,60453
    SEQUENCESEQUENCE2094,60465
} SequenceConstraint;SequenceConstraint2095,60478
setArrayFromSequence(PyArrayObject *a, PyObject *s, int dim, long offset)setArrayFromSequence2098,60512
NA_setArrayFromSequence(PyArrayObject *a, PyObject *s)NA_setArrayFromSequence2159,62691
    BOOL_SCALAR,BOOL_SCALAR2181,63154
    INT_SCALAR,INT_SCALAR2182,63171
    LONG_SCALAR,LONG_SCALAR2183,63187
    FLOAT_SCALAR,FLOAT_SCALAR2184,63204
    COMPLEX_SCALARCOMPLEX_SCALAR2185,63222
_NA_maxType(PyObject *seq, int limit)_NA_maxType2190,63257
NA_maxType(PyObject *seq)NA_maxType2266,65404
NA_isPythonScalar(PyObject *o)NA_isPythonScalar2274,65509
#define PlatBigInt PlatBigInt2286,65774
#define PlatBigUInt PlatBigUInt2287,65808
#define PlatBigInt PlatBigInt2289,65858
#define PlatBigUInt PlatBigUInt2290,65897
NA_getPythonScalar(PyArrayObject *a, long offset)NA_getPythonScalar2295,65972
NA_overflow(PyArrayObject *a, Float64 v)NA_overflow2348,67523
_setFromPythonScalarCore(PyArrayObject *a, long offset, PyObject*value, int entries)_setFromPythonScalarCore2407,69096
NA_setFromPythonScalar(PyArrayObject *a, long offset, PyObject *value)NA_setFromPythonScalar2479,71598
NA_NDArrayCheck(PyObject *obj) {NA_NDArrayCheck2492,71932
NA_NumArrayCheck(PyObject *obj) {NA_NumArrayCheck2497,72010
NA_ComplexArrayCheck(PyObject *a)NA_ComplexArrayCheck2502,72089
NA_elements(PyArrayObject  *a)NA_elements2518,72430
NA_typeObjectToTypeNo(PyObject *typeObj)NA_typeObjectToTypeNo2528,72587
NA_copyArray(PyArrayObject *to, const PyArrayObject *from)NA_copyArray2538,72790
NA_copy(PyArrayObject *from)NA_copy2544,72933
NA_getType( PyObject *type)NA_getType2551,73040
NA_callStrideConvCFuncCore(NA_callStrideConvCFuncCore2607,75109
NA_stridesFromShape(int nshape, maybelong *shape, maybelong bytestride,NA_stridesFromShape2678,77675
NA_OperatorCheck(PyObject *NPY_UNUSED(op)) {NPY_UNUSED2691,77984
NA_ConverterCheck(PyObject *NPY_UNUSED(op)) {NPY_UNUSED2696,78057
NA_UfuncCheck(PyObject *NPY_UNUSED(op)) {NPY_UNUSED2701,78131
NA_CfuncCheck(PyObject *op) {NA_CfuncCheck2706,78201
        maybelong *NPY_UNUSED(indices), long *NPY_UNUSED(offset))NPY_UNUSED2712,78369
NA_swapAxes(PyArrayObject *array, int x, int y)NA_swapAxes2718,78465
NA_initModuleGlobal(char *modulename, char *globalname)NA_initModuleGlobal2750,79186
NA_NumarrayType(PyObject *seq)NA_NumarrayType2775,79863
NA_NewAllFromBuffer(int ndim, maybelong *shape, NumarrayType type,NA_NewAllFromBuffer2805,80570
NA_updateAlignment(PyArrayObject *self)NA_updateAlignment2858,82074
NA_updateContiguous(PyArrayObject *self)NA_updateContiguous2864,82175
NA_updateStatus(PyArrayObject *self)NA_updateStatus2871,82295
NA_NumArrayCheckExact(PyObject *op) {NA_NumArrayCheckExact2877,82395
NA_NDArrayCheckExact(PyObject *op) {NA_NDArrayCheckExact2882,82490
NA_OperatorCheckExact(PyObject *NPY_UNUSED(op)) {NPY_UNUSED2887,82584
NA_ConverterCheckExact(PyObject *NPY_UNUSED(op)) {NPY_UNUSED2892,82662
NA_UfuncCheckExact(PyObject *NPY_UNUSED(op)) {NPY_UNUSED2897,82741
NA_CfuncCheckExact(PyObject *op) {NA_CfuncCheckExact2903,82817
NA_getArrayData(PyArrayObject *obj)NA_getArrayData2908,82907
NA_updateByteswap(PyArrayObject *NPY_UNUSED(self))NPY_UNUSED2919,83190
NA_DescrFromType(int type)NA_DescrFromType2925,83281
NA_Cast(PyArrayObject *a, int type)NA_Cast2933,83418
NA_checkFPErrors(void)NA_checkFPErrors2948,83772
NA_checkFPErrors(void)NA_checkFPErrors2973,84509
NA_checkFPErrors(void)NA_checkFPErrors2993,85101
NA_checkFPErrors(void)NA_checkFPErrors3011,85673
NA_checkFPErrors(void)NA_checkFPErrors3028,86230
NA_clearFPErrors()NA_clearFPErrors3036,86292
NA_checkAndReportFPErrors(char *name)NA_checkAndReportFPErrors3043,86375
#define WITHIN32(WITHIN323060,86743
#define WITHIN64(WITHIN643061,86809
NA_IeeeMask32( Float32 f, Int32 mask)NA_IeeeMask323064,86888
NA_IeeeMask64( Float64 f, Int32 mask)NA_IeeeMask643108,88276
NA_FromDimsStridesDescrAndData(int nd, maybelong *d, maybelong *s, PyArray_Descr *descr, char *data)NA_FromDimsStridesDescrAndData3152,89675
NA_FromDimsTypeAndData(int nd, maybelong *d, int type, char *data)NA_FromDimsTypeAndData3160,89927
NA_FromDimsStridesTypeAndData(int nd, maybelong *shape, maybelong *strides,NA_FromDimsStridesTypeAndData3167,90142
    NumarrayType type_num;type_num3177,90398
    char suffix[5];suffix3178,90425
    int  itemsize;itemsize3179,90445
} scipy_typestr;scipy_typestr3180,90464
static scipy_typestr scipy_descriptors[ ] = {scipy_descriptors3182,90482
NA_scipy_typestr(NumarrayType t, int byteorder, char *typestr)NA_scipy_typestr3208,90942
NA_FromArrayStruct(PyObject *obj)NA_FromArrayStruct3226,91364
static PyObject *_Error;_Error3232,91466
void *libnumarray_API[] = {libnumarray_API3234,91492
static PyMethodDef _libnumarrayMethods[] = {_libnumarrayMethods3369,95440
#define RETVAL RETVAL3377,95606
static struct PyModuleDef moduledef = {moduledef3379,95624
PyObject *PyInit___capi(void)PyInit___capi3391,95826

numpy/random/mtrand/distributions.c,3432
#define min(min49,2253
#define max(max50,2282
#define M_PI M_PI54,2332
double loggam(double x)loggam61,2638
double rk_normal(rk_state *state, double loc, double scale)rk_normal102,3518
double rk_standard_exponential(rk_state *state)rk_standard_exponential107,3623
double rk_exponential(rk_state *state, double scale)rk_exponential113,3762
double rk_uniform(rk_state *state, double loc, double scale)rk_uniform118,3871
double rk_standard_gamma(rk_state *state, double shape)rk_standard_gamma123,3978
double rk_gamma(rk_state *state, double shape, double scale)rk_gamma177,5183
double rk_beta(rk_state *state, double a, double b)rk_beta182,5301
double rk_chisquare(rk_state *state, double df)rk_chisquare212,5886
double rk_noncentral_chisquare(rk_state *state, double df, double nonc)rk_noncentral_chisquare217,5988
double rk_f(rk_state *state, double dfnum, double dfden)rk_f226,6185
double rk_noncentral_f(rk_state *state, double dfnum, double dfden, double nonc)rk_noncentral_f232,6350
long rk_binomial_btpe(rk_state *state, long n, double p)rk_binomial_btpe238,6551
long rk_binomial_inversion(rk_state *state, long n, double p)rk_binomial_inversion378,9778
long rk_binomial(rk_state *state, long n, double p)rk_binomial421,10679
long rk_negative_binomial(rk_state *state, double n, double p)rk_negative_binomial451,11196
long rk_poisson_mult(rk_state *state, double lam)rk_poisson_mult459,11349
#define LS2PI LS2PI482,11690
#define TWELFTH TWELFTH483,11724
long rk_poisson_ptrs(rk_state *state, double lam)rk_poisson_ptrs484,11767
long rk_poisson(rk_state *state, double lam)rk_poisson522,12580
double rk_standard_cauchy(rk_state *state)rk_standard_cauchy538,12825
double rk_standard_t(rk_state *state, double df)rk_standard_t543,12919
double rk_vonmises(rk_state *state, double mu, double kappa)rk_vonmises559,13408
double rk_pareto(rk_state *state, double a)rk_pareto609,14428
double rk_weibull(rk_state *state, double a)rk_weibull614,14531
double rk_power(rk_state *state, double a)rk_power619,14635
double rk_laplace(rk_state *state, double loc, double scale)rk_laplace624,14747
double rk_gumbel(rk_state *state, double loc, double scale)rk_gumbel639,15001
double rk_logistic(rk_state *state, double loc, double scale)rk_logistic647,15156
double rk_lognormal(rk_state *state, double mean, double sigma)rk_lognormal655,15311
double rk_rayleigh(rk_state *state, double mode)rk_rayleigh660,15427
double rk_wald(rk_state *state, double mean, double scale)rk_wald665,15539
long rk_zipf(rk_state *state, double a)rk_zipf684,15898
long rk_geometric_search(rk_state *state, double p)rk_geometric_search708,16625
long rk_geometric_inversion(rk_state *state, double p)rk_geometric_inversion727,16911
long rk_geometric(rk_state *state, double p)rk_geometric732,17032
long rk_hypergeometric_hyp(rk_state *state, long good, long bad, long sample)rk_hypergeometric_hyp743,17247
#define D1 D1767,17739
#define D2 D2768,17769
long rk_hypergeometric_hrua(rk_state *state, long good, long bad, long sample)rk_hypergeometric_hrua769,17799
#undef D1D1821,19405
#undef D2D2822,19415
long rk_hypergeometric(rk_state *state, long good, long bad, long sample)rk_hypergeometric824,19426
double rk_triangular(rk_state *state, double left, double mode, double right)rk_triangular835,19684
long rk_logseries(rk_state *state, double p)rk_logseries856,20163

numpy/random/mtrand/distributions.h,38
#define _RK_DISTR__RK_DISTR_24,1158

numpy/random/mtrand/initarray.c,172
init_genrand(rk_state *self, unsigned long s)init_genrand81,3255
init_by_array(rk_state *self, unsigned long init_key[], unsigned long key_length)init_by_array107,4017

numpy/random/mtrand/initarray.h,0

numpy/random/mtrand/mtrand.c,168818
#define PY_SSIZE_T_CLEANPY_SSIZE_T_CLEAN3,60
  #define PY_LONG_LONG PY_LONG_LONG10,282
  #define DL_EXPORT(DL_EXPORT13,340
  #define METH_COEXIST METH_COEXIST16,404
  #define PyDict_CheckExact(PyDict_CheckExact17,429
  #define PyDict_Contains(PyDict_Contains18,491
  typedef int Py_ssize_t;Py_ssize_t21,588
  #define PY_SSIZE_T_MAX PY_SSIZE_T_MAX22,614
  #define PY_SSIZE_T_MIN PY_SSIZE_T_MIN23,647
  #define PY_FORMAT_SIZE_T PY_FORMAT_SIZE_T24,680
  #define PyInt_FromSsize_t(PyInt_FromSsize_t25,710
  #define PyInt_AsSsize_t(PyInt_AsSsize_t26,759
  #define PyNumber_Index(PyNumber_Index27,806
  #define PyIndex_Check(PyIndex_Check28,853
  #define Py_REFCNT(Py_REFCNT31,941
  #define Py_TYPE(Py_TYPE32,996
  #define Py_SIZE(Py_SIZE33,1049
  #define PyVarObject_HEAD_INIT(PyVarObject_HEAD_INIT34,1105
  #define PyType_Modified(PyType_Modified36,1192
       void *buf;buf39,1241
       PyObject *obj;obj40,1259
       Py_ssize_t len;len41,1281
       Py_ssize_t itemsize;itemsize42,1304
       int readonly;readonly43,1332
       int ndim;ndim44,1353
       char *format;format45,1370
       Py_ssize_t *shape;shape46,1391
       Py_ssize_t *strides;strides47,1417
       Py_ssize_t *suboffsets;suboffsets48,1445
       void *internal;internal49,1476
  } Py_buffer;Py_buffer50,1499
  #define PyBUF_SIMPLE PyBUF_SIMPLE52,1515
  #define PyBUF_WRITABLE PyBUF_WRITABLE53,1540
  #define PyBUF_FORMAT PyBUF_FORMAT54,1572
  #define PyBUF_ND PyBUF_ND55,1602
  #define PyBUF_STRIDES PyBUF_STRIDES56,1628
  #define PyBUF_C_CONTIGUOUS PyBUF_C_CONTIGUOUS57,1672
  #define PyBUF_F_CONTIGUOUS PyBUF_F_CONTIGUOUS58,1726
  #define PyBUF_ANY_CONTIGUOUS PyBUF_ANY_CONTIGUOUS59,1780
  #define PyBUF_INDIRECT PyBUF_INDIRECT60,1836
  #define __Pyx_BUILTIN_MODULE_NAME __Pyx_BUILTIN_MODULE_NAME64,1919
  #define __Pyx_BUILTIN_MODULE_NAME __Pyx_BUILTIN_MODULE_NAME66,1975
  #define Py_TPFLAGS_CHECKTYPES Py_TPFLAGS_CHECKTYPES69,2055
  #define Py_TPFLAGS_HAVE_INDEX Py_TPFLAGS_HAVE_INDEX70,2089
  #define Py_TPFLAGS_HAVE_NEWBUFFER Py_TPFLAGS_HAVE_NEWBUFFER73,2191
  #define PyBaseString_Type PyBaseString_Type76,2262
  #define PyString_Type PyString_Type77,2316
  #define PyString_CheckExact PyString_CheckExact78,2370
  #define PyBytes_Type PyBytes_Type80,2436
  #define PyBytes_CheckExact PyBytes_CheckExact81,2489
  #define PyInt_Type PyInt_Type84,2581
  #define PyInt_Check(PyInt_Check85,2632
  #define PyInt_CheckExact(PyInt_CheckExact86,2688
  #define PyInt_FromString PyInt_FromString87,2749
  #define PyInt_FromUnicode PyInt_FromUnicode88,2806
  #define PyInt_FromLong PyInt_FromLong89,2864
  #define PyInt_FromSize_t PyInt_FromSize_t90,2919
  #define PyInt_FromSsize_t PyInt_FromSsize_t91,2976
  #define PyInt_AsLong PyInt_AsLong92,3034
  #define PyInt_AS_LONG PyInt_AS_LONG93,3087
  #define PyInt_AsSsize_t PyInt_AsSsize_t94,3141
  #define PyInt_AsUnsignedLongMask PyInt_AsUnsignedLongMask95,3197
  #define PyInt_AsUnsignedLongLongMask PyInt_AsUnsignedLongLongMask96,3262
  #define __Pyx_PyNumber_Divide(__Pyx_PyNumber_Divide97,3331
  #define __Pyx_PyNumber_InPlaceDivide(__Pyx_PyNumber_InPlaceDivide98,3401
  #define __Pyx_PyNumber_Divide(__Pyx_PyNumber_Divide100,3484
  #define __Pyx_PyNumber_InPlaceDivide(__Pyx_PyNumber_InPlaceDivide101,3550
  #define PyMethod_New(PyMethod_New104,3656
    #define __stdcall__stdcall108,3796
    #define __cdecl__cdecl111,3845
    #define __fastcall__fastcall114,3895
  #define _USE_MATH_DEFINES_USE_MATH_DEFINES117,3933
  #define __Pyx_GetAttrString(__Pyx_GetAttrString120,4000
  #define __Pyx_SetAttrString(__Pyx_SetAttrString121,4079
  #define __Pyx_DelAttrString(__Pyx_DelAttrString122,4162
  #define __Pyx_GetAttrString(__Pyx_GetAttrString124,4247
  #define __Pyx_SetAttrString(__Pyx_SetAttrString125,4316
  #define __Pyx_DelAttrString(__Pyx_DelAttrString126,4389
  #define __Pyx_NAMESTR(__Pyx_NAMESTR129,4497
  #define __Pyx_DOCSTR(__Pyx_DOCSTR130,4538
  #define __Pyx_NAMESTR(__Pyx_NAMESTR132,4585
  #define __Pyx_DOCSTR(__Pyx_DOCSTR133,4616
#define __PYX_EXTERN_C __PYX_EXTERN_C136,4673
#define __PYX_EXTERN_C __PYX_EXTERN_C138,4713
#define __PYX_HAVE_API__mtrand__PYX_HAVE_API__mtrand141,4768
#define INLINE INLINE151,4988
#define INLINE INLINE153,5027
#define INLINE INLINE155,5057
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/p158,5081
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/s158,5081
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/n158,5081
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/encoding158,5081
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/is_unicode158,5081
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/is_str158,5081
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/intern158,5081
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/__Pyx_StringTabEntry158,5081
#define __Pyx_PyBytes_FromString __Pyx_PyBytes_FromString164,5317
#define __Pyx_PyBytes_FromStringAndSize __Pyx_PyBytes_FromStringAndSize165,5379
#define __Pyx_PyBytes_AsString __Pyx_PyBytes_AsString166,5448
#define __Pyx_PyBytes_FromString __Pyx_PyBytes_FromString168,5514
#define __Pyx_PyBytes_FromStringAndSize __Pyx_PyBytes_FromStringAndSize169,5575
#define __Pyx_PyBytes_AsString __Pyx_PyBytes_AsString170,5643
#define __Pyx_PyBytes_FromUString(__Pyx_PyBytes_FromUString173,5710
#define __Pyx_PyBytes_AsUString(__Pyx_PyBytes_AsUString174,5787
#define __Pyx_PyBool_FromLong(__Pyx_PyBool_FromLong176,5875
#define T_PYSSIZET T_PYSSIZET182,6147
#define T_PYSSIZET T_PYSSIZET184,6199
#define T_PYSSIZET T_PYSSIZET188,6347
#define __Pyx_T_UNSIGNED_INT(__Pyx_T_UNSIGNED_INT197,6627
#define __Pyx_T_UNSIGNED_INT(__Pyx_T_UNSIGNED_INT203,6916
#define __Pyx_T_SIGNED_INT(__Pyx_T_SIGNED_INT211,7304
#define __Pyx_T_SIGNED_INT(__Pyx_T_SIGNED_INT217,7551
#define __Pyx_T_FLOATING(__Pyx_T_FLOATING225,7865
#define T_SIZET T_SIZET231,8053
#define T_SIZET T_SIZET235,8210
#define __pyx_PyFloat_AsDouble(__pyx_PyFloat_AsDouble246,8651
#define likely(likely252,8874
#define unlikely(unlikely253,8921
#define likely(likely255,8997
#define unlikely(unlikely256,9021
#define likely(likely259,9096
#define unlikely(unlikely260,9120
static PyObject *__pyx_m;__pyx_m263,9171
static PyObject *__pyx_b;__pyx_b264,9197
static PyObject *__pyx_empty_tuple;__pyx_empty_tuple265,9223
static PyObject *__pyx_empty_bytes;__pyx_empty_bytes266,9259
static int __pyx_lineno;__pyx_lineno267,9295
static int __pyx_clineno = 0;__pyx_clineno268,9320
static const char * __pyx_cfilenm= __FILE__;__pyx_cfilenm269,9350
static const char *__pyx_filename;__pyx_filename270,9395
static const char **__pyx_f;__pyx_f271,9430
typedef double (*__pyx_t_6mtrand_rk_cont0)(rk_state *);__pyx_t_6mtrand_rk_cont0276,9486
typedef double (*__pyx_t_6mtrand_rk_cont1)(rk_state *, double);__pyx_t_6mtrand_rk_cont1278,9543
typedef double (*__pyx_t_6mtrand_rk_cont2)(rk_state *, double, double);__pyx_t_6mtrand_rk_cont2280,9608
typedef double (*__pyx_t_6mtrand_rk_cont3)(rk_state *, double, double, double);__pyx_t_6mtrand_rk_cont3282,9681
typedef long (*__pyx_t_6mtrand_rk_disc0)(rk_state *);__pyx_t_6mtrand_rk_disc0284,9762
typedef long (*__pyx_t_6mtrand_rk_discnp)(rk_state *, long, double);__pyx_t_6mtrand_rk_discnp286,9817
typedef long (*__pyx_t_6mtrand_rk_discdd)(rk_state *, double, double);__pyx_t_6mtrand_rk_discdd288,9887
typedef long (*__pyx_t_6mtrand_rk_discnmN)(rk_state *, long, long, long);__pyx_t_6mtrand_rk_discnmN290,9959
typedef long (*__pyx_t_6mtrand_rk_discd)(rk_state *, double);__pyx_t_6mtrand_rk_discd292,10034
struct __pyx_obj_6mtrand_RandomState {__pyx_obj_6mtrand_RandomState302,10295
  rk_state *internal_state;internal_state304,10350
  #define CYTHON_REFNANNY CYTHON_REFNANNY308,10406
    void (*INCREF)(void*, PyObject*, int);INCREF313,10481
    void (*DECREF)(void*, PyObject*, int);DECREF314,10524
    void (*GOTREF)(void*, PyObject*, int);GOTREF315,10567
    void (*GIVEREF)(void*, PyObject*, int);GIVEREF316,10610
    void* (*SetupContext)(const char*, int, const char*);SetupContext317,10654
    void (*FinishContext)(void**);FinishContext318,10712
  } __Pyx_RefNannyAPIStruct;__Pyx_RefNannyAPIStruct319,10747
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;__Pyx_RefNanny320,10776
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {__Pyx_RefNannyImportAPI321,10833
  #define __Pyx_RefNannySetupContext(__Pyx_RefNannySetupContext334,11239
  #define __Pyx_RefNannyFinishContext(__Pyx_RefNannyFinishContext335,11372
  #define __Pyx_INCREF(__Pyx_INCREF336,11469
  #define __Pyx_DECREF(__Pyx_DECREF337,11561
  #define __Pyx_GOTREF(__Pyx_GOTREF338,11653
  #define __Pyx_GIVEREF(__Pyx_GIVEREF339,11745
  #define __Pyx_XDECREF(__Pyx_XDECREF340,11839
  #define __Pyx_RefNannySetupContext(__Pyx_RefNannySetupContext342,11923
  #define __Pyx_RefNannyFinishContext(__Pyx_RefNannyFinishContext343,11966
  #define __Pyx_INCREF(__Pyx_INCREF344,12006
  #define __Pyx_DECREF(__Pyx_DECREF345,12045
  #define __Pyx_GOTREF(__Pyx_GOTREF346,12084
  #define __Pyx_GIVEREF(__Pyx_GIVEREF347,12110
  #define __Pyx_XDECREF(__Pyx_XDECREF348,12137
#define __Pyx_XGIVEREF(__Pyx_XGIVEREF350,12207
#define __Pyx_XGOTREF(__Pyx_XGOTREF351,12285
static INLINE PyObject* __Pyx_Type(PyObject* o) {__Pyx_Type361,12802
static INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {__Pyx_GetItemInt_Generic368,12939
#define __Pyx_GetItemInt_List(__Pyx_GetItemInt_List377,13126
static INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i, int fits_long) {__Pyx_GetItemInt_List_Fast381,13422
#define __Pyx_GetItemInt_Tuple(__Pyx_GetItemInt_Tuple397,14005
static INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i, int fits_long) {__Pyx_GetItemInt_Tuple_Fast401,14303
#define __Pyx_GetItemInt(__Pyx_GetItemInt418,14893
static INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int fits_long) {__Pyx_GetItemInt_Fast422,15179
static INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {__Pyx_PyObject_Append455,16389
#define __Pyx_SetItemInt(__Pyx_SetItemInt471,16874
static INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {__Pyx_SetItemInt_Generic475,17169
static INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int fits_long) {__Pyx_SetItemInt_Fast483,17357
static PyTypeObject *__pyx_ptype_6mtrand_dtype = 0;__pyx_ptype_6mtrand_dtype551,19914
static PyTypeObject *__pyx_ptype_6mtrand_ndarray = 0;__pyx_ptype_6mtrand_ndarray552,19966
static PyTypeObject *__pyx_ptype_6mtrand_flatiter = 0;__pyx_ptype_6mtrand_flatiter553,20020
static PyTypeObject *__pyx_ptype_6mtrand_broadcast = 0;__pyx_ptype_6mtrand_broadcast554,20075
static PyTypeObject *__pyx_ptype_6mtrand_RandomState = 0;__pyx_ptype_6mtrand_RandomState555,20131
#define __Pyx_MODULE_NAME __Pyx_MODULE_NAME573,22331
int __pyx_module_is_main_mtrand = 0;__pyx_module_is_main_mtrand574,22366
static PyObject *__pyx_builtin_ValueError;__pyx_builtin_ValueError577,22435
static PyObject *__pyx_builtin_TypeError;__pyx_builtin_TypeError578,22478
static char __pyx_k_1[] = "size is not compatible with inputs";__pyx_k_1579,22520
static char __pyx_k_2[] = "algorithm must be 'MT19937'";__pyx_k_2580,22584
static char __pyx_k_3[] = "state must be 624 longs";__pyx_k_3581,22641
static char __pyx_k_4[] = "low >= high";__pyx_k_4582,22694
static char __pyx_k_9[] = "scale <= 0";__pyx_k_9583,22735
static char __pyx_k_10[] = "a <= 0";__pyx_k_10584,22775
static char __pyx_k_11[] = "b <= 0";__pyx_k_11585,22812
static char __pyx_k_13[] = "shape <= 0";__pyx_k_13586,22849
static char __pyx_k_15[] = "dfnum <= 0";__pyx_k_15587,22890
static char __pyx_k_16[] = "dfden <= 0";__pyx_k_16588,22931
static char __pyx_k_17[] = "dfnum <= 1";__pyx_k_17589,22972
static char __pyx_k_18[] = "nonc < 0";__pyx_k_18590,23013
static char __pyx_k_19[] = "df <= 0";__pyx_k_19591,23052
static char __pyx_k_20[] = "nonc <= 0";__pyx_k_20592,23090
static char __pyx_k_21[] = "df <= 1";__pyx_k_21593,23130
static char __pyx_k_22[] = "kappa < 0";__pyx_k_22594,23168
static char __pyx_k_31[] = "sigma <= 0";__pyx_k_31595,23208
static char __pyx_k_32[] = "sigma <= 0.0";__pyx_k_32596,23249
static char __pyx_k_34[] = "scale <= 0.0";__pyx_k_34597,23292
static char __pyx_k_35[] = "mean <= 0";__pyx_k_35598,23335
static char __pyx_k_36[] = "mean <= 0.0";__pyx_k_36599,23375
static char __pyx_k_37[] = "left > mode";__pyx_k_37600,23417
static char __pyx_k_38[] = "mode > right";__pyx_k_38601,23459
static char __pyx_k_39[] = "left == right";__pyx_k_39602,23502
static char __pyx_k_40[] = "n <= 0";__pyx_k_40603,23546
static char __pyx_k_41[] = "p < 0";__pyx_k_41604,23583
static char __pyx_k_42[] = "p > 1";__pyx_k_42605,23619
static char __pyx_k_44[] = "lam < 0";__pyx_k_44606,23655
static char __pyx_k_45[] = "a <= 1.0";__pyx_k_45607,23693
static char __pyx_k_46[] = "p < 0.0";__pyx_k_46608,23732
static char __pyx_k_47[] = "p > 1.0";__pyx_k_47609,23770
static char __pyx_k_48[] = "ngood < 1";__pyx_k_48610,23808
static char __pyx_k_49[] = "nbad < 1";__pyx_k_49611,23848
static char __pyx_k_50[] = "nsample < 1";__pyx_k_50612,23887
static char __pyx_k_51[] = "ngood + nbad < nsample";__pyx_k_51613,23929
static char __pyx_k_52[] = "p <= 0.0";__pyx_k_52614,23982
static char __pyx_k_53[] = "p >= 1.0";__pyx_k_53615,24021
static char __pyx_k_54[] = "mean must be 1 dimensional";__pyx_k_54616,24060
static char __pyx_k_55[] = "cov must be 2 dimensional and square";__pyx_k_55617,24117
static char __pyx_k_56[] = "mean and cov must have same length";__pyx_k_56618,24184
static char __pyx_k_57[] = "numpy.dual";__pyx_k_57619,24249
static char __pyx_k_58[] = "sum(pvals[:-1]) > 1.0";__pyx_k_58620,24290
static char __pyx_k_59[] = "standard_exponential";__pyx_k_59621,24342
static char __pyx_k_60[] = "noncentral_chisquare";__pyx_k_60622,24393
static char __pyx_k_61[] = "RandomState.seed (line 567)";__pyx_k_61623,24444
static char __pyx_k_62[] = "RandomState.get_state (line 600)";__pyx_k_62624,24502
static char __pyx_k_63[] = "RandomState.set_state (line 637)";__pyx_k_63625,24565
static char __pyx_k_64[] = "RandomState.random_sample (line 718)";__pyx_k_64626,24628
static char __pyx_k_65[] = "RandomState.tomaxint (line 761)";__pyx_k_65627,24695
static char __pyx_k_66[] = "RandomState.randint (line 789)";__pyx_k_66628,24757
static char __pyx_k_67[] = "RandomState.bytes (line 866)";__pyx_k_67629,24818
static char __pyx_k_68[] = "RandomState.uniform (line 893)";__pyx_k_68630,24877
static char __pyx_k_69[] = "RandomState.rand (line 981)";__pyx_k_69631,24938
static char __pyx_k_70[] = "RandomState.randn (line 1024)";__pyx_k_70632,24996
static char __pyx_k_71[] = "RandomState.random_integers (line 1080)";__pyx_k_71633,25056
static char __pyx_k_72[] = "RandomState.standard_normal (line 1158)";__pyx_k_72634,25126
static char __pyx_k_73[] = "RandomState.normal (line 1190)";__pyx_k_73635,25196
static char __pyx_k_74[] = "RandomState.beta (line 1290)";__pyx_k_74636,25257
static char __pyx_k_75[] = "RandomState.exponential (line 1349)";__pyx_k_75637,25316
static char __pyx_k_76[] = "RandomState.standard_exponential (line 1403)";__pyx_k_76638,25382
static char __pyx_k_77[] = "RandomState.standard_gamma (line 1431)";__pyx_k_77639,25457
static char __pyx_k_78[] = "RandomState.gamma (line 1513)";__pyx_k_78640,25526
static char __pyx_k_79[] = "RandomState.f (line 1604)";__pyx_k_79641,25586
static char __pyx_k_80[] = "RandomState.noncentral_f (line 1707)";__pyx_k_80642,25642
static char __pyx_k_81[] = "RandomState.chisquare (line 1802)";__pyx_k_81643,25709
static char __pyx_k_82[] = "RandomState.noncentral_chisquare (line 1882)";__pyx_k_82644,25773
static char __pyx_k_83[] = "RandomState.standard_cauchy (line 1974)";__pyx_k_83645,25848
static char __pyx_k_84[] = "RandomState.standard_t (line 2035)";__pyx_k_84646,25918
static char __pyx_k_85[] = "RandomState.vonmises (line 2136)";__pyx_k_85647,25983
static char __pyx_k_86[] = "RandomState.pareto (line 2231)";__pyx_k_86648,26046
static char __pyx_k_87[] = "RandomState.weibull (line 2320)";__pyx_k_87649,26107
static char __pyx_k_88[] = "RandomState.power (line 2420)";__pyx_k_88650,26169
static char __pyx_k_89[] = "RandomState.laplace (line 2529)";__pyx_k_89651,26229
static char __pyx_k_90[] = "RandomState.gumbel (line 2619)";__pyx_k_90652,26291
static char __pyx_k_91[] = "RandomState.logistic (line 2743)";__pyx_k_91653,26352
static char __pyx_k_92[] = "RandomState.lognormal (line 2831)";__pyx_k_92654,26415
static char __pyx_k_93[] = "RandomState.rayleigh (line 2962)";__pyx_k_93655,26479
static char __pyx_k_94[] = "RandomState.wald (line 3034)";__pyx_k_94656,26542
static char __pyx_k_95[] = "RandomState.triangular (line 3120)";__pyx_k_95657,26601
static char __pyx_k_96[] = "RandomState.binomial (line 3208)";__pyx_k_96658,26666
static char __pyx_k_97[] = "RandomState.negative_binomial (line 3316)";__pyx_k_97659,26729
static char __pyx_k_98[] = "RandomState.poisson (line 3411)";__pyx_k_98660,26801
static char __pyx_k_99[] = "RandomState.zipf (line 3474)";__pyx_k_99661,26863
static char __pyx_k__a[] = "a";__pyx_k__a662,26922
static char __pyx_k__b[] = "b";__pyx_k__b663,26954
static char __pyx_k__f[] = "f";__pyx_k__f664,26986
static char __pyx_k__n[] = "n";__pyx_k__n665,27018
static char __pyx_k__p[] = "p";__pyx_k__p666,27050
static char __pyx_k_100[] = "RandomState.geometric (line 3566)";__pyx_k_100667,27082
static char __pyx_k_101[] = "RandomState.hypergeometric (line 3632)";__pyx_k_101668,27147
static char __pyx_k_102[] = "RandomState.logseries (line 3751)";__pyx_k_102669,27217
static char __pyx_k_103[] = "RandomState.multivariate_normal (line 3846)";__pyx_k_103670,27282
static char __pyx_k_104[] = "RandomState.multinomial (line 3979)";__pyx_k_104671,27357
static char __pyx_k_105[] = "RandomState.dirichlet (line 4072)";__pyx_k_105672,27424
static char __pyx_k_106[] = "RandomState.shuffle (line 4166)";__pyx_k_106673,27489
static char __pyx_k_107[] = "RandomState.permutation (line 4202)";__pyx_k_107674,27552
static char __pyx_k__df[] = "df";__pyx_k__df675,27619
static char __pyx_k__mu[] = "mu";__pyx_k__mu676,27653
static char __pyx_k__nd[] = "nd";__pyx_k__nd677,27687
static char __pyx_k__np[] = "np";__pyx_k__np678,27721
static char __pyx_k__add[] = "add";__pyx_k__add679,27755
static char __pyx_k__any[] = "any";__pyx_k__any680,27791
static char __pyx_k__cov[] = "cov";__pyx_k__cov681,27827
static char __pyx_k__dot[] = "dot";__pyx_k__dot682,27863
static char __pyx_k__key[] = "key";__pyx_k__key683,27899
static char __pyx_k__lam[] = "lam";__pyx_k__lam684,27935
static char __pyx_k__loc[] = "loc";__pyx_k__loc685,27971
static char __pyx_k__low[] = "low";__pyx_k__low686,28007
static char __pyx_k__pos[] = "pos";__pyx_k__pos687,28043
static char __pyx_k__svd[] = "svd";__pyx_k__svd688,28079
static char __pyx_k__beta[] = "beta";__pyx_k__beta689,28115
static char __pyx_k__copy[] = "copy";__pyx_k__copy690,28153
static char __pyx_k__data[] = "data";__pyx_k__data691,28191
static char __pyx_k__high[] = "high";__pyx_k__high692,28229
static char __pyx_k__left[] = "left";__pyx_k__left693,28267
static char __pyx_k__less[] = "less";__pyx_k__less694,28305
static char __pyx_k__mean[] = "mean";__pyx_k__mean695,28343
static char __pyx_k__mode[] = "mode";__pyx_k__mode696,28381
static char __pyx_k__nbad[] = "nbad";__pyx_k__nbad697,28419
static char __pyx_k__nonc[] = "nonc";__pyx_k__nonc698,28457
static char __pyx_k__rand[] = "rand";__pyx_k__rand699,28495
static char __pyx_k__seed[] = "seed";__pyx_k__seed700,28533
static char __pyx_k__size[] = "size";__pyx_k__size701,28571
static char __pyx_k__sqrt[] = "sqrt";__pyx_k__sqrt702,28609
static char __pyx_k__uint[] = "uint";__pyx_k__uint703,28647
static char __pyx_k__wald[] = "wald";__pyx_k__wald704,28685
static char __pyx_k__zipf[] = "zipf";__pyx_k__zipf705,28723
static char __pyx_k___rand[] = "_rand";__pyx_k___rand706,28761
static char __pyx_k__alpha[] = "alpha";__pyx_k__alpha707,28801
static char __pyx_k__array[] = "array";__pyx_k__array708,28841
static char __pyx_k__bytes[] = "bytes";__pyx_k__bytes709,28881
static char __pyx_k__dfden[] = "dfden";__pyx_k__dfden710,28921
static char __pyx_k__dfnum[] = "dfnum";__pyx_k__dfnum711,28961
static char __pyx_k__empty[] = "empty";__pyx_k__empty712,29001
static char __pyx_k__equal[] = "equal";__pyx_k__equal713,29041
static char __pyx_k__gamma[] = "gamma";__pyx_k__gamma714,29081
static char __pyx_k__gauss[] = "gauss";__pyx_k__gauss715,29121
static char __pyx_k__kappa[] = "kappa";__pyx_k__kappa716,29161
static char __pyx_k__ngood[] = "ngood";__pyx_k__ngood717,29201
static char __pyx_k__numpy[] = "numpy";__pyx_k__numpy718,29241
static char __pyx_k__power[] = "power";__pyx_k__power719,29281
static char __pyx_k__pvals[] = "pvals";__pyx_k__pvals720,29321
static char __pyx_k__randn[] = "randn";__pyx_k__randn721,29361
static char __pyx_k__right[] = "right";__pyx_k__right722,29401
static char __pyx_k__scale[] = "scale";__pyx_k__scale723,29441
static char __pyx_k__shape[] = "shape";__pyx_k__shape724,29481
static char __pyx_k__sigma[] = "sigma";__pyx_k__sigma725,29521
static char __pyx_k__zeros[] = "zeros";__pyx_k__zeros726,29561
static char __pyx_k__arange[] = "arange";__pyx_k__arange727,29601
static char __pyx_k__gumbel[] = "gumbel";__pyx_k__gumbel728,29643
static char __pyx_k__normal[] = "normal";__pyx_k__normal729,29685
static char __pyx_k__pareto[] = "pareto";__pyx_k__pareto730,29727
static char __pyx_k__random[] = "random";__pyx_k__random731,29769
static char __pyx_k__reduce[] = "reduce";__pyx_k__reduce732,29811
static char __pyx_k__uint32[] = "uint32";__pyx_k__uint32733,29853
static char __pyx_k__MT19937[] = "MT19937";__pyx_k__MT19937734,29895
static char __pyx_k__asarray[] = "asarray";__pyx_k__asarray735,29939
static char __pyx_k__dataptr[] = "dataptr";__pyx_k__dataptr736,29983
static char __pyx_k__float64[] = "float64";__pyx_k__float64737,30027
static char __pyx_k__greater[] = "greater";__pyx_k__greater738,30071
static char __pyx_k__integer[] = "integer";__pyx_k__integer739,30115
static char __pyx_k__laplace[] = "laplace";__pyx_k__laplace740,30159
static char __pyx_k__nsample[] = "nsample";__pyx_k__nsample741,30203
static char __pyx_k__poisson[] = "poisson";__pyx_k__poisson742,30247
static char __pyx_k__randint[] = "randint";__pyx_k__randint743,30291
static char __pyx_k__shuffle[] = "shuffle";__pyx_k__shuffle744,30335
static char __pyx_k__uniform[] = "uniform";__pyx_k__uniform745,30379
static char __pyx_k__weibull[] = "weibull";__pyx_k__weibull746,30423
static char __pyx_k____main__[] = "__main__";__pyx_k____main__747,30467
static char __pyx_k____test__[] = "__test__";__pyx_k____test__748,30513
static char __pyx_k__binomial[] = "binomial";__pyx_k__binomial749,30559
static char __pyx_k__logistic[] = "logistic";__pyx_k__logistic750,30605
static char __pyx_k__multiply[] = "multiply";__pyx_k__multiply751,30651
static char __pyx_k__rayleigh[] = "rayleigh";__pyx_k__rayleigh752,30697
static char __pyx_k__subtract[] = "subtract";__pyx_k__subtract753,30743
static char __pyx_k__tomaxint[] = "tomaxint";__pyx_k__tomaxint754,30789
static char __pyx_k__vonmises[] = "vonmises";__pyx_k__vonmises755,30835
static char __pyx_k__TypeError[] = "TypeError";__pyx_k__TypeError756,30881
static char __pyx_k__chisquare[] = "chisquare";__pyx_k__chisquare757,30929
static char __pyx_k__dirichlet[] = "dirichlet";__pyx_k__dirichlet758,30977
static char __pyx_k__geometric[] = "geometric";__pyx_k__geometric759,31025
static char __pyx_k__get_state[] = "get_state";__pyx_k__get_state760,31073
static char __pyx_k__has_gauss[] = "has_gauss";__pyx_k__has_gauss761,31121
static char __pyx_k__lognormal[] = "lognormal";__pyx_k__lognormal762,31169
static char __pyx_k__logseries[] = "logseries";__pyx_k__logseries763,31217
static char __pyx_k__set_state[] = "set_state";__pyx_k__set_state764,31265
static char __pyx_k__ValueError[] = "ValueError";__pyx_k__ValueError765,31313
static char __pyx_k__dimensions[] = "dimensions";__pyx_k__dimensions766,31363
static char __pyx_k__less_equal[] = "less_equal";__pyx_k__less_equal767,31413
static char __pyx_k__standard_t[] = "standard_t";__pyx_k__standard_t768,31463
static char __pyx_k__triangular[] = "triangular";__pyx_k__triangular769,31513
static char __pyx_k__RandomState[] = "RandomState";__pyx_k__RandomState770,31563
static char __pyx_k__exponential[] = "exponential";__pyx_k__exponential771,31615
static char __pyx_k__multinomial[] = "multinomial";__pyx_k__multinomial772,31667
static char __pyx_k__permutation[] = "permutation";__pyx_k__permutation773,31719
static char __pyx_k__noncentral_f[] = "noncentral_f";__pyx_k__noncentral_f774,31771
static char __pyx_k__greater_equal[] = "greater_equal";__pyx_k__greater_equal775,31825
static char __pyx_k__random_sample[] = "random_sample";__pyx_k__random_sample776,31881
static char __pyx_k__hypergeometric[] = "hypergeometric";__pyx_k__hypergeometric777,31937
static char __pyx_k__internal_state[] = "internal_state";__pyx_k__internal_state778,31995
static char __pyx_k__standard_gamma[] = "standard_gamma";__pyx_k__standard_gamma779,32053
static char __pyx_k__random_integers[] = "random_integers";__pyx_k__random_integers780,32111
static char __pyx_k__standard_cauchy[] = "standard_cauchy";__pyx_k__standard_cauchy781,32171
static char __pyx_k__standard_normal[] = "standard_normal";__pyx_k__standard_normal782,32231
static char __pyx_k__negative_binomial[] = "negative_binomial";__pyx_k__negative_binomial783,32291
static char __pyx_k____RandomState_ctor[] = "__RandomState_ctor";__pyx_k____RandomState_ctor784,32355
static char __pyx_k__multivariate_normal[] = "multivariate_normal";__pyx_k__multivariate_normal785,32421
static PyObject *__pyx_kp_s_1;__pyx_kp_s_1786,32489
static PyObject *__pyx_kp_s_10;__pyx_kp_s_10787,32520
static PyObject *__pyx_kp_u_100;__pyx_kp_u_100788,32552
static PyObject *__pyx_kp_u_101;__pyx_kp_u_101789,32585
static PyObject *__pyx_kp_u_102;__pyx_kp_u_102790,32618
static PyObject *__pyx_kp_u_103;__pyx_kp_u_103791,32651
static PyObject *__pyx_kp_u_104;__pyx_kp_u_104792,32684
static PyObject *__pyx_kp_u_105;__pyx_kp_u_105793,32717
static PyObject *__pyx_kp_u_106;__pyx_kp_u_106794,32750
static PyObject *__pyx_kp_u_107;__pyx_kp_u_107795,32783
static PyObject *__pyx_kp_s_11;__pyx_kp_s_11796,32816
static PyObject *__pyx_kp_s_13;__pyx_kp_s_13797,32848
static PyObject *__pyx_kp_s_15;__pyx_kp_s_15798,32880
static PyObject *__pyx_kp_s_16;__pyx_kp_s_16799,32912
static PyObject *__pyx_kp_s_17;__pyx_kp_s_17800,32944
static PyObject *__pyx_kp_s_18;__pyx_kp_s_18801,32976
static PyObject *__pyx_kp_s_19;__pyx_kp_s_19802,33008
static PyObject *__pyx_kp_s_2;__pyx_kp_s_2803,33040
static PyObject *__pyx_kp_s_20;__pyx_kp_s_20804,33071
static PyObject *__pyx_kp_s_21;__pyx_kp_s_21805,33103
static PyObject *__pyx_kp_s_22;__pyx_kp_s_22806,33135
static PyObject *__pyx_kp_s_3;__pyx_kp_s_3807,33167
static PyObject *__pyx_kp_s_31;__pyx_kp_s_31808,33198
static PyObject *__pyx_kp_s_32;__pyx_kp_s_32809,33230
static PyObject *__pyx_kp_s_34;__pyx_kp_s_34810,33262
static PyObject *__pyx_kp_s_35;__pyx_kp_s_35811,33294
static PyObject *__pyx_kp_s_36;__pyx_kp_s_36812,33326
static PyObject *__pyx_kp_s_37;__pyx_kp_s_37813,33358
static PyObject *__pyx_kp_s_38;__pyx_kp_s_38814,33390
static PyObject *__pyx_kp_s_39;__pyx_kp_s_39815,33422
static PyObject *__pyx_kp_s_4;__pyx_kp_s_4816,33454
static PyObject *__pyx_kp_s_40;__pyx_kp_s_40817,33485
static PyObject *__pyx_kp_s_41;__pyx_kp_s_41818,33517
static PyObject *__pyx_kp_s_42;__pyx_kp_s_42819,33549
static PyObject *__pyx_kp_s_44;__pyx_kp_s_44820,33581
static PyObject *__pyx_kp_s_45;__pyx_kp_s_45821,33613
static PyObject *__pyx_kp_s_46;__pyx_kp_s_46822,33645
static PyObject *__pyx_kp_s_47;__pyx_kp_s_47823,33677
static PyObject *__pyx_kp_s_48;__pyx_kp_s_48824,33709
static PyObject *__pyx_kp_s_49;__pyx_kp_s_49825,33741
static PyObject *__pyx_kp_s_50;__pyx_kp_s_50826,33773
static PyObject *__pyx_kp_s_51;__pyx_kp_s_51827,33805
static PyObject *__pyx_kp_s_52;__pyx_kp_s_52828,33837
static PyObject *__pyx_kp_s_53;__pyx_kp_s_53829,33869
static PyObject *__pyx_kp_s_54;__pyx_kp_s_54830,33901
static PyObject *__pyx_kp_s_55;__pyx_kp_s_55831,33933
static PyObject *__pyx_kp_s_56;__pyx_kp_s_56832,33965
static PyObject *__pyx_n_s_57;__pyx_n_s_57833,33997
static PyObject *__pyx_kp_s_58;__pyx_kp_s_58834,34028
static PyObject *__pyx_n_s_59;__pyx_n_s_59835,34060
static PyObject *__pyx_n_s_60;__pyx_n_s_60836,34091
static PyObject *__pyx_kp_u_61;__pyx_kp_u_61837,34122
static PyObject *__pyx_kp_u_62;__pyx_kp_u_62838,34154
static PyObject *__pyx_kp_u_63;__pyx_kp_u_63839,34186
static PyObject *__pyx_kp_u_64;__pyx_kp_u_64840,34218
static PyObject *__pyx_kp_u_65;__pyx_kp_u_65841,34250
static PyObject *__pyx_kp_u_66;__pyx_kp_u_66842,34282
static PyObject *__pyx_kp_u_67;__pyx_kp_u_67843,34314
static PyObject *__pyx_kp_u_68;__pyx_kp_u_68844,34346
static PyObject *__pyx_kp_u_69;__pyx_kp_u_69845,34378
static PyObject *__pyx_kp_u_70;__pyx_kp_u_70846,34410
static PyObject *__pyx_kp_u_71;__pyx_kp_u_71847,34442
static PyObject *__pyx_kp_u_72;__pyx_kp_u_72848,34474
static PyObject *__pyx_kp_u_73;__pyx_kp_u_73849,34506
static PyObject *__pyx_kp_u_74;__pyx_kp_u_74850,34538
static PyObject *__pyx_kp_u_75;__pyx_kp_u_75851,34570
static PyObject *__pyx_kp_u_76;__pyx_kp_u_76852,34602
static PyObject *__pyx_kp_u_77;__pyx_kp_u_77853,34634
static PyObject *__pyx_kp_u_78;__pyx_kp_u_78854,34666
static PyObject *__pyx_kp_u_79;__pyx_kp_u_79855,34698
static PyObject *__pyx_kp_u_80;__pyx_kp_u_80856,34730
static PyObject *__pyx_kp_u_81;__pyx_kp_u_81857,34762
static PyObject *__pyx_kp_u_82;__pyx_kp_u_82858,34794
static PyObject *__pyx_kp_u_83;__pyx_kp_u_83859,34826
static PyObject *__pyx_kp_u_84;__pyx_kp_u_84860,34858
static PyObject *__pyx_kp_u_85;__pyx_kp_u_85861,34890
static PyObject *__pyx_kp_u_86;__pyx_kp_u_86862,34922
static PyObject *__pyx_kp_u_87;__pyx_kp_u_87863,34954
static PyObject *__pyx_kp_u_88;__pyx_kp_u_88864,34986
static PyObject *__pyx_kp_u_89;__pyx_kp_u_89865,35018
static PyObject *__pyx_kp_s_9;__pyx_kp_s_9866,35050
static PyObject *__pyx_kp_u_90;__pyx_kp_u_90867,35081
static PyObject *__pyx_kp_u_91;__pyx_kp_u_91868,35113
static PyObject *__pyx_kp_u_92;__pyx_kp_u_92869,35145
static PyObject *__pyx_kp_u_93;__pyx_kp_u_93870,35177
static PyObject *__pyx_kp_u_94;__pyx_kp_u_94871,35209
static PyObject *__pyx_kp_u_95;__pyx_kp_u_95872,35241
static PyObject *__pyx_kp_u_96;__pyx_kp_u_96873,35273
static PyObject *__pyx_kp_u_97;__pyx_kp_u_97874,35305
static PyObject *__pyx_kp_u_98;__pyx_kp_u_98875,35337
static PyObject *__pyx_kp_u_99;__pyx_kp_u_99876,35369
static PyObject *__pyx_n_s__MT19937;__pyx_n_s__MT19937877,35401
static PyObject *__pyx_n_s__RandomState;__pyx_n_s__RandomState878,35438
static PyObject *__pyx_n_s__TypeError;__pyx_n_s__TypeError879,35479
static PyObject *__pyx_n_s__ValueError;__pyx_n_s__ValueError880,35518
static PyObject *__pyx_n_s____RandomState_ctor;__pyx_n_s____RandomState_ctor881,35558
static PyObject *__pyx_n_s____main__;__pyx_n_s____main__882,35606
static PyObject *__pyx_n_s____test__;__pyx_n_s____test__883,35644
static PyObject *__pyx_n_s___rand;__pyx_n_s___rand884,35682
static PyObject *__pyx_n_s__a;__pyx_n_s__a885,35717
static PyObject *__pyx_n_s__add;__pyx_n_s__add886,35748
static PyObject *__pyx_n_s__alpha;__pyx_n_s__alpha887,35781
static PyObject *__pyx_n_s__any;__pyx_n_s__any888,35816
static PyObject *__pyx_n_s__arange;__pyx_n_s__arange889,35849
static PyObject *__pyx_n_s__array;__pyx_n_s__array890,35885
static PyObject *__pyx_n_s__asarray;__pyx_n_s__asarray891,35920
static PyObject *__pyx_n_s__b;__pyx_n_s__b892,35957
static PyObject *__pyx_n_s__beta;__pyx_n_s__beta893,35988
static PyObject *__pyx_n_s__binomial;__pyx_n_s__binomial894,36022
static PyObject *__pyx_n_s__bytes;__pyx_n_s__bytes895,36060
static PyObject *__pyx_n_s__chisquare;__pyx_n_s__chisquare896,36095
static PyObject *__pyx_n_s__copy;__pyx_n_s__copy897,36134
static PyObject *__pyx_n_s__cov;__pyx_n_s__cov898,36168
static PyObject *__pyx_n_s__data;__pyx_n_s__data899,36201
static PyObject *__pyx_n_s__dataptr;__pyx_n_s__dataptr900,36235
static PyObject *__pyx_n_s__df;__pyx_n_s__df901,36272
static PyObject *__pyx_n_s__dfden;__pyx_n_s__dfden902,36304
static PyObject *__pyx_n_s__dfnum;__pyx_n_s__dfnum903,36339
static PyObject *__pyx_n_s__dimensions;__pyx_n_s__dimensions904,36374
static PyObject *__pyx_n_s__dirichlet;__pyx_n_s__dirichlet905,36414
static PyObject *__pyx_n_s__dot;__pyx_n_s__dot906,36453
static PyObject *__pyx_n_s__empty;__pyx_n_s__empty907,36486
static PyObject *__pyx_n_s__equal;__pyx_n_s__equal908,36521
static PyObject *__pyx_n_s__exponential;__pyx_n_s__exponential909,36556
static PyObject *__pyx_n_s__f;__pyx_n_s__f910,36597
static PyObject *__pyx_n_s__float64;__pyx_n_s__float64911,36628
static PyObject *__pyx_n_s__gamma;__pyx_n_s__gamma912,36665
static PyObject *__pyx_n_s__gauss;__pyx_n_s__gauss913,36700
static PyObject *__pyx_n_s__geometric;__pyx_n_s__geometric914,36735
static PyObject *__pyx_n_s__get_state;__pyx_n_s__get_state915,36774
static PyObject *__pyx_n_s__greater;__pyx_n_s__greater916,36813
static PyObject *__pyx_n_s__greater_equal;__pyx_n_s__greater_equal917,36850
static PyObject *__pyx_n_s__gumbel;__pyx_n_s__gumbel918,36893
static PyObject *__pyx_n_s__has_gauss;__pyx_n_s__has_gauss919,36929
static PyObject *__pyx_n_s__high;__pyx_n_s__high920,36968
static PyObject *__pyx_n_s__hypergeometric;__pyx_n_s__hypergeometric921,37002
static PyObject *__pyx_n_s__integer;__pyx_n_s__integer922,37046
static PyObject *__pyx_n_s__internal_state;__pyx_n_s__internal_state923,37083
static PyObject *__pyx_n_s__kappa;__pyx_n_s__kappa924,37127
static PyObject *__pyx_n_s__key;__pyx_n_s__key925,37162
static PyObject *__pyx_n_s__lam;__pyx_n_s__lam926,37195
static PyObject *__pyx_n_s__laplace;__pyx_n_s__laplace927,37228
static PyObject *__pyx_n_s__left;__pyx_n_s__left928,37265
static PyObject *__pyx_n_s__less;__pyx_n_s__less929,37299
static PyObject *__pyx_n_s__less_equal;__pyx_n_s__less_equal930,37333
static PyObject *__pyx_n_s__loc;__pyx_n_s__loc931,37373
static PyObject *__pyx_n_s__logistic;__pyx_n_s__logistic932,37406
static PyObject *__pyx_n_s__lognormal;__pyx_n_s__lognormal933,37444
static PyObject *__pyx_n_s__logseries;__pyx_n_s__logseries934,37483
static PyObject *__pyx_n_s__low;__pyx_n_s__low935,37522
static PyObject *__pyx_n_s__mean;__pyx_n_s__mean936,37555
static PyObject *__pyx_n_s__mode;__pyx_n_s__mode937,37589
static PyObject *__pyx_n_s__mu;__pyx_n_s__mu938,37623
static PyObject *__pyx_n_s__multinomial;__pyx_n_s__multinomial939,37655
static PyObject *__pyx_n_s__multiply;__pyx_n_s__multiply940,37696
static PyObject *__pyx_n_s__multivariate_normal;__pyx_n_s__multivariate_normal941,37734
static PyObject *__pyx_n_s__n;__pyx_n_s__n942,37783
static PyObject *__pyx_n_s__nbad;__pyx_n_s__nbad943,37814
static PyObject *__pyx_n_s__nd;__pyx_n_s__nd944,37848
static PyObject *__pyx_n_s__negative_binomial;__pyx_n_s__negative_binomial945,37880
static PyObject *__pyx_n_s__ngood;__pyx_n_s__ngood946,37927
static PyObject *__pyx_n_s__nonc;__pyx_n_s__nonc947,37962
static PyObject *__pyx_n_s__noncentral_f;__pyx_n_s__noncentral_f948,37996
static PyObject *__pyx_n_s__normal;__pyx_n_s__normal949,38038
static PyObject *__pyx_n_s__np;__pyx_n_s__np950,38074
static PyObject *__pyx_n_s__nsample;__pyx_n_s__nsample951,38106
static PyObject *__pyx_n_s__numpy;__pyx_n_s__numpy952,38143
static PyObject *__pyx_n_s__p;__pyx_n_s__p953,38178
static PyObject *__pyx_n_s__pareto;__pyx_n_s__pareto954,38209
static PyObject *__pyx_n_s__permutation;__pyx_n_s__permutation955,38245
static PyObject *__pyx_n_s__poisson;__pyx_n_s__poisson956,38286
static PyObject *__pyx_n_s__pos;__pyx_n_s__pos957,38323
static PyObject *__pyx_n_s__power;__pyx_n_s__power958,38356
static PyObject *__pyx_n_s__pvals;__pyx_n_s__pvals959,38391
static PyObject *__pyx_n_s__rand;__pyx_n_s__rand960,38426
static PyObject *__pyx_n_s__randint;__pyx_n_s__randint961,38460
static PyObject *__pyx_n_s__randn;__pyx_n_s__randn962,38497
static PyObject *__pyx_n_s__random;__pyx_n_s__random963,38532
static PyObject *__pyx_n_s__random_integers;__pyx_n_s__random_integers964,38568
static PyObject *__pyx_n_s__random_sample;__pyx_n_s__random_sample965,38613
static PyObject *__pyx_n_s__rayleigh;__pyx_n_s__rayleigh966,38656
static PyObject *__pyx_n_s__reduce;__pyx_n_s__reduce967,38694
static PyObject *__pyx_n_s__right;__pyx_n_s__right968,38730
static PyObject *__pyx_n_s__scale;__pyx_n_s__scale969,38765
static PyObject *__pyx_n_s__seed;__pyx_n_s__seed970,38800
static PyObject *__pyx_n_s__set_state;__pyx_n_s__set_state971,38834
static PyObject *__pyx_n_s__shape;__pyx_n_s__shape972,38873
static PyObject *__pyx_n_s__shuffle;__pyx_n_s__shuffle973,38908
static PyObject *__pyx_n_s__sigma;__pyx_n_s__sigma974,38945
static PyObject *__pyx_n_s__size;__pyx_n_s__size975,38980
static PyObject *__pyx_n_s__sqrt;__pyx_n_s__sqrt976,39014
static PyObject *__pyx_n_s__standard_cauchy;__pyx_n_s__standard_cauchy977,39048
static PyObject *__pyx_n_s__standard_gamma;__pyx_n_s__standard_gamma978,39093
static PyObject *__pyx_n_s__standard_normal;__pyx_n_s__standard_normal979,39137
static PyObject *__pyx_n_s__standard_t;__pyx_n_s__standard_t980,39182
static PyObject *__pyx_n_s__subtract;__pyx_n_s__subtract981,39222
static PyObject *__pyx_n_s__svd;__pyx_n_s__svd982,39260
static PyObject *__pyx_n_s__tomaxint;__pyx_n_s__tomaxint983,39293
static PyObject *__pyx_n_s__triangular;__pyx_n_s__triangular984,39331
static PyObject *__pyx_n_s__uint;__pyx_n_s__uint985,39371
static PyObject *__pyx_n_s__uint32;__pyx_n_s__uint32986,39405
static PyObject *__pyx_n_s__uniform;__pyx_n_s__uniform987,39441
static PyObject *__pyx_n_s__vonmises;__pyx_n_s__vonmises988,39478
static PyObject *__pyx_n_s__wald;__pyx_n_s__wald989,39516
static PyObject *__pyx_n_s__weibull;__pyx_n_s__weibull990,39550
static PyObject *__pyx_n_s__zeros;__pyx_n_s__zeros991,39587
static PyObject *__pyx_n_s__zipf;__pyx_n_s__zipf992,39622
static PyObject *__pyx_int_0;__pyx_int_0993,39656
static PyObject *__pyx_int_1;__pyx_int_1994,39686
static PyObject *__pyx_int_624;__pyx_int_624995,39716
static PyObject *__pyx_k_5;__pyx_k_5996,39748
static PyObject *__pyx_k_6;__pyx_k_6997,39776
static PyObject *__pyx_k_7;__pyx_k_7998,39804
static PyObject *__pyx_k_8;__pyx_k_8999,39832
static PyObject *__pyx_k_12;__pyx_k_121000,39860
static PyObject *__pyx_k_14;__pyx_k_141001,39889
static PyObject *__pyx_k_23;__pyx_k_231002,39918
static PyObject *__pyx_k_24;__pyx_k_241003,39947
static PyObject *__pyx_k_25;__pyx_k_251004,39976
static PyObject *__pyx_k_26;__pyx_k_261005,40005
static PyObject *__pyx_k_27;__pyx_k_271006,40034
static PyObject *__pyx_k_28;__pyx_k_281007,40063
static PyObject *__pyx_k_29;__pyx_k_291008,40092
static PyObject *__pyx_k_30;__pyx_k_301009,40121
static PyObject *__pyx_k_33;__pyx_k_331010,40150
static PyObject *__pyx_k_43;__pyx_k_431011,40179
static  PyObject *__pyx_f_6mtrand_cont0_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_cont0 __pyx_v_func, PyObject *__pyx_v_size) {__pyx_f_6mtrand_cont0_array1021,40487
static  PyObject *__pyx_f_6mtrand_cont1_array_sc(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_cont1 __pyx_v_func, PyObject *__pyx_v_size, double __pyx_v_a) {__pyx_f_6mtrand_cont1_array_sc1173,46511
static  PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_cont1 __pyx_v_func, PyObject *__pyx_v_size, PyArrayObject *__pyx_v_oa) {__pyx_f_6mtrand_cont1_array1325,52693
static  PyObject *__pyx_f_6mtrand_cont2_array_sc(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_cont2 __pyx_v_func, PyObject *__pyx_v_size, double __pyx_v_a, double __pyx_v_b) {__pyx_f_6mtrand_cont2_array_sc1602,65865
static  PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_cont2 __pyx_v_func, PyObject *__pyx_v_size, PyArrayObject *__pyx_v_oa, PyArrayObject *__pyx_v_ob) {__pyx_f_6mtrand_cont2_array1754,72018
static  PyObject *__pyx_f_6mtrand_cont3_array_sc(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_cont3 __pyx_v_func, PyObject *__pyx_v_size, double __pyx_v_a, double __pyx_v_b, double __pyx_v_c) {__pyx_f_6mtrand_cont3_array_sc2057,87168
static  PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_cont3 __pyx_v_func, PyObject *__pyx_v_size, PyArrayObject *__pyx_v_oa, PyArrayObject *__pyx_v_ob, PyArrayObject *__pyx_v_oc) {__pyx_f_6mtrand_cont3_array2209,93447
static  PyObject *__pyx_f_6mtrand_disc0_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_disc0 __pyx_v_func, PyObject *__pyx_v_size) {__pyx_f_6mtrand_disc0_array2524,109610
static  PyObject *__pyx_f_6mtrand_discnp_array_sc(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_discnp __pyx_v_func, PyObject *__pyx_v_size, long __pyx_v_n, double __pyx_v_p) {__pyx_f_6mtrand_discnp_array_sc2671,115335
static  PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_discnp __pyx_v_func, PyObject *__pyx_v_size, PyArrayObject *__pyx_v_on, PyArrayObject *__pyx_v_op) {__pyx_f_6mtrand_discnp_array2818,121199
static  PyObject *__pyx_f_6mtrand_discdd_array_sc(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_discdd __pyx_v_func, PyObject *__pyx_v_size, double __pyx_v_n, double __pyx_v_p) {__pyx_f_6mtrand_discdd_array_sc3116,135869
static  PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_discdd __pyx_v_func, PyObject *__pyx_v_size, PyArrayObject *__pyx_v_on, PyArrayObject *__pyx_v_op) {__pyx_f_6mtrand_discdd_array3263,141735
static  PyObject *__pyx_f_6mtrand_discnmN_array_sc(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_discnmN __pyx_v_func, PyObject *__pyx_v_size, long __pyx_v_n, long __pyx_v_m, long __pyx_v_N) {__pyx_f_6mtrand_discnmN_array_sc3561,156385
static  PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_discnmN __pyx_v_func, PyObject *__pyx_v_size, PyArrayObject *__pyx_v_on, PyArrayObject *__pyx_v_om, PyArrayObject *__pyx_v_oN) {__pyx_f_6mtrand_discnmN_array3708,162268
static  PyObject *__pyx_f_6mtrand_discd_array_sc(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_discd __pyx_v_func, PyObject *__pyx_v_size, double __pyx_v_a) {__pyx_f_6mtrand_discd_array_sc4018,177868
static  PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6mtrand_rk_discd __pyx_v_func, PyObject *__pyx_v_size, PyArrayObject *__pyx_v_oa) {__pyx_f_6mtrand_discd_array4165,183629
static  double __pyx_f_6mtrand_kahan_sum(double *__pyx_v_darr, long __pyx_v_n) {__pyx_f_6mtrand_kahan_sum4437,196298
static int __pyx_pf_6mtrand_11RandomState___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState___init__4537,199189
static void __pyx_pf_6mtrand_11RandomState___dealloc__(PyObject *__pyx_v_self) {__pyx_pf_6mtrand_11RandomState___dealloc__4632,203109
static char __pyx_doc_6mtrand_11RandomState_seed[] = "\n        seed(seed=None)\n\n        Seed the generator.\n\n        This method is called when `RandomState` is initialized. It can be\n        called again to re-seed the generator. For details, see `RandomState`.\n\n        Parameters\n        ----------\n        seed : int or array_like, optional\n            Seed for `RandomState`.\n\n        See Also\n        --------\n        RandomState\n\n        ";__pyx_doc_6mtrand_11RandomState_seed4681,204893
static PyObject *__pyx_pf_6mtrand_11RandomState_seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_seed4682,205358
static char __pyx_doc_6mtrand_11RandomState_get_state[] = "\n        get_state()\n\n        Return a tuple representing the internal state of the generator.\n\n        For more details, see `set_state`.\n\n        Returns\n        -------\n        out : tuple(str, ndarray of 624 uints, int, int, float)\n            The returned tuple has the following items:\n\n            1. the string 'MT19937'.\n            2. a 1-D array of 624 unsigned integer keys.\n            3. an integer ``pos``.\n            4. an integer ``has_gauss``.\n            5. a float ``cached_gaussian``.\n\n        See Also\n        --------\n        set_state\n\n        Notes\n        -----\n        `set_state` and `get_state` are not needed to work with any of the\n        random distributions in NumPy. If the internal state is manually altered,\n        the user should know exactly what he/she is doing.\n\n        ";__pyx_doc_6mtrand_11RandomState_get_state4879,214499
static PyObject *__pyx_pf_6mtrand_11RandomState_get_state(PyObject *__pyx_v_self, PyObject *unused) {__pyx_pf_6mtrand_11RandomState_get_state4880,215403
static char __pyx_doc_6mtrand_11RandomState_set_state[] = "\n        set_state(state)\n\n        Set the internal state of the generator from a tuple.\n\n        For use if one has reason to manually (re-)set the internal state of the\n        \"Mersenne Twister\"[1]_ pseudo-random number generating algorithm.\n\n        Parameters\n        ----------\n        state : tuple(str, ndarray of 624 uints, int, int, float)\n            The `state` tuple has the following items:\n\n            1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n            2. a 1-D array of 624 unsigned integers ``keys``.\n            3. an integer ``pos``.\n            4. an integer ``has_gauss``.\n            5. a float ``cached_gaussian``.\n\n        Returns\n        -------\n        out : None\n            Returns 'None' on success.\n\n        See Also\n        --------\n        get_state\n\n        Notes\n        -----\n        `set_state` and `get_state` are not needed to work with any of the\n        random distributions in NumPy. If the internal state is manually altered,\n        the user should know exactly what he/she is doing.\n\n        For backwards compatibility, the form (str, array of 624 uints, int) is\n        also accepted although it is missing some information about the cached\n        Gaussian value: ``state = ('MT19937', keys, pos)``.\n\n        References\n        ----------\n        .. [1] M. Matsumoto and T. Nishimura, \"Mersenne Twister: A\n           623-dimensionally equidistributed uniform pseudorandom number\n           generator,\" *ACM Trans. on Modeling and Computer Simulation*,\n           Vol. 8, No. 1, pp. 3-30, Jan. 1998.\n\n        ";__pyx_doc_6mtrand_11RandomState_set_state5035,224024
static PyObject *__pyx_pf_6mtrand_11RandomState_set_state(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {__pyx_pf_6mtrand_11RandomState_set_state5036,225720
static PyObject *__pyx_pf_6mtrand_11RandomState___getstate__(PyObject *__pyx_v_self, PyObject *unused) {__pyx_pf_6mtrand_11RandomState___getstate__5412,244403
static PyObject *__pyx_pf_6mtrand_11RandomState___setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {__pyx_pf_6mtrand_11RandomState___setstate__5457,246110
static PyObject *__pyx_pf_6mtrand_11RandomState___reduce__(PyObject *__pyx_v_self, PyObject *unused) {__pyx_pf_6mtrand_11RandomState___reduce__5507,248145
static char __pyx_doc_6mtrand_11RandomState_random_sample[] = "\n        random_sample(size=None)\n\n        Return random floats in the half-open interval [0.0, 1.0).\n\n        Results are from the \"continuous uniform\" distribution over the\n        stated interval.  To sample :math:`Unif[a, b), b > a` multiply\n        the output of `random_sample` by `(b-a)` and add `a`::\n\n          (b - a) * random_sample() + a\n\n        Parameters\n        ----------\n        size : int or tuple of ints, optional\n            Defines the shape of the returned array of random floats. If None\n            (the default), returns a single float.\n\n        Returns\n        -------\n        out : float or ndarray of floats\n            Array of random floats of shape `size` (unless ``size=None``, in which\n            case a single float is returned).\n\n        Examples\n        --------\n        >>> np.random.random_sample()\n        0.47108547995356098\n        >>> type(np.random.random_sample())\n        <type 'float'>\n        >>> np.random.random_sample((5,))\n        array([ 0.30220482,  0.86820401,  0.1654503 ,  0.11659149,  0.54323428])\n\n        Three-by-two array of random numbers from [-5, 0):\n\n        >>> 5 * np.random.random_sample((3, 2)) - 5\n        array([[-3.99149989, -0.52338984],\n               [-2.99091858, -0.79479508],\n               [-1.23204345, -1.75224494]])\n\n        ";__pyx_doc_6mtrand_11RandomState_random_sample5573,251194
static PyObject *__pyx_pf_6mtrand_11RandomState_random_sample(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_random_sample5574,252611
static char __pyx_doc_6mtrand_11RandomState_tomaxint[] = "\n        tomaxint(size=None)\n\n        Uniformly sample discrete random integers `x` such that\n        ``0 <= x <= sys.maxint``.\n\n        Parameters\n        ----------\n        size : tuple of ints, int, optional\n            Shape of output.  If the given size is, for example, (m,n,k),\n            m*n*k samples are generated.  If no shape is specified, a single sample\n            is returned.\n\n        Returns\n        -------\n        out : ndarray\n            Drawn samples, with shape `size`.\n\n        See Also\n        --------\n        randint : Uniform sampling over a given half-open interval of integers.\n        random_integers : Uniform sampling over a given closed interval of\n            integers.\n\n        ";__pyx_doc_6mtrand_11RandomState_tomaxint5651,255719
static PyObject *__pyx_pf_6mtrand_11RandomState_tomaxint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_tomaxint5652,256520
static char __pyx_doc_6mtrand_11RandomState_randint[] = "\n        randint(low, high=None, size=None)\n\n        Return random integers from `low` (inclusive) to `high` (exclusive).\n\n        Return random integers from the \"discrete uniform\" distribution in the\n        \"half-open\" interval [`low`, `high`). If `high` is None (the default),\n        then results are from [0, `low`).\n\n        Parameters\n        ----------\n        low : int\n            Lowest (signed) integer to be drawn from the distribution (unless\n            ``high=None``, in which case this parameter is the *highest* such\n            integer).\n        high : int, optional\n            If provided, one above the largest (signed) integer to be drawn\n            from the distribution (see above for behavior if ``high=None``).\n        size : int or tuple of ints, optional\n            Output shape. Default is None, in which case a single int is\n            returned.\n\n        Returns\n        -------\n        out : int or ndarray of ints\n            `size`-shaped array of random integers from the appropriate\n            distribution, or a single such random int if `size` not provided.\n\n        See Also\n        --------\n        random.random_integers : similar to `randint`, only for the closed\n            interval [`low`, `high`], and 1 is the lowest value if `high` is\n            omitted. In particular, this other one is the one to use to generate\n            uniformly distributed discrete non-integers.\n\n        Examples\n        --------\n        >>> np.random.randint(2, size=10)\n        array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])\n        >>> np.random.randint(1, size=10)\n        array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\n        Generate a 2 x 4 array of ints between 0 and 4, inclusive:\n\n        >>> np.random.randint(5, size=(2, 4))\n        array([[4, 0, 2, 1],\n               [3, 2, 2, 0]])\n\n        ";__pyx_doc_6mtrand_11RandomState_randint5729,259636
static PyObject *__pyx_pf_6mtrand_11RandomState_randint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_randint5730,261568
static char __pyx_doc_6mtrand_11RandomState_bytes[] = "\n        bytes(length)\n\n        Return random bytes.\n\n        Parameters\n        ----------\n        length : int\n            Number of random bytes.\n\n        Returns\n        -------\n        out : str\n            String of length `N`.\n\n        Examples\n        --------\n        >>> np.random.bytes(10)\n        ' eh\\x85\\x022SZ\\xbf\\xa4' #random\n\n        ";__pyx_doc_6mtrand_11RandomState_bytes6038,274065
static PyObject *__pyx_pf_6mtrand_11RandomState_bytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_length) {__pyx_pf_6mtrand_11RandomState_bytes6039,274498
static char __pyx_doc_6mtrand_11RandomState_uniform[] = "\n""        uniform(low=0.0, high=1.0, size=1)\n""\n""        Draw samples from a uniform distribution.\n""\n""        Samples are uniformly distributed over the half-open interval\n""        ``[low, high)`` (includes low, but excludes high).  In other words,\n""        any value within the given interval is equally likely to be drawn\n""        by `uniform`.\n""\n""        Parameters\n""        ----------\n""        low : float, optional\n""            Lower boundary of the output interval.  All values generated will be\n""            greater than or equal to low.  The default value is 0.\n""        high : float\n""            Upper boundary of the output interval.  All values generated will be\n""            less than high.  The default value is 1.0.\n""        size : tuple of ints, int, optional\n""            Shape of output.  If the given size is, for example, (m,n,k),\n""            m*n*k samples are generated.  If no shape is specified, a single sample\n""            is returned.\n""\n""        Returns\n""        -------\n""        out : ndarray\n""            Drawn samples, with shape `size`.\n""\n""        See Also\n""        --------\n""        randint : Discrete uniform distribution, yielding integers.\n""        random_integers : Discrete uniform distribution over the closed interval\n""                          ``[low, high]``.\n""        random_sample : Floats uniformly distributed over ``[0, 1)``.\n""        random : Alias for `random_sample`.\n""        rand : Convenience function that accepts dimensions as input, e.g.,\n""               ``rand(2,2)`` would generate a 2-by-2 array of floats, uniformly\n""               distributed over ``[0, 1)``.\n""\n""        Notes\n""        -----\n""        The probability density function of the uniform distribution is\n""\n""        .. math:: p(x) = \\frac{1}{b - a}\n""\n""        anywhere within the interval ``[a, b)``, and zero elsewhere.\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> s = np.random.uniform(-1,0,1000)\n""\n""        All values are within the given interval:\n""\n""        >>> np.all(s >= -1)\n""        True\n""\n""        >>> np.all(s < 0)\n""        True\n""\n""        Display the histogram of the samples, along with the\n""        probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> count, bins, ignored = plt.hist(s, 15, normed=True)\n""        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_uniform6112,277385
static PyObject *__pyx_pf_6mtrand_11RandomState_uniform(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_uniform6113,280017
static char __pyx_doc_6mtrand_11RandomState_rand[] = "\n        rand(d0, d1, ..., dn)\n\n        Random values in a given shape.\n\n        Create an array of the given shape and propagate it with\n        random samples from a uniform distribution\n        over ``[0, 1)``.\n\n        Parameters\n        ----------\n        d0, d1, ..., dn : int\n            Shape of the output.\n\n        Returns\n        -------\n        out : ndarray, shape ``(d0, d1, ..., dn)``\n            Random values.\n\n        See Also\n        --------\n        random\n\n        Notes\n        -----\n        This is a convenience function. If you want an interface that\n        takes a shape-tuple as the first argument, refer to\n        `random`.\n\n        Examples\n        --------\n        >>> np.random.rand(3,2)\n        array([[ 0.14022471,  0.96360618],  #random\n               [ 0.37601032,  0.25528411],  #random\n               [ 0.49313049,  0.94909878]]) #random\n\n        ";__pyx_doc_6mtrand_11RandomState_rand6372,292189
static PyObject *__pyx_pf_6mtrand_11RandomState_rand(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_rand6373,293168
static char __pyx_doc_6mtrand_11RandomState_randn[] = "\n        randn([d1, ..., dn])\n\n        Return a sample (or samples) from the \"standard normal\" distribution.\n\n        If positive, int_like or int-convertible arguments are provided,\n        `randn` generates an array of shape ``(d1, ..., dn)``, filled\n        with random floats sampled from a univariate \"normal\" (Gaussian)\n        distribution of mean 0 and variance 1 (if any of the :math:`d_i` are\n        floats, they are first converted to integers by truncation). A single\n        float randomly sampled from the distribution is returned if no\n        argument is provided.\n\n        This is a convenience function.  If you want an interface that takes a\n        tuple as the first argument, use `numpy.random.standard_normal` instead.\n\n        Parameters\n        ----------\n        d1, ..., dn : `n` ints, optional\n            The dimensions of the returned array, should be all positive.\n\n        Returns\n        -------\n        Z : ndarray or float\n            A ``(d1, ..., dn)``-shaped array of floating-point samples from\n            the standard normal distribution, or a single such float if\n            no parameters were supplied.\n\n        See Also\n        --------\n        random.standard_normal : Similar, but takes a tuple as its argument.\n\n        Notes\n        -----\n        For random samples from :math:`N(\\mu, \\sigma^2)`, use:\n\n        ``sigma * np.random.randn(...) + mu``\n\n        Examples\n        --------\n        >>> np.random.randn()\n        2.1923875335537315 #random\n\n        Two-by-four array of samples from N(3, 6.25):\n\n        >>> 2.5 * np.random.randn(2, 4) + 3\n        array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],  #random\n               [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]]) #random\n\n        ";__pyx_doc_6mtrand_11RandomState_randn6466,297235
static PyObject *__pyx_pf_6mtrand_11RandomState_randn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_randn6467,299112
static char __pyx_doc_6mtrand_11RandomState_random_integers[] = "\n""        random_integers(low, high=None, size=None)\n""\n""        Return random integers between `low` and `high`, inclusive.\n""\n""        Return random integers from the \"discrete uniform\" distribution in the\n""        closed interval [`low`, `high`].  If `high` is None (the default),\n""        then results are from [1, `low`].\n""\n""        Parameters\n""        ----------\n""        low : int\n""            Lowest (signed) integer to be drawn from the distribution (unless\n""            ``high=None``, in which case this parameter is the *highest* such\n""            integer).\n""        high : int, optional\n""            If provided, the largest (signed) integer to be drawn from the\n""            distribution (see above for behavior if ``high=None``).\n""        size : int or tuple of ints, optional\n""            Output shape. Default is None, in which case a single int is returned.\n""\n""        Returns\n""        -------\n""        out : int or ndarray of ints\n""            `size`-shaped array of random integers from the appropriate\n""            distribution, or a single such random int if `size` not provided.\n""\n""        See Also\n""        --------\n""        random.randint : Similar to `random_integers`, only for the half-open\n""            interval [`low`, `high`), and 0 is the lowest value if `high` is\n""            omitted.\n""\n""        Notes\n""        -----\n""        To sample from N evenly spaced floating-point numbers between a and b,\n""        use::\n""\n""          a + (b - a) * (np.random.random_integers(N) - 1) / (N - 1.)\n""\n""        Examples\n""        --------\n""        >>> np.random.random_integers(5)\n""        4\n""        >>> type(np.random.random_integers(5))\n""        <type 'int'>\n""        >>> np.random.random_integers(5, size=(3.,2.))\n""        array([[5, 4],\n""               [3, 3],\n""               [4, 5]])\n""\n""        Choose five random numbers from the set of five evenly-spaced\n""        numbers between 0 and 2.5, inclusive (*i.e.*, from the set\n""        :math:`{0, 5/8, 10/8, 15/8, 20/8}`):\n""\n""        >>> 2.5 * (np.random.random_integers(5, size=(5,)) - 1) / 4.\n""        array([ 0.625,  1.25 ,  0.625,  0.625,  2.5  ])\n""\n""        Roll two six sided dice 1000 times and sum the results:\n""\n""        >>> d1 = np.random.random_integers(1, 6, 1000)\n""        >>> d2 = np.random.random_integers(1, 6, 1000)\n""        >>> dsums = d1 + d2\n""\n""        Display results as a histogram:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> count, bins, ignored = plt.hist(dsums, 11, normed=True)\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_random_integers6562,303125
static PyObject *__pyx_pf_6mtrand_11RandomState_random_integers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_random_integers6563,305861
static char __pyx_doc_6mtrand_11RandomState_standard_normal[] = "\n        standard_normal(size=None)\n\n        Returns samples from a Standard Normal distribution (mean=0, stdev=1).\n\n        Parameters\n        ----------\n        size : int or tuple of ints, optional\n            Output shape. Default is None, in which case a single value is\n            returned.\n\n        Returns\n        -------\n        out : float or ndarray\n            Drawn samples.\n\n        Examples\n        --------\n        >>> s = np.random.standard_normal(8000)\n        >>> s\n        array([ 0.6888893 ,  0.78096262, -0.89086505, ...,  0.49876311, #random\n               -0.38672696, -0.4685006 ])                               #random\n        >>> s.shape\n        (8000,)\n        >>> s = np.random.standard_normal(size=(3, 4, 2))\n        >>> s.shape\n        (3, 4, 2)\n\n        ";__pyx_doc_6mtrand_11RandomState_standard_normal6724,312119
static PyObject *__pyx_pf_6mtrand_11RandomState_standard_normal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_standard_normal6725,313002
static char __pyx_doc_6mtrand_11RandomState_normal[] = "\n""        normal(loc=0.0, scale=1.0, size=None)\n""\n""        Draw random samples from a normal (Gaussian) distribution.\n""\n""        The probability density function of the normal distribution, first\n""        derived by De Moivre and 200 years later by both Gauss and Laplace\n""        independently [2]_, is often called the bell curve because of\n""        its characteristic shape (see the example below).\n""\n""        The normal distributions occurs often in nature.  For example, it\n""        describes the commonly occurring distribution of samples influenced\n""        by a large number of tiny, random disturbances, each with its own\n""        unique distribution [2]_.\n""\n""        Parameters\n""        ----------\n""        loc : float\n""            Mean (\"centre\") of the distribution.\n""        scale : float\n""            Standard deviation (spread or \"width\") of the distribution.\n""        size : tuple of ints\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.norm : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Gaussian distribution is\n""\n""        .. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n""                         e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n""\n""        where :math:`\\mu` is the mean and :math:`\\sigma` the standard deviation.\n""        The square of the standard deviation, :math:`\\sigma^2`, is called the\n""        variance.\n""\n""        The function has its peak at the mean, and its \"spread\" increases with\n""        the standard deviation (the function reaches 0.607 times its maximum at\n""        :math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n""        `numpy.random.normal` is more likely to return samples lying close to the\n""        mean, rather than those far away.\n""\n""        References\n""        ----------\n""        .. [1] Wikipedia, \"Normal distribution\",\n""               http://en.wikipedia.org/wiki/Normal_distribution\n""        .. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability, Random\n""               Variables and Random Signal Principles\", 4th ed., 2001,\n""               pp. 51, 51, 125.\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> mu, sigma = 0, 0.1 # mean and standard deviation\n""        >>> s = np.random.normal(mu, sigma, 1000)\n""\n""        Verify the mean and the variance:\n""\n""        >>> abs(mu - np.mean(s)) < 0.01\n""        True\n""\n""        >>> abs(sigma - np.std(s, ddof=1)) < 0.01\n""        True\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> count, bins, ignored = plt.hist(s, 30, normed=True)\n""        >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n""        ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n""        ...          linewidth=2, color='r')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_normal6802,316176
static PyObject *__pyx_pf_6mtrand_11RandomState_normal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_normal6803,319539
static char __pyx_doc_6mtrand_11RandomState_beta[] = "\n        beta(a, b, size=None)\n\n        The Beta distribution over ``[0, 1]``.\n\n        The Beta distribution is a special case of the Dirichlet distribution,\n        and is related to the Gamma distribution.  It has the probability\n        distribution function\n\n        .. math:: f(x; a,b) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}\n                                                         (1 - x)^{\\beta - 1},\n\n        where the normalisation, B, is the beta function,\n\n        .. math:: B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}\n                                     (1 - t)^{\\beta - 1} dt.\n\n        It is often seen in Bayesian inference and order statistics.\n\n        Parameters\n        ----------\n        a : float\n            Alpha, non-negative.\n        b : float\n            Beta, non-negative.\n        size : tuple of ints, optional\n            The number of samples to draw.  The ouput is packed according to\n            the size given.\n\n        Returns\n        -------\n        out : ndarray\n            Array of the given shape, containing values drawn from a\n            Beta distribution.\n\n        ";__pyx_doc_6mtrand_11RandomState_beta7103,333763
static PyObject *__pyx_pf_6mtrand_11RandomState_beta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_beta7104,334979
static char __pyx_doc_6mtrand_11RandomState_exponential[] = "\n        exponential(scale=1.0, size=None)\n\n        Exponential distribution.\n\n        Its probability density function is\n\n        .. math:: f(x; \\frac{1}{\\beta}) = \\frac{1}{\\beta} \\exp(-\\frac{x}{\\beta}),\n\n        for ``x > 0`` and 0 elsewhere. :math:`\\beta` is the scale parameter,\n        which is the inverse of the rate parameter :math:`\\lambda = 1/\\beta`.\n        The rate parameter is an alternative, widely used parameterization\n        of the exponential distribution [3]_.\n\n        The exponential distribution is a continuous analogue of the\n        geometric distribution.  It describes many common situations, such as\n        the size of raindrops measured over many rainstorms [1]_, or the time\n        between page requests to Wikipedia [2]_.\n\n        Parameters\n        ----------\n        scale : float\n            The scale parameter, :math:`\\beta = 1/\\lambda`.\n        size : tuple of ints\n            Number of samples to draw.  The output is shaped\n            according to `size`.\n\n        References\n        ----------\n        .. [1] Peyton Z. Peebles Jr., \"Probability, Random Variables and\n               Random Signal Principles\", 4th ed, 2001, p. 57.\n        .. [2] \"Poisson Process\", Wikipedia,\n               http://en.wikipedia.org/wiki/Poisson_process\n        .. [3] \"Exponential Distribution, Wikipedia,\n               http://en.wikipedia.org/wiki/Exponential_distribution\n\n        ";__pyx_doc_6mtrand_11RandomState_exponential7498,354301
static PyObject *__pyx_pf_6mtrand_11RandomState_exponential(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_exponential7499,355831
static char __pyx_doc_6mtrand_11RandomState_standard_exponential[] = "\n        standard_exponential(size=None)\n\n        Draw samples from the standard exponential distribution.\n\n        `standard_exponential` is identical to the exponential distribution\n        with a scale parameter of 1.\n\n        Parameters\n        ----------\n        size : int or tuple of ints\n            Shape of the output.\n\n        Returns\n        -------\n        out : float or ndarray\n            Drawn samples.\n\n        Examples\n        --------\n        Output a 3x8000 array:\n\n        >>> n = np.random.standard_exponential((3, 8000))\n\n        ";__pyx_doc_6mtrand_11RandomState_standard_exponential7761,368402
static PyObject *__pyx_pf_6mtrand_11RandomState_standard_exponential(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_standard_exponential7762,369053
static char __pyx_doc_6mtrand_11RandomState_standard_gamma[] = "\n""        standard_gamma(shape, size=None)\n""\n""        Draw samples from a Standard Gamma distribution.\n""\n""        Samples are drawn from a Gamma distribution with specified parameters,\n""        shape (sometimes designated \"k\") and scale=1.\n""\n""        Parameters\n""        ----------\n""        shape : float\n""            Parameter, should be > 0.\n""        size : int or tuple of ints\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : ndarray or scalar\n""            The drawn samples.\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.gamma : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Gamma distribution is\n""\n""        .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n""\n""        where :math:`k` is the shape and :math:`\\theta` the scale,\n""        and :math:`\\Gamma` is the Gamma function.\n""\n""        The Gamma distribution is often used to model the times to failure of\n""        electronic components, and arises naturally in processes for which the\n""        waiting times between Poisson distributed events are relevant.\n""\n""        References\n""        ----------\n""        .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n""               Wolfram Web Resource.\n""               http://mathworld.wolfram.com/GammaDistribution.html\n""        .. [2] Wikipedia, \"Gamma-distribution\",\n""               http://en.wikipedia.org/wiki/Gamma-distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> shape, scale = 2., 1. # mean and width\n""        >>> s = np.random.standard_gamma(shape, 1000000)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> import scipy.special as sps\n""        >>> count, bins, ignored = plt.hist(s, 50, normed=True)\n""        >>> y = bins**(shape-1) * ((np.exp(-bins/scale))/ \\\n""        ...                       (sps.gamma(shape) * scale**shape))\n""        >>> plt.plot(bins, y, linewidth=2, color='r')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_standard_gamma7839,372295
static PyObject *__pyx_pf_6mtrand_11RandomState_standard_gamma(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_standard_gamma7840,374821
static char __pyx_doc_6mtrand_11RandomState_gamma[] = "\n""        gamma(shape, scale=1.0, size=None)\n""\n""        Draw samples from a Gamma distribution.\n""\n""        Samples are drawn from a Gamma distribution with specified parameters,\n""        `shape` (sometimes designated \"k\") and `scale` (sometimes designated\n""        \"theta\"), where both parameters are > 0.\n""\n""        Parameters\n""        ----------\n""        shape : scalar > 0\n""            The shape of the gamma distribution.\n""        scale : scalar > 0, optional\n""            The scale of the gamma distribution.  Default is equal to 1.\n""        size : shape_tuple, optional\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        out : ndarray, float\n""            Returns one sample unless `size` parameter is specified.\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.gamma : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Gamma distribution is\n""\n""        .. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n""\n""        where :math:`k` is the shape and :math:`\\theta` the scale,\n""        and :math:`\\Gamma` is the Gamma function.\n""\n""        The Gamma distribution is often used to model the times to failure of\n""        electronic components, and arises naturally in processes for which the\n""        waiting times between Poisson distributed events are relevant.\n""\n""        References\n""        ----------\n""        .. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n""               Wolfram Web Resource.\n""               http://mathworld.wolfram.com/GammaDistribution.html\n""        .. [2] Wikipedia, \"Gamma-distribution\",\n""               http://en.wikipedia.org/wiki/Gamma-distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> shape, scale = 2., 2. # mean and dispersion\n""        >>> s = np.random.gamma(shape, scale, 1000)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> import scipy.special as sps\n""        >>> count, bins, ignored = plt.hist(s, 50, normed=True)\n""        >>> y = bins**(shape-1)*(np.exp(-bins/scale) /\n""        ...                      (sps.gamma(shape)*scale**shape))\n""        >>> plt.plot(bins, y, linewidth=2, color='r')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_gamma8099,387415
static PyObject *__pyx_pf_6mtrand_11RandomState_gamma(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_gamma8100,390157
static char __pyx_doc_6mtrand_11RandomState_f[] = "\n""        f(dfnum, dfden, size=None)\n""\n""        Draw samples from a F distribution.\n""\n""        Samples are drawn from an F distribution with specified parameters,\n""        `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of freedom\n""        in denominator), where both parameters should be greater than zero.\n""\n""        The random variate of the F distribution (also known as the\n""        Fisher distribution) is a continuous probability distribution\n""        that arises in ANOVA tests, and is the ratio of two chi-square\n""        variates.\n""\n""        Parameters\n""        ----------\n""        dfnum : float\n""            Degrees of freedom in numerator. Should be greater than zero.\n""        dfden : float\n""            Degrees of freedom in denominator. Should be greater than zero.\n""        size : {tuple, int}, optional\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``,\n""            then ``m * n * k`` samples are drawn. By default only one sample\n""            is returned.\n""\n""        Returns\n""        -------\n""        samples : {ndarray, scalar}\n""            Samples from the Fisher distribution.\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.f : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""\n""        The F statistic is used to compare in-group variances to between-group\n""        variances. Calculating the distribution depends on the sampling, and\n""        so it is a function of the respective degrees of freedom in the\n""        problem.  The variable `dfnum` is the number of samples minus one, the\n""        between-groups degrees of freedom, while `dfden` is the within-groups\n""        degrees of freedom, the sum of the number of samples in each group\n""        minus the number of groups.\n""\n""        References\n""        ----------\n""        .. [1] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n""               Fifth Edition, 2002.\n""        .. [2] Wikipedia, \"F-distribution\",\n""               http://en.wikipedia.org/wiki/F-distribution\n""\n""        Examples\n""        --------\n""        An example from Glantz[1], pp 47-40.\n""        Two groups, children of diabetics (25 people) and children from people\n""        without diabetes (25 controls). Fasting blood glucose was measured,\n""        case group had a mean value of 86.1, controls had a mean value of\n""        82.2. Standard deviations were 2.09 and 2.49 respectively. Are these\n""        data consistent with the null hypothesis that the parents diabetic\n""        status does not affect their children's blood glucose levels?\n""        Calculating the F statistic from the data gives a value of 36.01.\n""\n""        Draw samples from the distribution:\n""\n""        >>> dfnum = 1. # between group degrees of freedom\n""        >>> dfden = 48. # within groups degrees of freedom\n""        >>> s = np.random.f(dfnum, dfden, 1000)\n""\n""        The lower bound for the top 1% of the samples is :\n""\n""        >>> sort(s)[-10]\n""        7.61988120985\n""\n""        So there is about a 1% chance that the F statistic will exceed 7.62,\n""        the measured value is 36, so the null hypothesis is rejected at the 1%\n""        level.\n""\n""        ";__pyx_doc_6mtrand_11RandomState_f8497,410388
static PyObject *__pyx_pf_6mtrand_11RandomState_f(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_f8498,413839
static char __pyx_doc_6mtrand_11RandomState_noncentral_f[] = "\n""        noncentral_f(dfnum, dfden, nonc, size=None)\n""\n""        Draw samples from the noncentral F distribution.\n""\n""        Samples are drawn from an F distribution with specified parameters,\n""        `dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\n""        freedom in denominator), where both parameters > 1.\n""        `nonc` is the non-centrality parameter.\n""\n""        Parameters\n""        ----------\n""        dfnum : int\n""            Parameter, should be > 1.\n""        dfden : int\n""            Parameter, should be > 1.\n""        nonc : float\n""            Parameter, should be >= 0.\n""        size : int or tuple of ints\n""            Output shape. If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : scalar or ndarray\n""            Drawn samples.\n""\n""        Notes\n""        -----\n""        When calculating the power of an experiment (power = probability of\n""        rejecting the null hypothesis when a specific alternative is true) the\n""        non-central F statistic becomes important.  When the null hypothesis is\n""        true, the F statistic follows a central F distribution. When the null\n""        hypothesis is not true, then it follows a non-central F statistic.\n""\n""        References\n""        ----------\n""        Weisstein, Eric W. \"Noncentral F-Distribution.\" From MathWorld--A Wolfram\n""        Web Resource.  http://mathworld.wolfram.com/NoncentralF-Distribution.html\n""\n""        Wikipedia, \"Noncentral F distribution\",\n""        http://en.wikipedia.org/wiki/Noncentral_F-distribution\n""\n""        Examples\n""        --------\n""        In a study, testing for a specific alternative to the null hypothesis\n""        requires use of the Noncentral F distribution. We need to calculate the\n""        area in the tail of the distribution that exceeds the value of the F\n""        distribution for the null hypothesis.  We'll plot the two probability\n""        distributions for comparison.\n""\n""        >>> dfnum = 3 # between group deg of freedom\n""        >>> dfden = 20 # within groups degrees of freedom\n""        >>> nonc = 3.0\n""        >>> nc_vals = np.random.noncentral_f(dfnum, dfden, nonc, 1000000)\n""        >>> NF = np.histogram(nc_vals, bins=50, normed=True)\n""        >>> c_vals = np.random.f(dfnum, dfden, 1000000)\n""        >>> F = np.histogram(c_vals, bins=50, normed=True)\n""        >>> plt.plot(F[1][1:], F[0])\n""        >>> plt.plot(NF[1][1:], NF[0])\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_noncentral_f8896,434028
static PyObject *__pyx_pf_6mtrand_11RandomState_noncentral_f(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_noncentral_f8897,436731
static char __pyx_doc_6mtrand_11RandomState_chisquare[] = "\n        chisquare(df, size=None)\n\n        Draw samples from a chi-square distribution.\n\n        When `df` independent random variables, each with standard\n        normal distributions (mean 0, variance 1), are squared and summed,\n        the resulting distribution is chi-square (see Notes).  This\n        distribution is often used in hypothesis testing.\n\n        Parameters\n        ----------\n        df : int\n             Number of degrees of freedom.\n        size : tuple of ints, int, optional\n             Size of the returned array.  By default, a scalar is\n             returned.\n\n        Returns\n        -------\n        output : ndarray\n            Samples drawn from the distribution, packed in a `size`-shaped\n            array.\n\n        Raises\n        ------\n        ValueError\n            When `df` <= 0 or when an inappropriate `size` (e.g. ``size=-1``)\n            is given.\n\n        Notes\n        -----\n        The variable obtained by summing the squares of `df` independent,\n        standard normally distributed random variables:\n\n        .. math:: Q = \\sum_{i=0}^{\\mathtt{df}} X^2_i\n\n        is chi-square distributed, denoted\n\n        .. math:: Q \\sim \\chi^2_k.\n\n        The probability density function of the chi-squared distribution is\n\n        .. math:: p(x) = \\frac{(1/2)^{k/2}}{\\Gamma(k/2)}\n                         x^{k/2 - 1} e^{-x/2},\n\n        where :math:`\\Gamma` is the gamma function,\n\n        .. math:: \\Gamma(x) = \\int_0^{-\\infty} t^{x - 1} e^{-t} dt.\n\n        References\n        ----------\n        .. [1] NIST/SEMATECH e-Handbook of Statistical Methods,\n               http://www.itl.nist.gov/div898/handbook/eda/section3/eda3666.htm\n        .. [2] Wikipedia, \"Chi-square distribution\",\n               http://en.wikipedia.org/wiki/Chi-square_distribution\n\n        Examples\n        --------\n        >>> np.random.chisquare(2,4)\n        array([ 1.89920014,  9.00867716,  3.13710533,  5.62318272])\n\n        ";__pyx_doc_6mtrand_11RandomState_chisquare9448,465101
static PyObject *__pyx_pf_6mtrand_11RandomState_chisquare(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_chisquare9449,467178
static char __pyx_doc_6mtrand_11RandomState_noncentral_chisquare[] = "\n""        noncentral_chisquare(df, nonc, size=None)\n""\n""        Draw samples from a noncentral chi-square distribution.\n""\n""        The noncentral :math:`\\chi^2` distribution is a generalisation of\n""        the :math:`\\chi^2` distribution.\n""\n""        Parameters\n""        ----------\n""        df : int\n""            Degrees of freedom, should be >= 1.\n""        nonc : float\n""            Non-centrality, should be > 0.\n""        size : int or tuple of ints\n""            Shape of the output.\n""\n""        Notes\n""        -----\n""        The probability density function for the noncentral Chi-square distribution\n""        is\n""\n""        .. math:: P(x;df,nonc) = \\sum^{\\infty}_{i=0}\n""                               \\frac{e^{-nonc/2}(nonc/2)^{i}}{i!}P_{Y_{df+2i}}(x),\n""\n""        where :math:`Y_{q}` is the Chi-square with q degrees of freedom.\n""\n""        In Delhi (2007), it is noted that the noncentral chi-square is useful in\n""        bombing and coverage problems, the probability of killing the point target\n""        given by the noncentral chi-squared distribution.\n""\n""        References\n""        ----------\n""        .. [1] Delhi, M.S. Holla, \"On a noncentral chi-square distribution in the\n""               analysis of weapon systems effectiveness\", Metrika, Volume 15,\n""               Number 1 / December, 1970.\n""        .. [2] Wikipedia, \"Noncentral chi-square distribution\"\n""               http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution\n""\n""        Examples\n""        --------\n""        Draw values from the distribution and plot the histogram\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n""        ...                   bins=200, normed=True)\n""        >>> plt.show()\n""\n""        Draw values from a noncentral chisquare with very small noncentrality,\n""        and compare to a chisquare.\n""\n""        >>> plt.figure()\n""        >>> values = plt.hist(np.random.noncentral_chisquare(3, .0000001, 100000),\n""        ...                   bins=np.arange(0., 25, .1), normed=True)\n""        >>> values2 = plt.hist(np.random.chisquare(3, 100000),\n""        ...                    bins=np.arange(0., 25, .1), normed=True)\n""        >>> plt.plot(values[1][0:-1], values[0]-values2[0], 'ob')\n""        >>> plt.show()\n""\n""        Demonstrate how large values of non-centrality lead to a more symmetric\n""        distribution.\n""\n""        >>> plt.figure()\n""        >>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n""        ...                   bins=200, normed=True)\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_noncentral_chisquare9708,479471
static PyObject *__pyx_pf_6mtrand_11RandomState_noncentral_chisquare(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_noncentral_chisquare9709,482273
static char __pyx_doc_6mtrand_11RandomState_standard_cauchy[] = "\n""        standard_cauchy(size=None)\n""\n""        Standard Cauchy distribution with mode = 0.\n""\n""        Also known as the Lorentz distribution.\n""\n""        Parameters\n""        ----------\n""        size : int or tuple of ints\n""            Shape of the output.\n""\n""        Returns\n""        -------\n""        samples : ndarray or scalar\n""            The drawn samples.\n""\n""        Notes\n""        -----\n""        The probability density function for the full Cauchy distribution is\n""\n""        .. math:: P(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\bigl[ 1+\n""                  (\\frac{x-x_0}{\\gamma})^2 \\bigr] }\n""\n""        and the Standard Cauchy distribution just sets :math:`x_0=0` and\n""        :math:`\\gamma=1`\n""\n""        The Cauchy distribution arises in the solution to the driven harmonic\n""        oscillator problem, and also describes spectral line broadening. It\n""        also describes the distribution of values at which a line tilted at\n""        a random angle will cut the x axis.\n""\n""        When studying hypothesis tests that assume normality, seeing how the\n""        tests perform on data from a Cauchy distribution is a good indicator of\n""        their sensitivity to a heavy-tailed distribution, since the Cauchy looks\n""        very much like a Gaussian distribution, but with heavier tails.\n""\n""        References\n""        ----------\n""        ..[1] NIST/SEMATECH e-Handbook of Statistical Methods, \"Cauchy\n""              Distribution\",\n""              http://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm\n""        ..[2] Weisstein, Eric W. \"Cauchy Distribution.\" From MathWorld--A\n""              Wolfram Web Resource.\n""              http://mathworld.wolfram.com/CauchyDistribution.html\n""        ..[3] Wikipedia, \"Cauchy distribution\"\n""              http://en.wikipedia.org/wiki/Cauchy_distribution\n""\n""        Examples\n""        --------\n""        Draw samples and plot the distribution:\n""\n""        >>> s = np.random.standard_cauchy(1000000)\n""        >>> s = s[(s>-25) & (s<25)]  # truncate distribution so it plots well\n""        >>> plt.hist(s, bins=100)\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_standard_cauchy10123,503062
static PyObject *__pyx_pf_6mtrand_11RandomState_standard_cauchy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_standard_cauchy10124,505358
static char __pyx_doc_6mtrand_11RandomState_standard_t[] = "\n""        standard_t(df, size=None)\n""\n""        Standard Student's t distribution with df degrees of freedom.\n""\n""        A special case of the hyperbolic distribution.\n""        As `df` gets large, the result resembles that of the standard normal\n""        distribution (`standard_normal`).\n""\n""        Parameters\n""        ----------\n""        df : int\n""            Degrees of freedom, should be > 0.\n""        size : int or tuple of ints, optional\n""            Output shape. Default is None, in which case a single value is\n""            returned.\n""\n""        Returns\n""        -------\n""        samples : ndarray or scalar\n""            Drawn samples.\n""\n""        Notes\n""        -----\n""        The probability density function for the t distribution is\n""\n""        .. math:: P(x, df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{\\pi df}\n""                  \\Gamma(\\frac{df}{2})}\\Bigl( 1+\\frac{x^2}{df} \\Bigr)^{-(df+1)/2}\n""\n""        The t test is based on an assumption that the data come from a Normal\n""        distribution. The t test provides a way to test whether the sample mean\n""        (that is the mean calculated from the data) is a good estimate of the true\n""        mean.\n""\n""        The derivation of the t-distribution was forst published in 1908 by William\n""        Gisset while working for the Guinness Brewery in Dublin. Due to proprietary\n""        issues, he had to publish under a pseudonym, and so he used the name\n""        Student.\n""\n""        References\n""        ----------\n""        .. [1] Dalgaard, Peter, \"Introductory Statistics With R\",\n""               Springer, 2002.\n""        .. [2] Wikipedia, \"Student's t-distribution\"\n""               http://en.wikipedia.org/wiki/Student's_t-distribution\n""\n""        Examples\n""        --------\n""        From Dalgaard page 83 [1]_, suppose the daily energy intake for 11\n""        women in Kj is:\n""\n""        >>> intake = np.array([5260., 5470, 5640, 6180, 6390, 6515, 6805, 7515, \\\n""        ...                    7515, 8230, 8770])\n""\n""        Does their energy intake deviate systematically from the recommended\n""        value of 7725 kJ?\n""\n""        We have 10 degrees of freedom, so is the sample mean within 95% of the\n""        recommended value?\n""\n""        >>> s = np.random.standard_t(10, size=100000)\n""        >>> np.mean(intake)\n""        6753.636363636364\n""        >>> intake.std(ddof=1)\n""        1142.1232221373727\n""\n""        Calculate the t statistic, setting the ddof parameter to the unbiased\n""        value so the divisor in the standard deviation will be degrees of\n""        freedom, N-1.\n""\n""        >>> t = (np.mean(intake)-7725)/(intake.std(ddof=1)/np.sqrt(len(intake)))\n""        >>> import matplotlib.pyplot as plt\n""        >>> h = plt.hist(s, bins=100, normed=True)\n""\n""        For a one-sided t-test, how far out in the distribution does the t\n""        statistic appear?\n""\n""        >>> >>> np.sum(s<t) / float(len(s))\n""        0.0090699999999999999  #random\n""\n""        So the p-value is about 0.009, which says the null hypothesis has a\n""        probability of about 99% of being true.\n""\n""        ";__pyx_doc_6mtrand_11RandomState_standard_t10201,508530
static PyObject *__pyx_pf_6mtrand_11RandomState_standard_t(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_standard_t10202,511826
static char __pyx_doc_6mtrand_11RandomState_vonmises[] = "\n""        vonmises(mu=0.0, kappa=1.0, size=None)\n""\n""        Draw samples from a von Mises distribution.\n""\n""        Samples are drawn from a von Mises distribution with specified mode (mu)\n""        and dispersion (kappa), on the interval [-pi, pi].\n""\n""        The von Mises distribution (also known as the circular normal\n""        distribution) is a continuous probability distribution on the circle. It\n""        may be thought of as the circular analogue of the normal distribution.\n""\n""        Parameters\n""        ----------\n""        mu : float\n""            Mode (\"center\") of the distribution.\n""        kappa : float, >= 0.\n""            Dispersion of the distribution.\n""        size : {tuple, int}\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : {ndarray, scalar}\n""            The returned samples live on the unit circle [-\\pi, \\pi].\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.vonmises : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the von Mises distribution is\n""\n""        .. math:: p(x) = \\frac{e^{\\kappa cos(x-\\mu)}}{2\\pi I_0(\\kappa)},\n""\n""        where :math:`\\mu` is the mode and :math:`\\kappa` the dispersion,\n""        and :math:`I_0(\\kappa)` is the modified Bessel function of order 0.\n""\n""        The von Mises, named for Richard Edler von Mises, born in\n""        Austria-Hungary, in what is now the Ukraine. He fled to the United\n""        States in 1939 and became a professor at Harvard. He worked in\n""        probability theory, aerodynamics, fluid mechanics, and philosophy of\n""        science.\n""\n""        References\n""        ----------\n""        .. [1] Abramowitz, M. and Stegun, I. A. (ed.), Handbook of Mathematical\n""               Functions, National Bureau of Standards, 1964; reprinted Dover\n""               Publications, 1965.\n""        .. [2] von Mises, Richard, 1964, Mathematical Theory of Probability\n""               and Statistics (New York: Academic Press).\n""        .. [3] Wikipedia, \"Von Mises distribution\",\n""               http://en.wikipedia.org/wiki/Von_Mises_distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> mu, kappa = 0.0, 4.0 # mean and dispersion\n""        >>> s = np.random.vonmises(mu, kappa, 1000)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> import scipy.special as sps\n""        >>> count, bins, ignored = plt.hist(s, 50, normed=True)\n""        >>> x = np.arange(-np.pi, np.pi, 2*np.pi/50.)\n""        >>> y = -np.exp(kappa*np.cos(x-mu))/(2*np.pi*sps.jn(0,kappa))\n""        >>> plt.plot(x, y/max(y), linewidth=2, color='r')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_vonmises10461,524102
static PyObject *__pyx_pf_6mtrand_11RandomState_vonmises(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_vonmises10462,527276
static char __pyx_doc_6mtrand_11RandomState_pareto[] = "\n""        pareto(a, size=None)\n""\n""        Draw samples from a Pareto distribution with specified shape.\n""\n""        This is a simplified version of the Generalized Pareto distribution\n""        (available in SciPy), with the scale set to one and the location set to\n""        zero. Most authors default the location to one.\n""\n""        The Pareto distribution must be greater than zero, and is unbounded above.\n""        It is also known as the \"80-20 rule\".  In this distribution, 80 percent of\n""        the weights are in the lowest 20 percent of the range, while the other 20\n""        percent fill the remaining 80 percent of the range.\n""\n""        Parameters\n""        ----------\n""        shape : float, > 0.\n""            Shape of the distribution.\n""        size : tuple of ints\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.genpareto.pdf : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Pareto distribution is\n""\n""        .. math:: p(x) = \\frac{am^a}{x^{a+1}}\n""\n""        where :math:`a` is the shape and :math:`m` the location\n""\n""        The Pareto distribution, named after the Italian economist Vilfredo Pareto,\n""        is a power law probability distribution useful in many real world problems.\n""        Outside the field of economics it is generally referred to as the Bradford\n""        distribution. Pareto developed the distribution to describe the\n""        distribution of wealth in an economy.  It has also found use in insurance,\n""        web page access statistics, oil field sizes, and many other problems,\n""        including the download frequency for projects in Sourceforge [1].  It is\n""        one of the so-called \"fat-tailed\" distributions.\n""\n""\n""        References\n""        ----------\n""        .. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n""               Sourceforge projects.\n""        .. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n""        .. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n""               Values, Birkhauser Verlag, Basel, pp 23-30.\n""        .. [4] Wikipedia, \"Pareto distribution\",\n""               http://en.wikipedia.org/wiki/Pareto_distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> a, m = 3., 1. # shape and mode\n""        >>> s = np.random.pareto(a, 1000) + m\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> count, bins, ignored = plt.hist(s, 100, normed=True, align='center')\n""        >>> fit = a*m**a/bins**(a+1)\n""        >>> plt.plot(bins, max(count)*fit/max(fit),linewidth=2, color='r')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_pareto10762,541612
static PyObject *__pyx_pf_6mtrand_11RandomState_pareto(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_pareto10763,544789
static char __pyx_doc_6mtrand_11RandomState_weibull[] = "\n""        weibull(a, size=None)\n""\n""        Weibull distribution.\n""\n""        Draw samples from a 1-parameter Weibull distribution with the given\n""        shape parameter.\n""\n""        .. math:: X = (-ln(U))^{1/a}\n""\n""        Here, U is drawn from the uniform distribution over (0,1].\n""\n""        The more common 2-parameter Weibull, including a scale parameter\n""        :math:`\\lambda` is just :math:`X = \\lambda(-ln(U))^{1/a}`.\n""\n""        The Weibull (or Type III asymptotic extreme value distribution for smallest\n""        values, SEV Type III, or Rosin-Rammler distribution) is one of a class of\n""        Generalized Extreme Value (GEV) distributions used in modeling extreme\n""        value problems.  This class includes the Gumbel and Frechet distributions.\n""\n""        Parameters\n""        ----------\n""        a : float\n""            Shape of the distribution.\n""        size : tuple of ints\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.weibull : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        gumbel, scipy.stats.distributions.genextreme\n""\n""        Notes\n""        -----\n""        The probability density for the Weibull distribution is\n""\n""        .. math:: p(x) = \\frac{a}\n""                         {\\lambda}(\\frac{x}{\\lambda})^{a-1}e^{-(x/\\lambda)^a},\n""\n""        where :math:`a` is the shape and :math:`\\lambda` the scale.\n""\n""        The function has its peak (the mode) at\n""        :math:`\\lambda(\\frac{a-1}{a})^{1/a}`.\n""\n""        When ``a = 1``, the Weibull distribution reduces to the exponential\n""        distribution.\n""\n""        References\n""        ----------\n""        .. [1] Waloddi Weibull, Professor, Royal Technical University, Stockholm,\n""               1939 \"A Statistical Theory Of The Strength Of Materials\",\n""               Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939,\n""               Generalstabens Litografiska Anstalts Forlag, Stockholm.\n""        .. [2] Waloddi Weibull, 1951 \"A Statistical Distribution Function of Wide\n""               Applicability\",  Journal Of Applied Mechanics ASME Paper.\n""        .. [3] Wikipedia, \"Weibull distribution\",\n""               http://en.wikipedia.org/wiki/Weibull_distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> a = 5. # shape\n""        >>> s = np.random.weibull(a, 1000)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> x = np.arange(1,100.)/50.\n""        >>> def weib(x,n,a):\n""        ...     return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)\n""\n""        >>> count, bins, ignored = plt.hist(np.random.weibull(5.,1000))\n""        >>> x = np.arange(1,100.)/50.\n""        >>> scale = count.max()/weib(x, 1., 5.).max()\n""        >>> plt.plot(x, weib(x, 1., 5.)*scale)\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_weibull11022,556899
static PyObject *__pyx_pf_6mtrand_11RandomState_weibull(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_weibull11023,560185
static char __pyx_doc_6mtrand_11RandomState_power[] = "\n""        power(a, size=None)\n""\n""        Draws samples in [0, 1] from a power distribution with positive\n""        exponent a - 1.\n""\n""        Also known as the power function distribution.\n""\n""        Parameters\n""        ----------\n""        a : float\n""            parameter, > 0\n""        size : tuple of ints\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""                    ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : {ndarray, scalar}\n""            The returned samples lie in [0, 1].\n""\n""        Raises\n""        ------\n""        ValueError\n""            If a<1.\n""\n""        Notes\n""        -----\n""        The probability density function is\n""\n""        .. math:: P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0.\n""\n""        The power function distribution is just the inverse of the Pareto\n""        distribution. It may also be seen as a special case of the Beta\n""        distribution.\n""\n""        It is used, for example, in modeling the over-reporting of insurance\n""        claims.\n""\n""        References\n""        ----------\n""        .. [1] Christian Kleiber, Samuel Kotz, \"Statistical size distributions\n""               in economics and actuarial sciences\", Wiley, 2003.\n""        .. [2] Heckert, N. A. and Filliben, James J. (2003). NIST Handbook 148:\n""               Dataplot Reference Manual, Volume 2: Let Subcommands and Library\n""               Functions\", National Institute of Standards and Technology Handbook\n""               Series, June 2003.\n""               http://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> a = 5. # shape\n""        >>> samples = 1000\n""        >>> s = np.random.power(a, samples)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> count, bins, ignored = plt.hist(s, bins=30)\n""        >>> x = np.linspace(0, 1, 100)\n""        >>> y = a*x**(a-1.)\n""        >>> normed_y = samples*np.diff(bins)[0]*y\n""        >>> plt.plot(x, normed_y)\n""        >>> plt.show()\n""\n""        Compare the power function distribution to the inverse of the Pareto.\n""\n""        >>> from scipy import stats\n""        >>> rvs = np.random.power(5, 1000000)\n""        >>> rvsp = np.random.pareto(5, 1000000)\n""        >>> xx = np.linspace(0,1,100)\n""        >>> powpdf = stats.powerlaw.pdf(xx,5)\n""\n""        >>> plt.figure()\n""        >>> plt.hist(rvs, bins=50, normed=True)\n""        >>> plt.plot(xx,powpdf,'r-')\n""        >>> plt.title('np.random.power(5)')\n""\n""        >>> plt.figure()\n""        >>> plt.hist(1./(1.+rvsp), bins=50, normed=True)\n""        >>> plt.plot(xx,powpdf,'r-')\n""        >>> plt.title('inverse of 1 + np.random.pareto(5)')\n""\n""        >>> plt.figure()\n""        >>> plt.hist(1./(1.+rvsp), bins=50, normed=True)\n""        >>> plt.plot(xx,powpdf,'r-')\n""        >>> plt.title('inverse of stats.pareto(5)')\n""\n""        ";__pyx_doc_6mtrand_11RandomState_power11282,572303
static PyObject *__pyx_pf_6mtrand_11RandomState_power(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_power11283,575561
static char __pyx_doc_6mtrand_11RandomState_laplace[] = "\n""        laplace(loc=0.0, scale=1.0, size=None)\n""\n""        Draw samples from the Laplace or double exponential distribution with\n""        specified location (or mean) and scale (decay).\n""\n""        The Laplace distribution is similar to the Gaussian/normal distribution,\n""        but is sharper at the peak and has fatter tails. It represents the\n""        difference between two independent, identically distributed exponential\n""        random variables.\n""\n""        Parameters\n""        ----------\n""        loc : float\n""            The position, :math:`\\mu`, of the distribution peak.\n""        scale : float\n""            :math:`\\lambda`, the exponential decay.\n""\n""        Notes\n""        -----\n""        It has the probability density function\n""\n""        .. math:: f(x; \\mu, \\lambda) = \\frac{1}{2\\lambda}\n""                                       \\exp\\left(-\\frac{|x - \\mu|}{\\lambda}\\right).\n""\n""        The first law of Laplace, from 1774, states that the frequency of an error\n""        can be expressed as an exponential function of the absolute magnitude of\n""        the error, which leads to the Laplace distribution. For many problems in\n""        Economics and Health sciences, this distribution seems to model the data\n""        better than the standard Gaussian distribution\n""\n""\n""        References\n""        ----------\n""        .. [1] Abramowitz, M. and Stegun, I. A. (Eds.). Handbook of Mathematical\n""               Functions with Formulas, Graphs, and Mathematical Tables, 9th\n""               printing.  New York: Dover, 1972.\n""\n""        .. [2] The Laplace distribution and generalizations\n""               By Samuel Kotz, Tomasz J. Kozubowski, Krzysztof Podgorski,\n""               Birkhauser, 2001.\n""\n""        .. [3] Weisstein, Eric W. \"Laplace Distribution.\"\n""               From MathWorld--A Wolfram Web Resource.\n""               http://mathworld.wolfram.com/LaplaceDistribution.html\n""\n""        .. [4] Wikipedia, \"Laplace distribution\",\n""               http://en.wikipedia.org/wiki/Laplace_distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution\n""\n""        >>> loc, scale = 0., 1.\n""        >>> s = np.random.laplace(loc, scale, 1000)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> count, bins, ignored = plt.hist(s, 30, normed=True)\n""        >>> x = np.arange(-8., 8., .01)\n""        >>> pdf = np.exp(-abs(x-loc/scale))/(2.*scale)\n""        >>> plt.plot(x, pdf)\n""\n""        Plot Gaussian for comparison:\n""\n""        >>> g = (1/(scale * np.sqrt(2 * np.pi)) * \n""        ...      np.exp( - (x - loc)**2 / (2 * scale**2) ))\n""        >>> plt.plot(x,g)\n""\n""        ";__pyx_doc_6mtrand_11RandomState_laplace11542,587706
static PyObject *__pyx_pf_6mtrand_11RandomState_laplace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_laplace11543,590637
static char __pyx_doc_6mtrand_11RandomState_gumbel[] = "\n""        gumbel(loc=0.0, scale=1.0, size=None)\n""\n""        Gumbel distribution.\n""\n""        Draw samples from a Gumbel distribution with specified location (or mean)\n""        and scale (or standard deviation).\n""\n""        The Gumbel (or Smallest Extreme Value (SEV) or the Smallest Extreme Value\n""        Type I) distribution is one of a class of Generalized Extreme Value (GEV)\n""        distributions used in modeling extreme value problems.  The Gumbel is a\n""        special case of the Extreme Value Type I distribution for maximums from\n""        distributions with \"exponential-like\" tails, it may be derived by\n""        considering a Gaussian process of measurements, and generating the pdf for\n""        the maximum values from that set of measurements (see examples).\n""\n""        Parameters\n""        ----------\n""        loc : float\n""            The location of the mode of the distribution.\n""        scale : float\n""            The scale parameter of the distribution.\n""        size : tuple of ints\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        See Also\n""        --------\n""        scipy.stats.gumbel : probability density function,\n""            distribution or cumulative density function, etc.\n""        weibull, scipy.stats.genextreme\n""\n""        Notes\n""        -----\n""        The probability density for the Gumbel distribution is\n""\n""        .. math:: p(x) = \\frac{e^{-(x - \\mu)/ \\beta}}{\\beta} e^{ -e^{-(x - \\mu)/\n""                  \\beta}},\n""\n""        where :math:`\\mu` is the mode, a location parameter, and :math:`\\beta`\n""        is the scale parameter.\n""\n""        The Gumbel (named for German mathematician Emil Julius Gumbel) was used\n""        very early in the hydrology literature, for modeling the occurrence of\n""        flood events. It is also used for modeling maximum wind speed and rainfall\n""        rates.  It is a \"fat-tailed\" distribution - the probability of an event in\n""        the tail of the distribution is larger than if one used a Gaussian, hence\n""        the surprisingly frequent occurrence of 100-year floods. Floods were\n""        initially modeled as a Gaussian process, which underestimated the frequency\n""        of extreme events.\n""\n""        It is one of a class of extreme value distributions, the Generalized\n""        Extreme Value (GEV) distributions, which also includes the Weibull and\n""        Frechet.\n""\n""        The function has a mean of :math:`\\mu + 0.57721\\beta` and a variance of\n""        :math:`\\frac{\\pi^2}{6}\\beta^2`.\n""\n""        References\n""        ----------\n""        .. [1] Gumbel, E.J. (1958). Statistics of Extremes. Columbia University\n""               Press.\n""        .. [2] Reiss, R.-D. and Thomas M. (2001), Statistical Analysis of Extreme\n""               Values, from Insurance, Finance, Hydrology and Other Fields,\n""               Birkhauser Verlag, Basel: Boston : Berlin.\n""        .. [3] Wikipedia, \"Gumbel distribution\",\n""               http://en.wikipedia.org/wiki/Gumbel_distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> mu, beta = 0, 0.1 # location and scale\n""        >>> s = np.random.gumbel(mu, beta, 1000)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> count, bins, ignored = plt.hist(s, 30, normed=True)\n""        >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n""        ...          * np.exp( -np.exp( -(bins - mu) /beta) ),\n""        ...          linewidth=2, color='r')\n""        >>> plt.show()\n""\n""        Show how an extreme value distribution can arise from a Gaussian process\n""        and compare to a Gaussian:\n""\n""        >>> means = []\n""        >>> maxima = []\n""        >>> for i in range(0,1000) :\n""        ...    a = np.random.normal(mu, beta, 1000)\n""        ...    means.append(a.mean())\n""        ...    maxima.append(a.max())\n""        >>> count, bins, ignored = plt.hist(maxima, 30, normed=True)\n""        >>> beta = np.std(maxima)*np.pi/np.sqrt(6)\n""        >>> mu = np.mean(maxima) - 0.57721*beta\n""        >>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n""        ...          * np.exp(-np.exp(-(bins - mu)/beta)),\n""        ...          linewidth=2, color='r')\n""        >>> plt.plot(bins, 1/(beta * np.sqrt(2 * np.pi))\n""        ...          * np.exp(-(bins - mu)**2 / (2 * beta**2)),\n""        ...          linewidth=2, color='g')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_gumbel11845,605376
static PyObject *__pyx_pf_6mtrand_11RandomState_gumbel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_gumbel11846,610183
static char __pyx_doc_6mtrand_11RandomState_logistic[] = "\n""        logistic(loc=0.0, scale=1.0, size=None)\n""\n""        Draw samples from a Logistic distribution.\n""\n""        Samples are drawn from a Logistic distribution with specified\n""        parameters, loc (location or mean, also median), and scale (>0).\n""\n""        Parameters\n""        ----------\n""        loc : float\n""\n""        scale : float > 0.\n""\n""        size : {tuple, int}\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : {ndarray, scalar}\n""                  where the values are all integers in  [0, n].\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.logistic : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Logistic distribution is\n""\n""        .. math:: P(x) = P(x) = \\frac{e^{-(x-\\mu)/s}}{s(1+e^{-(x-\\mu)/s})^2},\n""\n""        where :math:`\\mu` = location and :math:`s` = scale.\n""\n""        The Logistic distribution is used in Extreme Value problems where it\n""        can act as a mixture of Gumbel distributions, in Epidemiology, and by\n""        the World Chess Federation (FIDE) where it is used in the Elo ranking\n""        system, assuming the performance of each player is a logistically\n""        distributed random variable.\n""\n""        References\n""        ----------\n""        .. [1] Reiss, R.-D. and Thomas M. (2001), Statistical Analysis of Extreme\n""               Values, from Insurance, Finance, Hydrology and Other Fields,\n""               Birkhauser Verlag, Basel, pp 132-133.\n""        .. [2] Weisstein, Eric W. \"Logistic Distribution.\" From\n""               MathWorld--A Wolfram Web Resource.\n""               http://mathworld.wolfram.com/LogisticDistribution.html\n""        .. [3] Wikipedia, \"Logistic-distribution\",\n""               http://en.wikipedia.org/wiki/Logistic-distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> loc, scale = 10, 1\n""        >>> s = np.random.logistic(loc, scale, 10000)\n""        >>> count, bins, ignored = plt.hist(s, bins=50)\n""\n""        #   plot against distribution\n""\n""        >>> def logist(x, loc, scale):\n""        ...     return exp((loc-x)/scale)/(scale*(1+exp((loc-x)/scale))**2)\n""        >>> plt.plot(bins, logist(bins, loc, scale)*count.max()/\\\n""        ... logist(bins, loc, scale).max())\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_logistic12148,624914
static PyObject *__pyx_pf_6mtrand_11RandomState_logistic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_logistic12149,627626
static char __pyx_doc_6mtrand_11RandomState_lognormal[] = "\n""        lognormal(mean=0.0, sigma=1.0, size=None)\n""\n""        Return samples drawn from a log-normal distribution.\n""\n""        Draw samples from a log-normal distribution with specified mean, standard\n""        deviation, and shape. Note that the mean and standard deviation are not the\n""        values for the distribution itself, but of the underlying normal\n""        distribution it is derived from.\n""\n""\n""        Parameters\n""        ----------\n""        mean : float\n""            Mean value of the underlying normal distribution\n""        sigma : float, >0.\n""            Standard deviation of the underlying normal distribution\n""        size : tuple of ints\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        See Also\n""        --------\n""        scipy.stats.lognorm : probability density function, distribution,\n""            cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        A variable `x` has a log-normal distribution if `log(x)` is normally\n""        distributed.\n""\n""        The probability density function for the log-normal distribution is\n""\n""        .. math:: p(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n""                         e^{(-\\frac{(ln(x)-\\mu)^2}{2\\sigma^2})}\n""\n""        where :math:`\\mu` is the mean and :math:`\\sigma` is the standard deviation\n""        of the normally distributed logarithm of the variable.\n""\n""        A log-normal distribution results if a random variable is the *product* of\n""        a large number of independent, identically-distributed variables in the\n""        same way that a normal distribution results if the variable is the *sum*\n""        of a large number of independent, identically-distributed variables\n""        (see the last example). It is one of the so-called \"fat-tailed\"\n""        distributions.\n""\n""        The log-normal distribution is commonly used to model the lifespan of units\n""        with fatigue-stress failure modes. Since this includes\n""        most mechanical systems, the log-normal distribution has widespread\n""        application.\n""\n""        It is also commonly used to model oil field sizes, species abundance, and\n""        latent periods of infectious diseases.\n""\n""        References\n""        ----------\n""        .. [1] Eckhard Limpert, Werner A. Stahel, and Markus Abbt, \"Log-normal\n""               Distributions across the Sciences: Keys and Clues\", May 2001\n""               Vol. 51 No. 5 BioScience\n""               http://stat.ethz.ch/~stahel/lognormal/bioscience.pdf\n""        .. [2] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n""               Values, Birkhauser Verlag, Basel, pp 31-32.\n""        .. [3] Wikipedia, \"Lognormal distribution\",\n""               http://en.wikipedia.org/wiki/Lognormal_distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> mu, sigma = 3., 1. # mean and standard deviation\n""        >>> s = np.random.lognormal(mu, sigma, 1000)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> count, bins, ignored = plt.hist(s, 100, normed=True, align='mid')\n""\n""        >>> x = np.linspace(min(bins), max(bins), 10000)\n""        >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n""        ...        / (x * sigma * np.sqrt(2 * np.pi)))\n""\n""        >>> plt.plot(x, pdf, linewidth=2, color='r')\n""        >>> plt.axis('tight')\n""        >>> plt.show()\n""\n""        Demonstrate that taking the products of random samples from a uniform\n""        distribution can be fit well by a log-normal probability density function.\n""\n""        >>> # Generate a thousand samples: each is the product of 100 random\n""        >>> # values, drawn from a normal distribution.\n""        >>> b = []\n""        >>> for i in range(1000):\n""        ...    a = 10. + np.random.random(100)\n""        ...    b.append(np.product(a))\n""\n""        >>> b = np.array(b) / np.min(b) # scale values to be positive\n""\n""        >>> count, bins, ignored = plt.hist(b, 100, normed=True, align='center')\n""\n""        >>> sigma = np.std(np.log(b))\n""        >>> mu = np.mean(np.log(b))\n""\n""        >>> x = np.linspace(min(bins), max(bins), 10000)\n""        >>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n""        ...        / (x * sigma * np.sqrt(2 * np.pi)))\n""\n""        >>> plt.plot(x, pdf, color='r', linewidth=2)\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_lognormal12451,642396
static PyObject *__pyx_pf_6mtrand_11RandomState_lognormal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_lognormal12452,647170
static char __pyx_doc_6mtrand_11RandomState_rayleigh[] = "\n        rayleigh(scale=1.0, size=None)\n\n        Draw samples from a Rayleigh distribution.\n\n        The :math:`\\chi` and Weibull distributions are generalizations of the\n        Rayleigh.\n\n        Parameters\n        ----------\n        scale : scalar\n            Scale, also equals the mode. Should be >= 0.\n        size : int or tuple of ints, optional\n            Shape of the output. Default is None, in which case a single\n            value is returned.\n\n        Notes\n        -----\n        The probability density function for the Rayleigh distribution is\n\n        .. math:: P(x;scale) = \\frac{x}{scale^2}e^{\\frac{-x^2}{2 \\cdotp scale^2}}\n\n        The Rayleigh distribution arises if the wind speed and wind direction are\n        both gaussian variables, then the vector wind velocity forms a Rayleigh\n        distribution. The Rayleigh distribution is used to model the expected\n        output from wind turbines.\n\n        References\n        ----------\n        ..[1] Brighton Webs Ltd., Rayleigh Distribution,\n              http://www.brighton-webs.co.uk/distributions/rayleigh.asp\n        ..[2] Wikipedia, \"Rayleigh distribution\"\n              http://en.wikipedia.org/wiki/Rayleigh_distribution\n\n        Examples\n        --------\n        Draw values from the distribution and plot the histogram\n\n        >>> values = hist(np.random.rayleigh(3, 100000), bins=200, normed=True)\n\n        Wave heights tend to follow a Rayleigh distribution. If the mean wave\n        height is 1 meter, what fraction of waves are likely to be larger than 3\n        meters?\n\n        >>> meanvalue = 1\n        >>> modevalue = np.sqrt(2 / np.pi) * meanvalue\n        >>> s = np.random.rayleigh(modevalue, 1000000)\n\n        The percentage of waves larger than 3 meters is:\n\n        >>> 100.*sum(s>3)/1000000.\n        0.087300000000000003\n\n        ";__pyx_doc_6mtrand_11RandomState_rayleigh12754,661755
static PyObject *__pyx_pf_6mtrand_11RandomState_rayleigh(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_rayleigh12755,663703
static char __pyx_doc_6mtrand_11RandomState_wald[] = "\n""        wald(mean, scale, size=None)\n""\n""        Draw samples from a Wald, or Inverse Gaussian, distribution.\n""\n""        As the scale approaches infinity, the distribution becomes more like a\n""        Gaussian.\n""\n""        Some references claim that the Wald is an Inverse Gaussian with mean=1, but\n""        this is by no means universal.\n""\n""        The Inverse Gaussian distribution was first studied in relationship to\n""        Brownian motion. In 1956 M.C.K. Tweedie used the name Inverse Gaussian\n""        because there is an inverse relationship between the time to cover a unit\n""        distance and distance covered in unit time.\n""\n""        Parameters\n""        ----------\n""        mean : scalar\n""            Distribution mean, should be > 0.\n""        scale : scalar\n""            Scale parameter, should be >= 0.\n""        size : int or tuple of ints, optional\n""            Output shape. Default is None, in which case a single value is\n""            returned.\n""\n""        Returns\n""        -------\n""        samples : ndarray or scalar\n""            Drawn sample, all greater than zero.\n""\n""        Notes\n""        -----\n""        The probability density function for the Wald distribution is\n""\n""        .. math:: P(x;mean,scale) = \\sqrt{\\frac{scale}{2\\pi x^3}}e^\n""                                    \\frac{-scale(x-mean)^2}{2\\cdotp mean^2x}\n""\n""        As noted above the Inverse Gaussian distribution first arise from attempts\n""        to model Brownian Motion. It is also a competitor to the Weibull for use in\n""        reliability modeling and modeling stock returns and interest rate\n""        processes.\n""\n""        References\n""        ----------\n""        ..[1] Brighton Webs Ltd., Wald Distribution,\n""              http://www.brighton-webs.co.uk/distributions/wald.asp\n""        ..[2] Chhikara, Raj S., and Folks, J. Leroy, \"The Inverse Gaussian\n""              Distribution: Theory : Methodology, and Applications\", CRC Press,\n""              1988.\n""        ..[3] Wikipedia, \"Wald distribution\"\n""              http://en.wikipedia.org/wiki/Wald_distribution\n""\n""        Examples\n""        --------\n""        Draw values from the distribution and plot the histogram:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> h = plt.hist(np.random.wald(3, 2, 100000), bins=200, normed=True)\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_wald13017,676141
static PyObject *__pyx_pf_6mtrand_11RandomState_wald(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_wald13018,678652
static char __pyx_doc_6mtrand_11RandomState_triangular[] = "\n""        triangular(left, mode, right, size=None)\n""\n""        Draw samples from the triangular distribution.\n""\n""        The triangular distribution is a continuous probability distribution with\n""        lower limit left, peak at mode, and upper limit right. Unlike the other\n""        distributions, these parameters directly define the shape of the pdf.\n""\n""        Parameters\n""        ----------\n""        left : scalar\n""            Lower limit.\n""        mode : scalar\n""            The value where the peak of the distribution occurs.\n""            The value should fulfill the condition ``left <= mode <= right``.\n""        right : scalar\n""            Upper limit, should be larger than `left`.\n""        size : int or tuple of ints, optional\n""            Output shape. Default is None, in which case a single value is\n""            returned.\n""\n""        Returns\n""        -------\n""        samples : ndarray or scalar\n""            The returned samples all lie in the interval [left, right].\n""\n""        Notes\n""        -----\n""        The probability density function for the Triangular distribution is\n""\n""        .. math:: P(x;l, m, r) = \\begin{cases}\n""                  \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n""                  \\frac{2(m-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n""                  0& \\text{otherwise}.\n""                  \\end{cases}\n""\n""        The triangular distribution is often used in ill-defined problems where the\n""        underlying distribution is not known, but some knowledge of the limits and\n""        mode exists. Often it is used in simulations.\n""\n""        References\n""        ----------\n""        ..[1] Wikipedia, \"Triangular distribution\"\n""              http://en.wikipedia.org/wiki/Triangular_distribution\n""\n""        Examples\n""        --------\n""        Draw values from the distribution and plot the histogram:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> h = plt.hist(np.random.triangular(-3, 0, 8, 100000), bins=200,\n""        ...              normed=True)\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_triangular13415,698947
static PyObject *__pyx_pf_6mtrand_11RandomState_triangular(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_triangular13416,701198
static char __pyx_doc_6mtrand_11RandomState_binomial[] = "\n""        binomial(n, p, size=None)\n""\n""        Draw samples from a binomial distribution.\n""\n""        Samples are drawn from a Binomial distribution with specified\n""        parameters, n trials and p probability of success where\n""        n an integer > 0 and p is in the interval [0,1]. (n may be\n""        input as a float, but it is truncated to an integer in use)\n""\n""        Parameters\n""        ----------\n""        n : float (but truncated to an integer)\n""                parameter, > 0.\n""        p : float\n""                parameter, >= 0 and <=1.\n""        size : {tuple, int}\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : {ndarray, scalar}\n""                  where the values are all integers in  [0, n].\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.binom : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Binomial distribution is\n""\n""        .. math:: P(N) = \\binom{n}{N}p^N(1-p)^{n-N},\n""\n""        where :math:`n` is the number of trials, :math:`p` is the probability\n""        of success, and :math:`N` is the number of successes.\n""\n""        When estimating the standard error of a proportion in a population by\n""        using a random sample, the normal distribution works well unless the\n""        product p*n <=5, where p = population proportion estimate, and n =\n""        number of samples, in which case the binomial distribution is used\n""        instead. For example, a sample of 15 people shows 4 who are left\n""        handed, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4,\n""        so the binomial distribution should be used in this case.\n""\n""        References\n""        ----------\n""        .. [1] Dalgaard, Peter, \"Introductory Statistics with R\",\n""               Springer-Verlag, 2002.\n""        .. [2] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n""               Fifth Edition, 2002.\n""        .. [3] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n""               and Quigley, 1972.\n""        .. [4] Weisstein, Eric W. \"Binomial Distribution.\" From MathWorld--A\n""               Wolfram Web Resource.\n""               http://mathworld.wolfram.com/BinomialDistribution.html\n""        .. [5] Wikipedia, \"Binomial-distribution\",\n""               http://en.wikipedia.org/wiki/Binomial_distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> n, p = 10, .5 # number of trials, probability of each trial\n""        >>> s = np.random.binomial(n, p, 1000)\n""        # result of flipping a coin 10 times, tested 1000 times.\n""\n""        A real world example. A company drills 9 wild-cat oil exploration\n""        wells, each with an estimated probability of success of 0.1. All nine\n""        wells fail. What is the probability of that happening?\n""\n""        Let's do 20,000 trials of the model, and count the number that\n""        generate zero positive results.\n""\n""        >>> sum(np.random.binomial(9,0.1,20000)==0)/20000.\n""        answer = 0.38885, or 38%.\n""\n""        ";__pyx_doc_6mtrand_11RandomState_binomial13961,729396
static PyObject *__pyx_pf_6mtrand_11RandomState_binomial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_binomial13962,732860
static char __pyx_doc_6mtrand_11RandomState_negative_binomial[] = "\n""        negative_binomial(n, p, size=None)\n""\n""        Draw samples from a negative_binomial distribution.\n""\n""        Samples are drawn from a negative_Binomial distribution with specified\n""        parameters, `n` trials and `p` probability of success where `n` is an\n""        integer > 0 and `p` is in the interval [0, 1].\n""\n""        Parameters\n""        ----------\n""        n : int\n""            Parameter, > 0.\n""        p : float\n""            Parameter, >= 0 and <=1.\n""        size : int or tuple of ints\n""            Output shape. If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : int or ndarray of ints\n""            Drawn samples.\n""\n""        Notes\n""        -----\n""        The probability density for the Negative Binomial distribution is\n""\n""        .. math:: P(N;n,p) = \\binom{N+n-1}{n-1}p^{n}(1-p)^{N},\n""\n""        where :math:`n-1` is the number of successes, :math:`p` is the probability\n""        of success, and :math:`N+n-1` is the number of trials.\n""\n""        The negative binomial distribution gives the probability of n-1 successes\n""        and N failures in N+n-1 trials, and success on the (N+n)th trial.\n""\n""        If one throws a die repeatedly until the third time a \"1\" appears, then the\n""        probability distribution of the number of non-\"1\"s that appear before the\n""        third \"1\" is a negative binomial distribution.\n""\n""        References\n""        ----------\n""        .. [1] Weisstein, Eric W. \"Negative Binomial Distribution.\" From\n""               MathWorld--A Wolfram Web Resource.\n""               http://mathworld.wolfram.com/NegativeBinomialDistribution.html\n""        .. [2] Wikipedia, \"Negative binomial distribution\",\n""               http://en.wikipedia.org/wiki/Negative_binomial_distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        A real world example. A company drills wild-cat oil exploration wells, each\n""        with an estimated probability of success of 0.1.  What is the probability\n""        of having one success for each successive well, that is what is the\n""        probability of a single success after drilling 5 wells, after 6 wells,\n""        etc.?\n""\n""        >>> s = np.random.negative_binomial(1, 0.1, 100000)\n""        >>> for i in range(1, 11):\n""        ...    probability = sum(s<i) / 100000.\n""        ...    print i, \"wells drilled, probability of one success =\", probability\n""\n""        ";__pyx_doc_6mtrand_11RandomState_negative_binomial14451,757448
static PyObject *__pyx_pf_6mtrand_11RandomState_negative_binomial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_negative_binomial14452,760152
static char __pyx_doc_6mtrand_11RandomState_poisson[] = "\n        poisson(lam=1.0, size=None)\n\n        Draw samples from a Poisson distribution.\n\n        The Poisson distribution is the limit of the Binomial\n        distribution for large N.\n\n        Parameters\n        ----------\n        lam : float\n            Expectation of interval, should be >= 0.\n        size : int or tuple of ints, optional\n            Output shape. If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.\n\n        Notes\n        -----\n        The Poisson distribution\n\n        .. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n\n        For events with an expected separation :math:`\\lambda` the Poisson\n        distribution :math:`f(k; \\lambda)` describes the probability of\n        :math:`k` events occurring within the observed interval :math:`\\lambda`.\n\n        References\n        ----------\n        .. [1] Weisstein, Eric W. \"Poisson Distribution.\" From MathWorld--A Wolfram\n               Web Resource. http://mathworld.wolfram.com/PoissonDistribution.html\n        .. [2] Wikipedia, \"Poisson distribution\",\n           http://en.wikipedia.org/wiki/Poisson_distribution\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> import numpy as np\n        >>> s = np.random.poisson(5, 10000)\n\n        Display histogram of the sample:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 14, normed=True)\n        >>> plt.show()\n\n        ";__pyx_doc_6mtrand_11RandomState_poisson14957,785480
static PyObject *__pyx_pf_6mtrand_11RandomState_poisson(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_poisson14958,787073
static char __pyx_doc_6mtrand_11RandomState_zipf[] = "\n""        zipf(a, size=None)\n""\n""        Draw samples from a Zipf distribution.\n""\n""        Samples are drawn from a Zipf distribution with specified parameter (a),\n""        where a > 1.\n""\n""        The zipf distribution (also known as the zeta\n""        distribution) is a continuous probability distribution that satisfies\n""        Zipf's law, where the frequency of an item is inversely proportional to\n""        its rank in a frequency table.\n""\n""        Parameters\n""        ----------\n""        a : float\n""            parameter, > 1.\n""        size : {tuple, int}\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : {ndarray, scalar}\n""            The returned samples are greater than or equal to one.\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.zipf : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Zipf distribution is\n""\n""        .. math:: p(x) = \\frac{x^{-a}}{\\zeta(a)},\n""\n""        where :math:`\\zeta` is the Riemann Zeta function.\n""\n""        Named after the American linguist George Kingsley Zipf, who noted that\n""        the frequency of any word in a sample of a language is inversely\n""        proportional to its rank in the frequency table.\n""\n""\n""        References\n""        ----------\n""        .. [1] Weisstein, Eric W. \"Zipf Distribution.\" From MathWorld--A Wolfram\n""               Web Resource. http://mathworld.wolfram.com/ZipfDistribution.html\n""        .. [2] Wikipedia, \"Zeta distribution\",\n""               http://en.wikipedia.org/wiki/Zeta_distribution\n""        .. [3] Wikipedia, \"Zipf's Law\",\n""               http://en.wikipedia.org/wiki/Zipf%27s_law\n""        .. [4] Zipf, George Kingsley (1932): Selected Studies of the Principle\n""               of Relative Frequency in Language. Cambridge (Mass.).\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> a = 2. # parameter\n""        >>> s = np.random.zipf(a, 1000)\n""\n""        Display the histogram of the samples, along with\n""        the probability density function:\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> import scipy.special as sps\n""        Truncate s values at 50 so plot is interesting\n""        >>> count, bins, ignored = plt.hist(s[s<50], 50, normed=True)\n""        >>> x = np.arange(1., 50.)\n""        >>> y = x**(-a)/sps.zetac(a)\n""        >>> plt.plot(x, y/max(y), linewidth=2, color='r')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_zipf15221,799629
static PyObject *__pyx_pf_6mtrand_11RandomState_zipf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_zipf15222,802474
static char __pyx_doc_6mtrand_11RandomState_geometric[] = "\n        geometric(p, size=None)\n\n        Draw samples from the geometric distribution.\n\n        Bernoulli trials are experiments with one of two outcomes:\n        success or failure (an example of such an experiment is flipping\n        a coin).  The geometric distribution models the number of trials\n        that must be run in order to achieve success.  It is therefore\n        supported on the positive integers, ``k = 1, 2, ...``.\n\n        The probability mass function of the geometric distribution is\n\n        .. math:: f(k) = (1 - p)^{k - 1} p\n\n        where `p` is the probability of success of an individual trial.\n\n        Parameters\n        ----------\n        p : float\n            The probability of success of an individual trial.\n        size : tuple of ints\n            Number of values to draw from the distribution.  The output\n            is shaped according to `size`.\n\n        Returns\n        -------\n        out : ndarray\n            Samples from the geometric distribution, shaped according to\n            `size`.\n\n        Examples\n        --------\n        Draw ten thousand values from the geometric distribution,\n        with the probability of an individual success equal to 0.35:\n\n        >>> z = np.random.geometric(p=0.35, size=10000)\n\n        How many trials succeeded after a single run?\n\n        >>> (z == 1).sum() / 10000.\n        0.34889999999999999 #random\n\n        ";__pyx_doc_6mtrand_11RandomState_geometric15481,814588
static PyObject *__pyx_pf_6mtrand_11RandomState_geometric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_geometric15482,816094
static char __pyx_doc_6mtrand_11RandomState_hypergeometric[] = "\n""        hypergeometric(ngood, nbad, nsample, size=None)\n""\n""        Draw samples from a Hypergeometric distribution.\n""\n""        Samples are drawn from a Hypergeometric distribution with specified\n""        parameters, ngood (ways to make a good selection), nbad (ways to make\n""        a bad selection), and nsample = number of items sampled, which is less\n""        than or equal to the sum ngood + nbad.\n""\n""        Parameters\n""        ----------\n""        ngood : float (but truncated to an integer)\n""                parameter, > 0.\n""        nbad  : float\n""                parameter, >= 0.\n""        nsample  : float\n""                   parameter, > 0 and <= ngood+nbad\n""        size : {tuple, int}\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : {ndarray, scalar}\n""                  where the values are all integers in  [0, n].\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.hypergeom : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Hypergeometric distribution is\n""\n""        .. math:: P(x) = \\frac{\\binom{m}{n}\\binom{N-m}{n-x}}{\\binom{N}{n}},\n""\n""        where :math:`0 \\le x \\le m` and :math:`n+m-N \\le x \\le n`\n""\n""        for P(x) the probability of x successes, n = ngood, m = nbad, and\n""        N = number of samples.\n""\n""        Consider an urn with black and white marbles in it, ngood of them\n""        black and nbad are white. If you draw nsample balls without\n""        replacement, then the Hypergeometric distribution describes the\n""        distribution of black balls in the drawn sample.\n""\n""        Note that this distribution is very similar to the Binomial\n""        distribution, except that in this case, samples are drawn without\n""        replacement, whereas in the Binomial case samples are drawn with\n""        replacement (or the sample space is infinite). As the sample space\n""        becomes large, this distribution approaches the Binomial.\n""\n""        References\n""        ----------\n""        .. [1] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n""               and Quigley, 1972.\n""        .. [2] Weisstein, Eric W. \"Hypergeometric Distribution.\" From\n""               MathWorld--A Wolfram Web Resource.\n""               http://mathworld.wolfram.com/HypergeometricDistribution.html\n""        .. [3] Wikipedia, \"Hypergeometric-distribution\",\n""               http://en.wikipedia.org/wiki/Hypergeometric-distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> ngood, nbad, nsamp = 100, 2, 10\n""        # number of good, number of bad, and number of samples\n""        >>> s = np.random.hypergeometric(ngood, nbad, nsamp, 1000)\n""        >>> hist(s)\n""        #   note that it is very unlikely to grab both bad items\n""\n""        Suppose you have an urn with 15 white and 15 black marbles.\n""        If you pull 15 marbles at random, how likely is it that\n""        12 or more of them are one color?\n""\n""        >>> s = np.random.hypergeometric(15, 15, 15, 100000)\n""        >>> sum(s>=12)/100000. + sum(s<=3)/100000.\n""        #   answer = 0.003 ... pretty unlikely!\n""\n""        ";__pyx_doc_6mtrand_11RandomState_hypergeometric15839,833871
static PyObject *__pyx_pf_6mtrand_11RandomState_hypergeometric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_hypergeometric15840,837437
static char __pyx_doc_6mtrand_11RandomState_logseries[] = "\n""        logseries(p, size=None)\n""\n""        Draw samples from a Logarithmic Series distribution.\n""\n""        Samples are drawn from a Log Series distribution with specified\n""        parameter, p (probability, 0 < p < 1).\n""\n""        Parameters\n""        ----------\n""        loc : float\n""\n""        scale : float > 0.\n""\n""        size : {tuple, int}\n""            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n""            ``m * n * k`` samples are drawn.\n""\n""        Returns\n""        -------\n""        samples : {ndarray, scalar}\n""                  where the values are all integers in  [0, n].\n""\n""        See Also\n""        --------\n""        scipy.stats.distributions.logser : probability density function,\n""            distribution or cumulative density function, etc.\n""\n""        Notes\n""        -----\n""        The probability density for the Log Series distribution is\n""\n""        .. math:: P(k) = \\frac{-p^k}{k \\ln(1-p)},\n""\n""        where p = probability.\n""\n""        The Log Series distribution is frequently used to represent species\n""        richness and occurrence, first proposed by Fisher, Corbet, and\n""        Williams in 1943 [2].  It may also be used to model the numbers of\n""        occupants seen in cars [3].\n""\n""        References\n""        ----------\n""        .. [1] Buzas, Martin A.; Culver, Stephen J.,  Understanding regional\n""               species diversity through the log series distribution of\n""               occurrences: BIODIVERSITY RESEARCH Diversity & Distributions,\n""               Volume 5, Number 5, September 1999 , pp. 187-195(9).\n""        .. [2] Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The\n""               relation between the number of species and the number of\n""               individuals in a random sample of an animal population.\n""               Journal of Animal Ecology, 12:42-58.\n""        .. [3] D. J. Hand, F. Daly, D. Lunn, E. Ostrowski, A Handbook of Small\n""               Data Sets, CRC Press, 1994.\n""        .. [4] Wikipedia, \"Logarithmic-distribution\",\n""               http://en.wikipedia.org/wiki/Logarithmic-distribution\n""\n""        Examples\n""        --------\n""        Draw samples from the distribution:\n""\n""        >>> a = .6\n""        >>> s = np.random.logseries(a, 10000)\n""        >>> count, bins, ignored = plt.hist(s)\n""\n""        #   plot against distribution\n""\n""        >>> def logseries(k, p):\n""        ...     return -p**k/(k*log(1-p))\n""        >>> plt.plot(bins, logseries(bins, a)*count.max()/\n""                     logseries(bins, a).max(), 'r')\n""        >>> plt.show()\n""\n""        ";__pyx_doc_6mtrand_11RandomState_logseries16515,874381
static PyObject *__pyx_pf_6mtrand_11RandomState_logseries(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_logseries16516,877150
static char __pyx_doc_6mtrand_11RandomState_multivariate_normal[] = "\n""        multivariate_normal(mean, cov[, size])\n""\n""        Draw random samples from a multivariate normal distribution.\n""\n""        The multivariate normal, multinormal or Gaussian distribution is a\n""        generalisation of the one-dimensional normal distribution to higher\n""        dimensions.\n""\n""        Such a distribution is specified by its mean and covariance matrix,\n""        which are analogous to the mean (average or \"centre\") and variance\n""        (standard deviation squared or \"width\") of the one-dimensional normal\n""        distribution.\n""\n""        Parameters\n""        ----------\n""        mean : (N,) ndarray\n""            Mean of the N-dimensional distribution.\n""        cov : (N,N) ndarray\n""            Covariance matrix of the distribution.\n""        size : tuple of ints, optional\n""            Given a shape of, for example, (m,n,k), m*n*k samples are\n""            generated, and packed in an m-by-n-by-k arrangement.  Because each\n""            sample is N-dimensional, the output shape is (m,n,k,N).  If no\n""            shape is specified, a single sample is returned.\n""\n""        Returns\n""        -------\n""        out : ndarray\n""            The drawn samples, arranged according to `size`.  If the\n""            shape given is (m,n,...), then the shape of `out` is is\n""            (m,n,...,N).\n""\n""            In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n""            value drawn from the distribution.\n""\n""        Notes\n""        -----\n""        The mean is a coordinate in N-dimensional space, which represents the\n""        location where samples are most likely to be generated.  This is\n""        analogous to the peak of the bell curve for the one-dimensional or\n""        univariate normal distribution.\n""\n""        Covariance indicates the level to which two variables vary together.\n""        From the multivariate normal distribution, we draw N-dimensional\n""        samples, :math:`X = [x_1, x_2, ... x_N]`.  The covariance matrix\n""        element :math:`C_{ij}` is the covariance of :math:`x_i` and :math:`x_j`.\n""        The element :math:`C_{ii}` is the variance of :math:`x_i` (i.e. its\n""        \"spread\").\n""\n""        Instead of specifying the full covariance matrix, popular\n""        approximations include:\n""\n""          - Spherical covariance (`cov` is a multiple of the identity matrix)\n""          - Diagonal covariance (`cov` has non-negative elements, and only on\n""            the diagonal)\n""\n""        This geometrical property can be seen in two dimensions by plotting\n""        generated data-points:\n""\n""        >>> mean = [0,0]\n""        >>> cov = [[1,0],[0,100]] # diagonal covariance, points lie on x or y-axis\n""\n""        >>> import matplotlib.pyplot as plt\n""        >>> x,y = np.random.multivariate_normal(mean,cov,5000).T\n""        >>> plt.plot(x,y,'x'); plt.axis('equal'); plt.show()\n""\n""        Note that the covariance matrix must be non-negative definite.\n""\n""        References\n""        ----------\n""        .. [1] A. Papoulis, \"Probability, Random Variables, and Stochastic\n""               Processes,\" 3rd ed., McGraw-Hill Companies, 1991\n""        .. [2] R.O. Duda, P.E. Hart, and D.G. Stork, \"Pattern Classification,\"\n""               2nd ed., Wiley, 2001.\n""\n""        Examples\n""        --------\n""        >>> mean = (1,2)\n""        >>> cov = [[1,0],[1,0]]\n""        >>> x = np.random.multivariate_normal(mean,cov,(3,3))\n""        >>> x.shape\n""        (3, 3, 2)\n""\n""        The following is probably true, given that 0.6 is roughly twice the\n""        standard deviation:\n""\n""        >>> print list( (x[0,0,:] - mean) < 0.6 )\n""        [True, True]\n""\n""        ";__pyx_doc_6mtrand_11RandomState_multivariate_normal16873,895033
static PyObject *__pyx_pf_6mtrand_11RandomState_multivariate_normal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_multivariate_normal16874,898901
static char __pyx_doc_6mtrand_11RandomState_multinomial[] = "\n        multinomial(n, pvals, size=None)\n\n        Draw samples from a multinomial distribution.\n\n        The multinomial distribution is a multivariate generalisation of the\n        binomial distribution.  Take an experiment with one of ``p``\n        possible outcomes.  An example of such an experiment is throwing a dice,\n        where the outcome can be 1 through 6.  Each sample drawn from the\n        distribution represents `n` such experiments.  Its values,\n        ``X_i = [X_0, X_1, ..., X_p]``, represent the number of times the outcome\n        was ``i``.\n\n        Parameters\n        ----------\n        n : int\n            Number of experiments.\n        pvals : sequence of floats, length p\n            Probabilities of each of the ``p`` different outcomes.  These\n            should sum to 1 (however, the last element is always assumed to\n            account for the remaining probability, as long as\n            ``sum(pvals[:-1]) <= 1)``.\n        size : tuple of ints\n            Given a `size` of ``(M, N, K)``, then ``M*N*K`` samples are drawn,\n            and the output shape becomes ``(M, N, K, p)``, since each sample\n            has shape ``(p,)``.\n\n        Examples\n        --------\n        Throw a dice 20 times:\n\n        >>> np.random.multinomial(20, [1/6.]*6, size=1)\n        array([[4, 1, 7, 5, 2, 1]])\n\n        It landed 4 times on 1, once on 2, etc.\n\n        Now, throw the dice 20 times, and 20 times again:\n\n        >>> np.random.multinomial(20, [1/6.]*6, size=2)\n        array([[3, 4, 3, 3, 4, 3],\n               [2, 4, 3, 4, 0, 7]])\n\n        For the first run, we threw 3 times 1, 4 times 2, etc.  For the second,\n        we threw 2 times 1, 4 times 2, etc.\n\n        A loaded dice is more likely to land on number 6:\n\n        >>> np.random.multinomial(100, [1/7.]*5)\n        array([13, 16, 13, 16, 42])\n\n        ";__pyx_doc_6mtrand_11RandomState_multinomial17572,936836
static PyObject *__pyx_pf_6mtrand_11RandomState_multinomial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_multinomial17573,938794
static char __pyx_doc_6mtrand_11RandomState_dirichlet[] = "\n        dirichlet(alpha, size=None)\n\n        Draw samples from the Dirichlet distribution.\n\n        Draw `size` samples of dimension k from a Dirichlet distribution. A\n        Dirichlet-distributed random variable can be seen as a multivariate\n        generalization of a Beta distribution. Dirichlet pdf is the conjugate\n        prior of a multinomial in Bayesian inference.\n\n        Parameters\n        ----------\n        alpha : array\n            Parameter of the distribution (k dimension for sample of\n            dimension k).\n        size : array\n            Number of samples to draw.\n\n        Notes\n        -----\n        .. math:: X \\approx \\prod_{i=1}^{k}{x^{\\alpha_i-1}_i}\n\n        Uses the following property for computation: for each dimension,\n        draw a random sample y_i from a standard gamma generator of shape\n        `alpha_i`, then\n        :math:`X = \\frac{1}{\\sum_{i=1}^k{y_i}} (y_1, \\ldots, y_n)` is\n        Dirichlet distributed.\n\n        References\n        ----------\n        .. [1] David McKay, \"Information Theory, Inference and Learning\n               Algorithms,\" chapter 23,\n               http://www.inference.phy.cam.ac.uk/mackay/\n\n        ";__pyx_doc_6mtrand_11RandomState_dirichlet18040,957875
static PyObject *__pyx_pf_6mtrand_11RandomState_dirichlet(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {__pyx_pf_6mtrand_11RandomState_dirichlet18041,959154
static char __pyx_doc_6mtrand_11RandomState_shuffle[] = "\n        shuffle(x)\n\n        Modify a sequence in-place by shuffling its contents.\n\n        ";__pyx_doc_6mtrand_11RandomState_shuffle18443,975874
static PyObject *__pyx_pf_6mtrand_11RandomState_shuffle(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {__pyx_pf_6mtrand_11RandomState_shuffle18444,976031
static char __pyx_doc_6mtrand_11RandomState_permutation[] = "\n        permutation(x)\n\n        Randomly permute a sequence, or return a permuted range.\n\n        Parameters\n        ----------\n        x : int or array_like\n            If `x` is an integer, randomly permute ``np.arange(x)``.\n            If `x` is an array, make a copy and shuffle the elements\n            randomly.\n\n        Returns\n        -------\n        out : ndarray\n            Permuted sequence or array range.\n\n        Examples\n        --------\n        >>> np.random.permutation(10)\n        array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6])\n\n        >>> np.random.permutation([1, 4, 9, 12, 15])\n        array([15,  1,  9,  4, 12])\n\n        ";__pyx_doc_6mtrand_11RandomState_permutation18769,991242
static PyObject *__pyx_pf_6mtrand_11RandomState_permutation(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {__pyx_pf_6mtrand_11RandomState_permutation18770,991969
static PyObject *__pyx_tp_new_6mtrand_RandomState(PyTypeObject *t, PyObject *a, PyObject *k) {__pyx_tp_new_6mtrand_RandomState18910,998451
static void __pyx_tp_dealloc_6mtrand_RandomState(PyObject *o) {__pyx_tp_dealloc_6mtrand_RandomState18916,998619
static struct PyMethodDef __pyx_methods_6mtrand_RandomState[] = {__pyx_methods_6mtrand_RandomState18929,998975
static PyNumberMethods __pyx_tp_as_number_RandomState = {__pyx_tp_as_number_RandomState18983,1007433
static PySequenceMethods __pyx_tp_as_sequence_RandomState = {__pyx_tp_as_sequence_RandomState19041,1008672
static PyMappingMethods __pyx_tp_as_mapping_RandomState = {__pyx_tp_as_mapping_RandomState19054,1008948
static PyBufferProcs __pyx_tp_as_buffer_RandomState = {__pyx_tp_as_buffer_RandomState19060,1009079
PyTypeObject __pyx_type_6mtrand_RandomState = {__pyx_type_6mtrand_RandomState19081,1009522
static struct PyMethodDef __pyx_methods[] = {__pyx_methods19133,1012433
static struct PyModuleDef __pyx_moduledef = {__pyx_moduledef19140,1012575
static __Pyx_StringTabEntry __pyx_string_tab[] = {__pyx_string_tab19153,1012861
static int __Pyx_InitCachedBuiltins(void) {__Pyx_InitCachedBuiltins19363,1028054
static int __Pyx_InitGlobals(void) {__Pyx_InitGlobals19371,1028552
PyMODINIT_FUNC initmtrand(void)initmtrand19383,1029334
static const char *__pyx_filenames[] = {__pyx_filenames20830,1124650
static void __pyx_init_filenames(void) {__pyx_init_filenames20837,1124754
static void __Pyx_RaiseDoubleKeywordsError(__Pyx_RaiseDoubleKeywordsError20841,1124827
static void __Pyx_RaiseArgtupleInvalid(__Pyx_RaiseArgtupleInvalid20854,1125217
static int __Pyx_ParseOptionalKeywords(__Pyx_ParseOptionalKeywords20884,1126034
static INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {__Pyx_RaiseNeedMoreValuesError20964,1128925
static INLINE void __Pyx_RaiseTooManyValuesError(void) {__Pyx_RaiseTooManyValuesError20974,1129277
static PyObject *__Pyx_UnpackItem(PyObject *iter, Py_ssize_t index) {__Pyx_UnpackItem20978,1129405
static int __Pyx_EndUnpack(PyObject *iter) {__Pyx_EndUnpack20988,1129654
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {__Pyx_GetException21001,1129929
static INLINE int __Pyx_CheckKeywordStrings(__Pyx_CheckKeywordStrings21047,1131352
static INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {__Pyx_TypeTest21081,1132361
static INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {__Pyx_ExceptionSave21094,1132754
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {__Pyx_ExceptionReset21104,1133060
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {__Pyx_Import21118,1133512
static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {__Pyx_GetName21151,1134392
static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {__Pyx_ErrRestore21159,1134609
static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {__Pyx_ErrFetch21174,1135083
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {__Pyx_Raise21187,1135445
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {__Pyx_Raise21254,1137492
static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {__Pyx_PyInt_AsUnsignedChar21296,1138614
static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {__Pyx_PyInt_AsUnsignedShort21315,1139421
static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {__Pyx_PyInt_AsUnsignedInt21334,1140239
static INLINE char __Pyx_PyInt_AsChar(PyObject* x) {__Pyx_PyInt_AsChar21353,1141035
static INLINE short __Pyx_PyInt_AsShort(PyObject* x) {__Pyx_PyInt_AsShort21372,1141736
static INLINE int __Pyx_PyInt_AsInt(PyObject* x) {__Pyx_PyInt_AsInt21391,1142448
static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {__Pyx_PyInt_AsSignedChar21410,1143138
static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {__Pyx_PyInt_AsSignedShort21429,1143921
static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {__Pyx_PyInt_AsSignedInt21448,1144715
static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {__Pyx_PyInt_AsUnsignedLong21467,1145487
static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {__Pyx_PyInt_AsUnsignedLongLong21502,1146692
static INLINE long __Pyx_PyInt_AsLong(PyObject* x) {__Pyx_PyInt_AsLong21537,1147993
static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {__Pyx_PyInt_AsLongLong21572,1149092
static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {__Pyx_PyInt_AsSignedLong21607,1150287
static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {__Pyx_PyInt_AsSignedLongLong21642,1151468
#define __PYX_HAVE_RT_ImportType__PYX_HAVE_RT_ImportType21678,1152778
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,__Pyx_ImportType21679,1152811
#define __PYX_HAVE_RT_ImportModule__PYX_HAVE_RT_ImportModule21724,1153991
static PyObject *__Pyx_ImportModule(const char *name) {__Pyx_ImportModule21725,1154026
static void __Pyx_AddTraceback(const char *funcname) {__Pyx_AddTraceback21749,1154520
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {__Pyx_InitStrings21815,1156762
static INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {__Pyx_PyObject_IsTrue21847,1157758
static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {__Pyx_PyNumber_Int21853,1157938
static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {__Pyx_PyIndex_AsSsize_t21899,1158988
static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {__Pyx_PyInt_FromSize_t21908,1159190
static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {__Pyx_PyInt_AsSize_t21922,1159604

numpy/random/mtrand/mtrand_py_helper.h,143
#define _MTRAND_PY_HELPER_H__MTRAND_PY_HELPER_H_2,29
static PyObject *empty_py_bytes(unsigned long length, void **bytes)empty_py_bytes6,80

numpy/random/mtrand/randomkit.c,1257
#define __MSVCRT_VERSION__ __MSVCRT_VERSION__81,3719
#define _FTIME(_FTIME88,4004
#define _FTIME(_FTIME92,4083
#define _WIN32_WINNT _WIN32_WINNT97,4185
#define RK_DEV_URANDOM RK_DEV_URANDOM112,4402
#define RK_DEV_RANDOM RK_DEV_RANDOM116,4470
char *rk_strerror[RK_ERR_MAX] =rk_strerror119,4514
void rk_seed(unsigned long seed, rk_state *state)rk_seed128,4682
unsigned long rk_hash(unsigned long key)rk_hash144,5192
rk_error rk_randomseed(rk_state *state)rk_randomseed155,5402
#define N N189,6253
#define M M190,6267
#define MATRIX_A MATRIX_A191,6281
#define UPPER_MASK UPPER_MASK192,6311
#define LOWER_MASK LOWER_MASK193,6343
unsigned long rk_random(rk_state *state)rk_random196,6450
long rk_long(rk_state *state)rk_long227,7362
unsigned long rk_ulong(rk_state *state)rk_ulong232,7430
unsigned long rk_interval(unsigned long max, rk_state *state)rk_interval241,7605
double rk_double(rk_state *state)rk_double272,8289
void rk_fill(void *buffer, size_t size, rk_state *state)rk_fill279,8522
rk_error rk_devfill(void *buffer, size_t size, int strong)rk_devfill301,9012
rk_error rk_altfill(void *buffer, size_t size, int strong, rk_state *state)rk_altfill342,9837
double rk_gauss(rk_state *state)rk_gauss353,10056

numpy/random/mtrand/randomkit.h,1073
#define _RANDOMKIT__RANDOMKIT_62,2020
#define RK_STATE_LEN RK_STATE_LEN64,2041
typedef struct rk_state_rk_state_66,2067
    unsigned long key[RK_STATE_LEN];key68,2094
    int pos;pos69,2131
    int has_gauss; /* !=0: gauss contains a gaussian deviate */has_gauss70,2144
    double gauss;gauss71,2208
    int has_binomial; /* !=0: following parameters initialized forhas_binomial78,2490
    double psave;psave80,2599
    long nsave;nsave81,2617
    double r;r82,2633
    double q;q83,2647
    double fm;fm84,2661
    long m;m85,2676
    double p1;p186,2688
    double xm;xm87,2703
    double xl;xl88,2718
    double xr;xr89,2733
    double c;c90,2748
    double laml;laml91,2762
    double lamr;lamr92,2779
    double p2;p293,2796
    double p3;p394,2811
    double p4;p495,2826
rk_state;rk_state98,2844
    RK_NOERR = 0, /* no error */RK_NOERR101,2870
    RK_ENODEV = 1, /* no RK_DEV_RANDOM device */RK_ENODEV102,2903
    RK_ERR_MAX = 2RK_ERR_MAX103,2952
} rk_error;rk_error104,2971
#define RK_MAX RK_MAX110,3080

tools/win32build/cpucaps/cpucaps_main.c,460
HINSTANCE g_hInstance;g_hInstance8,88
HWND g_hwndParent;g_hwndParent10,112
#define CPUID_FAILED CPUID_FAILED12,132
static int _set_bool_str(int val, char* str)_set_bool_str17,238
void __declspec(dllexport) hasSSE3(HWND hwndParent, int string_size, __declspec29,379
void __declspec(dllexport) hasSSE2(HWND hwndParent, int string_size, __declspec66,1306
BOOL WINAPI DllMain(HANDLE hInst, ULONG ul_reason_for_call, LPVOID lpReserved)DllMain104,2234

tools/win32build/cpucaps/cpucaps_main.h,2771
#define _EXDLL_H__EXDLL_H_2,18
#define UNUSED UNUSED7,81
#define UNUSEDUNUSED9,126
#define EXDLL_INIT(EXDLL_INIT15,268
#define WM_NOTIFY_OUTER_NEXT WM_NOTIFY_OUTER_NEXT21,439
#define WM_NOTIFY_CUSTOM_READY WM_NOTIFY_CUSTOM_READY22,482
#define NOTIFY_BYE_BYE NOTIFY_BYE_BYE23,527
typedef struct _stack_t {_stack_t25,555
  struct _stack_t *next;next26,581
  char text[1]; // this should be the length of string_sizetext27,606
} stack_t;stack_t28,666
static unsigned int g_stringsize;g_stringsize31,679
static stack_t **g_stacktop;g_stacktop32,713
static char *g_variables;g_variables33,742
INST_0,         // $0INST_042,1066
INST_1,         // $1INST_143,1088
INST_2,         // $2INST_244,1110
INST_3,         // $3INST_345,1132
INST_4,         // $4INST_446,1154
INST_5,         // $5INST_547,1176
INST_6,         // $6INST_648,1198
INST_7,         // $7INST_749,1220
INST_8,         // $8INST_850,1242
INST_9,         // $9INST_951,1264
INST_R0,        // $R0INST_R052,1286
INST_R1,        // $R1INST_R153,1309
INST_R2,        // $R2INST_R254,1332
INST_R3,        // $R3INST_R355,1355
INST_R4,        // $R4INST_R456,1378
INST_R5,        // $R5INST_R557,1401
INST_R6,        // $R6INST_R658,1424
INST_R7,        // $R7INST_R759,1447
INST_R8,        // $R8INST_R860,1470
INST_R9,        // $R9INST_R961,1493
INST_CMDLINE,   // $CMDLINEINST_CMDLINE62,1516
INST_INSTDIR,   // $INSTDIRINST_INSTDIR63,1544
INST_OUTDIR,    // $OUTDIRINST_OUTDIR64,1572
INST_EXEDIR,    // $EXEDIRINST_EXEDIR65,1599
INST_LANG,      // $LANGUAGEINST_LANG66,1626
__INST_LAST__INST_LAST67,1655
  int autoclose;autoclose71,1688
  int all_user_var;all_user_var72,1705
  int exec_error;exec_error73,1725
  int abort;abort74,1743
  int exec_reboot;exec_reboot75,1756
  int reboot_called;reboot_called76,1775
  int XXX_cur_insttype; // deprecatedXXX_cur_insttype77,1796
  int XXX_insttype_changed; // deprecatedXXX_insttype_changed78,1834
  int silent;silent79,1876
  int instdir_error;instdir_error80,1890
  int rtl;rtl81,1911
  int errlvl;errlvl82,1922
  int alter_reg_view;alter_reg_view83,1936
} exec_flags_type;exec_flags_type84,1958
  exec_flags_type *exec_flags;exec_flags87,1995
  int (__stdcall *ExecuteCodeSegment)(int, HWND);ExecuteCodeSegment88,2026
  void (__stdcall *validate_filename)(char *);validate_filename89,2076
} extra_parameters;extra_parameters90,2123
static int __stdcall popstring(char *str)popstring93,2197
static void __stdcall pushstring(const char *str)pushstring104,2415
static char * __stdcall getuservariable(const int varnum)getuservariable114,2657
static void __stdcall setuservariable(const int varnum, const char *var)setuservariable120,2818

tools/win32build/cpuid/cpuid.c,863
#define CPUID_FLAG_MMX CPUID_FLAG_MMX20,292
#define CPUID_FLAG_SSE CPUID_FLAG_SSE21,337
#define CPUID_FLAG_SSE2 CPUID_FLAG_SSE222,382
#define CPUID_FLAG_SSE3 CPUID_FLAG_SSE323,427
#define CPUID_FLAGS_LONG_MODE CPUID_FLAGS_LONG_MODE28,517
        uint32_t eax;eax34,658
        uint32_t ebx;ebx35,680
        uint32_t ecx;ecx36,702
        uint32_t edx;edx37,724
} cpuid_t;cpuid_t38,746
union _le_reg {_le_reg43,817
        uint8_t ccnt[4];ccnt44,833
        uint32_t reg;reg45,858
typedef union _le_reg le_reg_t ;le_reg_t47,909
static int can_cpuid(void)can_cpuid52,1015
static cpuid_t read_cpuid(unsigned int func)read_cpuid81,1622
static uint32_t get_max_func()get_max_func99,2191
static int get_vendor_string(cpuid_t cpuid, char vendor[])get_vendor_string110,2381
int cpuid_get_caps(cpu_caps_t *cpu)cpuid_get_caps133,2883

tools/win32build/cpuid/cpuid.h,403
#define _GABOU_CPUID_H _GABOU_CPUID_H2,24
#define CPUID_VENDOR_STRING_LEN CPUID_VENDOR_STRING_LEN6,70
struct _cpu_caps {_cpu_caps8,107
	int has_cpuid;has_cpuid9,126
	int has_mmx;has_mmx10,142
	int has_sse;has_sse11,156
	int has_sse2;has_sse212,170
	int has_sse3;has_sse313,185
	char vendor[CPUID_VENDOR_STRING_LEN+1];vendor14,200
typedef struct _cpu_caps cpu_caps_t;cpu_caps_t16,244

tools/win32build/cpuid/test.c,21
int main()main5,40
